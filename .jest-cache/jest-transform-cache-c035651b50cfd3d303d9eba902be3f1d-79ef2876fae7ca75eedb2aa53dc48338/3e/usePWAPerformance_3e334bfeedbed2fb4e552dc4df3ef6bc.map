{"version":3,"names":["cov_47v077dtk","actualCoverage","react_1","s","require","usePWAPerformance","f","performanceData","setPerformanceData","useState","metrics","isLoading","warnings","recommendations","useEffect","measurePerformance","__awaiter","Promise","resolve","document","readyState","b","window","addEventListener","navigation","performance","getEntriesByType","paintEntries","fcp","_a","find","entry","name","startTime","lcp","connection","navigator","mozConnection","webkitConnection","connectionSpeed","effectiveType","memory","memoryUsage","usedJSHeapSize","jsHeapSizeLimit","undefined","cacheHitRate","Math","random","loadTime","loadEventEnd","fetchStart","firstContentfulPaint","largestContentfulPaint","interactionTime","Date","now","timeOrigin","push","console","log","round","error","prev","Object","assign","timer","setTimeout","clearTimeout","getPerformanceScore","score","max","min","getScoreColor","exportPerformanceReport","report","timestamp","toISOString","userAgent","pwaStatus","isInstalled","matchMedia","matches","hasServiceWorker","isOnline","onLine","JSON","stringify","scoreColor","exportReport","exports"],"sources":["/Users/rogerioresende/Desktop/Roteirar-ia/src/hooks/usePWAPerformance.ts"],"sourcesContent":["import { useEffect, useState } from 'react';\n\ninterface PerformanceMetrics {\n  loadTime: number;\n  firstContentfulPaint: number;\n  largestContentfulPaint: number;\n  interactionTime: number;\n  memoryUsage?: number;\n  connectionSpeed: string;\n  cacheHitRate: number;\n}\n\ninterface PWAPerformanceData {\n  metrics: PerformanceMetrics | null;\n  isLoading: boolean;\n  warnings: string[];\n  recommendations: string[];\n}\n\nexport const usePWAPerformance = () => {\n  const [performanceData, setPerformanceData] = useState<PWAPerformanceData>({\n    metrics: null,\n    isLoading: true,\n    warnings: [],\n    recommendations: [],\n  });\n\n  useEffect(() => {\n    const measurePerformance = async () => {\n      try {\n        // Aguardar que tudo carregue\n        await new Promise(resolve => {\n          if (document.readyState === 'complete') {\n            resolve(void 0);\n          } else {\n            window.addEventListener('load', () => resolve(void 0));\n          }\n        });\n\n        // Coletar métricas de performance\n        const navigation = performance.getEntriesByType('navigation')[0] as PerformanceNavigationTiming;\n        \n        // Performance Paint API\n        const paintEntries = performance.getEntriesByType('paint');\n        const fcp = paintEntries.find(entry => entry.name === 'first-contentful-paint')?.startTime || 0;\n        \n        // Largest Contentful Paint (se disponível)\n        let lcp = 0;\n        if ('getLargestContentfulPaint' in window) {\n          // Em ambiente real, usaríamos PerformanceObserver\n          // Para demo, vamos estimar baseado no DOM\n          lcp = fcp + 500; // Estimativa\n        }\n\n        // Connection info\n        const connection = (navigator as any).connection || (navigator as any).mozConnection || (navigator as any).webkitConnection;\n        const connectionSpeed = connection ? connection.effectiveType || 'unknown' : 'unknown';\n\n        // Memory usage (se disponível)\n        const memory = (performance as any).memory;\n        const memoryUsage = memory ? (memory.usedJSHeapSize / memory.jsHeapSizeLimit) * 100 : undefined;\n\n        // Calcular cache hit rate (simulado)\n        const cacheHitRate = Math.random() * 40 + 60; // Simular 60-100%\n\n        const metrics: PerformanceMetrics = {\n          loadTime: navigation.loadEventEnd - navigation.fetchStart,\n          firstContentfulPaint: fcp,\n          largestContentfulPaint: lcp,\n          interactionTime: Date.now() - performance.timeOrigin,\n          memoryUsage,\n          connectionSpeed,\n          cacheHitRate,\n        };\n\n        // Analisar métricas e gerar avisos/recomendações\n        const warnings: string[] = [];\n        const recommendations: string[] = [];\n\n        if (metrics.loadTime > 3000) {\n          warnings.push('Tempo de carregamento alto (> 3s)');\n          recommendations.push('Otimizar cache e compressão de assets');\n        }\n\n        if (metrics.firstContentfulPaint > 1500) {\n          warnings.push('First Contentful Paint lento (> 1.5s)');\n          recommendations.push('Reduzir tamanho de CSS/JS inicial');\n        }\n\n        if (metrics.memoryUsage && metrics.memoryUsage > 75) {\n          warnings.push('Uso de memória alto (> 75%)');\n          recommendations.push('Implementar limpeza de componentes React');\n        }\n\n        if (metrics.cacheHitRate < 70) {\n          warnings.push('Taxa de acerto do cache baixa (< 70%)');\n          recommendations.push('Revisar estratégias de cache do Service Worker');\n        }\n\n        // Recomendações gerais para PWA\n        if (connectionSpeed === '2g' || connectionSpeed === 'slow-2g') {\n          recommendations.push('Implementar modo offline mais robusto para conexões lentas');\n        }\n\n        if (!('serviceWorker' in navigator)) {\n          warnings.push('Service Worker não suportado');\n        }\n\n        setPerformanceData({\n          metrics,\n          isLoading: false,\n          warnings,\n          recommendations,\n        });\n\n        // Log para análise\n        console.log('PWA Performance Metrics:', {\n          loadTime: `${Math.round(metrics.loadTime)}ms`,\n          fcp: `${Math.round(metrics.firstContentfulPaint)}ms`,\n          lcp: `${Math.round(metrics.largestContentfulPaint)}ms`,\n          connectionSpeed: metrics.connectionSpeed,\n          cacheHitRate: `${Math.round(metrics.cacheHitRate)}%`,\n          memoryUsage: metrics.memoryUsage ? `${Math.round(metrics.memoryUsage)}%` : 'N/A',\n        });\n\n      } catch (error: unknown) {\n        console.error('Error measuring PWA performance:', error);\n        setPerformanceData(prev => ({ \n          ...prev, \n          isLoading: false,\n          warnings: [...prev.warnings, 'Erro ao medir performance'],\n        }));\n      }\n    };\n\n    // Aguardar um pouco antes de medir\n    const timer = setTimeout(measurePerformance, 1000);\n    return () => clearTimeout(timer);\n  }, []);\n\n  const getPerformanceScore = (): number => {\n    if (!performanceData.metrics) return 0;\n\n    const { metrics } = performanceData;\n    let score = 100;\n\n    // Penalizar baseado nas métricas\n    if (metrics.loadTime > 2000) score -= 20;\n    if (metrics.firstContentfulPaint > 1000) score -= 15;\n    if (metrics.largestContentfulPaint > 2500) score -= 15;\n    if (metrics.memoryUsage && metrics.memoryUsage > 75) score -= 10;\n    if (metrics.cacheHitRate < 80) score -= 10;\n\n    // Bonificar conexões rápidas\n    if (metrics.connectionSpeed === '4g') score += 5;\n    \n    return Math.max(0, Math.min(100, score));\n  };\n\n  const getScoreColor = (score: number): string => {\n    if (score >= 90) return '#10B981'; // Green\n    if (score >= 75) return '#F59E0B'; // Yellow\n    if (score >= 50) return '#EF4444'; // Red\n    return '#DC2626'; // Dark Red\n  };\n\n  const exportPerformanceReport = (): string => {\n    const report = {\n      timestamp: new Date().toISOString(),\n      score: getPerformanceScore(),\n      metrics: performanceData.metrics,\n      warnings: performanceData.warnings,\n      recommendations: performanceData.recommendations,\n      userAgent: navigator.userAgent,\n      pwaStatus: {\n        isInstalled: window.matchMedia('(display-mode: standalone)').matches,\n        hasServiceWorker: 'serviceWorker' in navigator,\n        isOnline: navigator.onLine,\n      },\n    };\n\n    return JSON.stringify(report, null, 2);\n  };\n\n  return {\n    ...performanceData,\n    score: getPerformanceScore(),\n    scoreColor: getScoreColor(getPerformanceScore()),\n    exportReport: exportPerformanceReport,\n  };\n}; "],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;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","ignoreList":[]}