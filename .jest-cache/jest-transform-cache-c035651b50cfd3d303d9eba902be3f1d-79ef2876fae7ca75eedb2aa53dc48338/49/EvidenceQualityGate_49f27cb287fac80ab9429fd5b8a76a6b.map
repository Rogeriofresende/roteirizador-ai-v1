{"version":3,"names":["cov_28c4emtngm","actualCoverage","EvidenceQualityGate","constructor","f","s","qualityThresholds","minScreenshotResolution","width","height","minPerformanceScore","maxLoadTime","maxLCP","maxFID","maxCLS","minTestPassRate","minEvidenceQuality","validateEvidence","evidence","console","log","validationResults","screenshots","validateScreenshots","performance","validatePerformanceMetrics","performanceMetrics","testResults","validateTestResults","userJourney","validateUserJourney","userJourneyProof","browserCompat","validateBrowserCompatibility","browserCompatibility","overallScore","calculateOverallScore","issues","identifyIssues","recommendations","generateRecommendations","result","passed","b","length","score","timestamp","Date","toISOString","details","logValidationResults","error","count","requirements","validScreenshots","invalidScreenshots","screenshot","isValid","resolution","quality","push","filename","getScreenshotIssues","passRate","total","valid","invalid","metrics","thresholds","loadTime","lcp","fid","cls","passedChecks","Object","values","filter","Boolean","totalChecks","keys","passedTests","test","status","failedTests","failed","map","name","testName","errors","duration","successfulSteps","step","success","failedSteps","successRate","successful","steps","stepName","hasScreenshot","requiredBrowsers","testedBrowsers","report","browser","allRequiredTested","every","some","tested","toLowerCase","includes","compatibilityScore","reduce","acc","tests","totalTests","browserReports","version","os","testsPassed","testsTotal","weights","totalScore","totalWeight","entries","forEach","key","weight","category","toFixed","issue","index","rec","exports"],"sources":["/Users/rogerioresende/Desktop/Roteirar-ia/src/services/qualityGates/EvidenceQualityGate.ts"],"sourcesContent":["// Evidence Quality Gate - Validates evidence quality automatically\ninterface Screenshot {\n  filename: string;\n  resolution: { width: number; height: number };\n  timestamp: string;\n  path: string;\n  quality: number;\n}\n\ninterface PerformanceMetrics {\n  loadTime: number;\n  lcp: number; // Largest Contentful Paint\n  fid: number; // First Input Delay\n  cls: number; // Cumulative Layout Shift\n  domContentLoaded: number;\n  timestamp: string;\n}\n\ninterface TestResult {\n  testName: string;\n  status: 'passed' | 'failed';\n  duration: number;\n  screenshots: string[];\n  errors: string[];\n  timestamp: string;\n}\n\ninterface UserJourneyEvidence {\n  stepName: string;\n  screenshot: string;\n  timestamp: string;\n  success: boolean;\n  details: any;\n}\n\ninterface BrowserCompatibilityReport {\n  browser: string;\n  version: string;\n  os: string;\n  tests: TestResult[];\n  screenshots: Screenshot[];\n  issues: string[];\n  timestamp: string;\n}\n\ninterface EvidencePackage {\n  screenshots: Screenshot[];\n  performanceMetrics: PerformanceMetrics;\n  testResults: TestResult[];\n  userJourneyProof: UserJourneyEvidence[];\n  browserCompatibility: BrowserCompatibilityReport[];\n}\n\ninterface QualityGateResult {\n  passed: boolean;\n  score: number;\n  issues: string[];\n  recommendations: string[];\n  timestamp: string;\n  details: any;\n}\n\ninterface ValidationResult {\n  passed: boolean;\n  details: any;\n}\n\nexport class EvidenceQualityGate {\n  private qualityThresholds = {\n    minScreenshotResolution: { width: 1200, height: 800 },\n    minPerformanceScore: 85,\n    maxLoadTime: 3000,\n    maxLCP: 2500,\n    maxFID: 100,\n    maxCLS: 0.1,\n    minTestPassRate: 95,\n    minEvidenceQuality: 80\n  };\n\n  async validateEvidence(evidence: EvidencePackage): Promise<QualityGateResult> {\n    console.log('🔍 Starting Evidence Quality Gate validation...');\n    \n    const validationResults = {\n      screenshots: await this.validateScreenshots(evidence.screenshots),\n      performance: await this.validatePerformanceMetrics(evidence.performanceMetrics),\n      testResults: await this.validateTestResults(evidence.testResults),\n      userJourney: await this.validateUserJourney(evidence.userJourneyProof),\n      browserCompat: await this.validateBrowserCompatibility(evidence.browserCompatibility)\n    };\n    \n    const overallScore = this.calculateOverallScore(validationResults);\n    const issues = this.identifyIssues(validationResults);\n    const recommendations = this.generateRecommendations(validationResults);\n    \n    const result = {\n      passed: overallScore >= this.qualityThresholds.minEvidenceQuality && issues.length === 0,\n      score: overallScore,\n      issues,\n      recommendations,\n      timestamp: new Date().toISOString(),\n      details: validationResults\n    };\n    \n    // Log detailed results\n    this.logValidationResults(result);\n    \n    return result;\n  }\n  \n  private async validateScreenshots(screenshots: Screenshot[]): Promise<ValidationResult> {\n    if (!screenshots || screenshots.length === 0) {\n      return {\n        passed: false,\n        details: { error: 'No screenshots provided', count: 0 }\n      };\n    }\n    \n    const requirements = this.qualityThresholds.minScreenshotResolution;\n    const validScreenshots: any[] = [];\n    const invalidScreenshots: any[] = [];\n    \n    for (const screenshot of screenshots) {\n      const isValid = \n        screenshot.resolution.width >= requirements.width &&\n        screenshot.resolution.height >= requirements.height &&\n        screenshot.quality >= 0.8;\n      \n      if (isValid) {\n        validScreenshots.push({\n          filename: screenshot.filename,\n          resolution: screenshot.resolution,\n          quality: screenshot.quality,\n          timestamp: screenshot.timestamp\n        });\n      } else {\n        invalidScreenshots.push({\n          filename: screenshot.filename,\n          issues: this.getScreenshotIssues(screenshot, requirements)\n        });\n      }\n    }\n    \n    const passRate = validScreenshots.length / screenshots.length;\n    \n    return {\n      passed: passRate >= 0.9, // 90% of screenshots must be valid\n      details: {\n        total: screenshots.length,\n        valid: validScreenshots.length,\n        invalid: invalidScreenshots.length,\n        passRate: passRate * 100,\n        validScreenshots,\n        invalidScreenshots\n      }\n    };\n  }\n  \n  private async validatePerformanceMetrics(metrics: PerformanceMetrics): Promise<ValidationResult> {\n    if (!metrics) {\n      return {\n        passed: false,\n        details: { error: 'No performance metrics provided' }\n      };\n    }\n    \n    const thresholds = this.qualityThresholds;\n    const validationResults = {\n      loadTime: metrics.loadTime <= thresholds.maxLoadTime,\n      lcp: metrics.lcp <= thresholds.maxLCP,\n      fid: metrics.fid <= thresholds.maxFID,\n      cls: metrics.cls <= thresholds.maxCLS\n    };\n    \n    const passedChecks = Object.values(validationResults).filter(Boolean).length;\n    const totalChecks = Object.keys(validationResults).length;\n    const score = (passedChecks / totalChecks) * 100;\n    \n    return {\n      passed: score >= thresholds.minPerformanceScore,\n      details: {\n        metrics,\n        thresholds: {\n          maxLoadTime: thresholds.maxLoadTime,\n          maxLCP: thresholds.maxLCP,\n          maxFID: thresholds.maxFID,\n          maxCLS: thresholds.maxCLS\n        },\n        validationResults,\n        score,\n        passedChecks,\n        totalChecks\n      }\n    };\n  }\n  \n  private async validateTestResults(testResults: TestResult[]): Promise<ValidationResult> {\n    if (!testResults || testResults.length === 0) {\n      return {\n        passed: false,\n        details: { error: 'No test results provided', count: 0 }\n      };\n    }\n    \n    const passedTests = testResults.filter(test => test.status === 'passed');\n    const failedTests = testResults.filter(test => test.status === 'failed');\n    const passRate = (passedTests.length / testResults.length) * 100;\n    \n    return {\n      passed: passRate >= this.qualityThresholds.minTestPassRate,\n      details: {\n        total: testResults.length,\n        passed: passedTests.length,\n        failed: failedTests.length,\n        passRate,\n        failedTests: failedTests.map(test => ({\n          name: test.testName,\n          errors: test.errors,\n          duration: test.duration\n        }))\n      }\n    };\n  }\n  \n  private async validateUserJourney(userJourneyProof: UserJourneyEvidence[]): Promise<ValidationResult> {\n    if (!userJourneyProof || userJourneyProof.length === 0) {\n      return {\n        passed: false,\n        details: { error: 'No user journey evidence provided', count: 0 }\n      };\n    }\n    \n    const successfulSteps = userJourneyProof.filter(step => step.success);\n    const failedSteps = userJourneyProof.filter(step => !step.success);\n    const successRate = (successfulSteps.length / userJourneyProof.length) * 100;\n    \n    return {\n      passed: successRate >= 95, // 95% success rate required\n      details: {\n        total: userJourneyProof.length,\n        successful: successfulSteps.length,\n        failed: failedSteps.length,\n        successRate,\n        steps: userJourneyProof.map(step => ({\n          stepName: step.stepName,\n          success: step.success,\n          timestamp: step.timestamp,\n          hasScreenshot: !!step.screenshot\n        }))\n      }\n    };\n  }\n  \n  private async validateBrowserCompatibility(browserCompatibility: BrowserCompatibilityReport[]): Promise<ValidationResult> {\n    if (!browserCompatibility || browserCompatibility.length === 0) {\n      return {\n        passed: false,\n        details: { error: 'No browser compatibility evidence provided', count: 0 }\n      };\n    }\n    \n    const requiredBrowsers = ['Chrome', 'Firefox', 'Safari', 'Edge'];\n    const testedBrowsers = browserCompatibility.map(report => report.browser);\n    const allRequiredTested = requiredBrowsers.every(browser => \n      testedBrowsers.some(tested => tested.toLowerCase().includes(browser.toLowerCase()))\n    );\n    \n    const compatibilityScore = browserCompatibility.reduce((acc, report) => {\n      const passedTests = report.tests.filter(test => test.status === 'passed').length;\n      const totalTests = report.tests.length;\n      return acc + (totalTests > 0 ? (passedTests / totalTests) : 0);\n    }, 0) / browserCompatibility.length * 100;\n    \n    return {\n      passed: allRequiredTested && compatibilityScore >= 90,\n      details: {\n        requiredBrowsers,\n        testedBrowsers,\n        allRequiredTested,\n        compatibilityScore,\n        browserReports: browserCompatibility.map(report => ({\n          browser: report.browser,\n          version: report.version,\n          os: report.os,\n          testsPassed: report.tests.filter(test => test.status === 'passed').length,\n          testsTotal: report.tests.length,\n          issues: report.issues\n        }))\n      }\n    };\n  }\n  \n  private calculateOverallScore(validationResults: any): number {\n    const weights = {\n      screenshots: 0.2,\n      performance: 0.25,\n      testResults: 0.25,\n      userJourney: 0.15,\n      browserCompat: 0.15\n    };\n    \n    let totalScore = 0;\n    let totalWeight = 0;\n    \n    Object.entries(validationResults).forEach(([key, result]: [string, any]) => {\n      const weight = weights[key as keyof typeof weights] || 0;\n      const score = result.passed ? 100 : 0;\n      totalScore += score * weight;\n      totalWeight += weight;\n    });\n    \n    return totalWeight > 0 ? totalScore / totalWeight : 0;\n  }\n  \n  private identifyIssues(validationResults: any): string[] {\n    const issues: string[] = [];\n    \n    Object.entries(validationResults).forEach(([category, result]: [string, any]) => {\n      if (!result.passed) {\n        switch (category) {\n          case 'screenshots':\n            issues.push(`Screenshot quality insufficient: ${result.details.invalid}/${result.details.total} screenshots failed validation`);\n            break;\n          case 'performance':\n            issues.push(`Performance metrics below threshold: Score ${result.details.score}%`);\n            break;\n          case 'testResults':\n            issues.push(`Test pass rate insufficient: ${result.details.passRate}% (required: 95%)`);\n            break;\n          case 'userJourney':\n            issues.push(`User journey validation failed: ${result.details.successRate}% success rate`);\n            break;\n          case 'browserCompat':\n            issues.push(`Browser compatibility insufficient: ${result.details.compatibilityScore}% compatibility`);\n            break;\n        }\n      }\n    });\n    \n    return issues;\n  }\n  \n  private generateRecommendations(validationResults: any): string[] {\n    const recommendations: string[] = [];\n    \n    Object.entries(validationResults).forEach(([category, result]: [string, any]) => {\n      if (!result.passed) {\n        switch (category) {\n          case 'screenshots':\n            recommendations.push('Improve screenshot quality: Use higher resolution and ensure all required elements are visible');\n            break;\n          case 'performance':\n            recommendations.push('Optimize performance: Focus on load time, LCP, FID, and CLS metrics');\n            break;\n          case 'testResults':\n            recommendations.push('Fix failing tests: Review and address test failures before proceeding');\n            break;\n          case 'userJourney':\n            recommendations.push('Complete user journey validation: Ensure all user flow steps are successful');\n            break;\n          case 'browserCompat':\n            recommendations.push('Improve browser compatibility: Test on all required browsers and fix compatibility issues');\n            break;\n        }\n      }\n    });\n    \n    return recommendations;\n  }\n  \n  private getScreenshotIssues(screenshot: Screenshot, requirements: any): string[] {\n    const issues: string[] = [];\n    \n    if (screenshot.resolution.width < requirements.width) {\n      issues.push(`Width too low: ${screenshot.resolution.width} (required: ${requirements.width})`);\n    }\n    \n    if (screenshot.resolution.height < requirements.height) {\n      issues.push(`Height too low: ${screenshot.resolution.height} (required: ${requirements.height})`);\n    }\n    \n    if (screenshot.quality < 0.8) {\n      issues.push(`Quality too low: ${screenshot.quality} (required: 0.8)`);\n    }\n    \n    return issues;\n  }\n  \n  private logValidationResults(result: QualityGateResult): void {\n    console.log('\\n🚪 EVIDENCE QUALITY GATE RESULTS:');\n    console.log(`✅ Status: ${result.passed ? 'PASSED' : 'FAILED'}`);\n    console.log(`📊 Score: ${result.score.toFixed(2)}%`);\n    console.log(`⏰ Timestamp: ${result.timestamp}`);\n    \n    if (result.issues.length > 0) {\n      console.log('\\n❌ Issues Found:');\n      result.issues.forEach((issue, index) => {\n        console.log(`  ${index + 1}. ${issue}`);\n      });\n    }\n    \n    if (result.recommendations.length > 0) {\n      console.log('\\n💡 Recommendations:');\n      result.recommendations.forEach((rec, index) => {\n        console.log(`  ${index + 1}. ${rec}`);\n      });\n    }\n    \n    console.log('\\n📋 Detailed Results:');\n    Object.entries(result.details).forEach(([category, details]: [string, any]) => {\n      console.log(`  ${category}: ${details.passed ? '✅ PASSED' : '❌ FAILED'}`);\n    });\n  }\n} "],"mappingsqEI;IAAAA,cAAA,YAAAA,CAAA;MAAA,OAAAC,cAAA;IAAA;EAAA;EAAA,OAAAA,cAAA;AAAA;AAAAD,cAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAFJ,MAAaE,mBAAmB;EAAhCC,YAAA;IAAA;IAAAH,cAAA,GAAAI,CAAA;IAAAJ,cAAA,GAAAK,CAAA;IACU,KAAAC,iBAAiB,GAAG;MAC1BC,uBAAuB,EAAE;QAAEC,KAAK,EAAE,IAAI;QAAEC,MAAM,EAAE;MAAG,CAAE;MACrDC,mBAAmB,EAAE,EAAE;MACvBC,WAAW,EAAE,IAAI;MACjBC,MAAM,EAAE,IAAI;MACZC,MAAM,EAAE,GAAG;MACXC,MAAM,EAAE,GAAG;MACXC,eAAe,EAAE,EAAE;MACnBC,kBAAkB,EAAE;KACrB;EA+UH;EA7UQC,gBAAgBA,CAACC,QAAyB;IAAA;IAAAlB,cAAA,GAAAI,CAAA;IAAAJ,cAAA,GAAAK,CAAA;;;;;MAC9Cc,OAAO,CAACC,GAAG,CAAC,iDAAiD,CAAC;MAE9D,MAAMC,iBAAiB;MAAA;MAAA,CAAArB,cAAA,GAAAK,CAAA,QAAG;QACxBiB,WAAW,EAAE,MAAM,IAAI,CAACC,mBAAmB,CAACL,QAAQ,CAACI,WAAW,CAAC;QACjEE,WAAW,EAAE,MAAM,IAAI,CAACC,0BAA0B,CAACP,QAAQ,CAACQ,kBAAkB,CAAC;QAC/EC,WAAW,EAAE,MAAM,IAAI,CAACC,mBAAmB,CAACV,QAAQ,CAACS,WAAW,CAAC;QACjEE,WAAW,EAAE,MAAM,IAAI,CAACC,mBAAmB,CAACZ,QAAQ,CAACa,gBAAgB,CAAC;QACtEC,aAAa,EAAE,MAAM,IAAI,CAACC,4BAA4B,CAACf,QAAQ,CAACgB,oBAAoB;OACrF;MAED,MAAMC,YAAY;MAAA;MAAA,CAAAnC,cAAA,GAAAK,CAAA,QAAG,IAAI,CAAC+B,qBAAqB,CAACf,iBAAiB,CAAC;MAClE,MAAMgB,MAAM;MAAA;MAAA,CAAArC,cAAA,GAAAK,CAAA,QAAG,IAAI,CAACiC,cAAc,CAACjB,iBAAiB,CAAC;MACrD,MAAMkB,eAAe;MAAA;MAAA,CAAAvC,cAAA,GAAAK,CAAA,QAAG,IAAI,CAACmC,uBAAuB,CAACnB,iBAAiB,CAAC;MAEvE,MAAMoB,MAAM;MAAA;MAAA,CAAAzC,cAAA,GAAAK,CAAA,QAAG;QACbqC,MAAM;QAAE;QAAA,CAAA1C,cAAA,GAAA2C,CAAA,UAAAR,YAAY,IAAI,IAAI,CAAC7B,iBAAiB,CAACU,kBAAkB;QAAA;QAAA,CAAAhB,cAAA,GAAA2C,CAAA,UAAIN,MAAM,CAACO,MAAM,KAAK,CAAC;QACxFC,KAAK,EAAEV,YAAY;QACnBE,MAAM;QACNE,eAAe;QACfO,SAAS,EAAE,IAAIC,IAAI,EAAE,CAACC,WAAW,EAAE;QACnCC,OAAO,EAAE5B;OACV;MAED;MAAA;MAAArB,cAAA,GAAAK,CAAA;MACA,IAAI,CAAC6C,oBAAoB,CAACT,MAAM,CAAC;MAAC;MAAAzC,cAAA,GAAAK,CAAA;MAElC,OAAOoC,MAAM;IACf,CAAC;;EAEalB,mBAAmBA,CAACD,WAAyB;IAAA;IAAAtB,cAAA,GAAAI,CAAA;IAAAJ,cAAA,GAAAK,CAAA;;;;;MACzD;MAAI;MAAA,CAAAL,cAAA,GAAA2C,CAAA,WAACrB,WAAW;MAAA;MAAA,CAAAtB,cAAA,GAAA2C,CAAA,UAAIrB,WAAW,CAACsB,MAAM,KAAK,CAAC,GAAE;QAAA;QAAA5C,cAAA,GAAA2C,CAAA;QAAA3C,cAAA,GAAAK,CAAA;QAC5C,OAAO;UACLqC,MAAM,EAAE,KAAK;UACbO,OAAO,EAAE;YAAEE,KAAK,EAAE,yBAAyB;YAAEC,KAAK,EAAE;UAAC;SACtD;MACH,CAAC;MAAA;MAAA;QAAApD,cAAA,GAAA2C,CAAA;MAAA;MAED,MAAMU,YAAY;MAAA;MAAA,CAAArD,cAAA,GAAAK,CAAA,QAAG,IAAI,CAACC,iBAAiB,CAACC,uBAAuB;MACnE,MAAM+C,gBAAgB;MAAA;MAAA,CAAAtD,cAAA,GAAAK,CAAA,QAAU,EAAE;MAClC,MAAMkD,kBAAkB;MAAA;MAAA,CAAAvD,cAAA,GAAAK,CAAA,QAAU,EAAE;MAAC;MAAAL,cAAA,GAAAK,CAAA;MAErC,KAAK,MAAMmD,UAAU,IAAIlC,WAAW,EAAE;QACpC,MAAMmC,OAAO;QAAA;QAAA,CAAAzD,cAAA,GAAAK,CAAA;QACX;QAAA,CAAAL,cAAA,GAAA2C,CAAA,UAAAa,UAAU,CAACE,UAAU,CAAClD,KAAK,IAAI6C,YAAY,CAAC7C,KAAK;QAAA;QAAA,CAAAR,cAAA,GAAA2C,CAAA,UACjDa,UAAU,CAACE,UAAU,CAACjD,MAAM,IAAI4C,YAAY,CAAC5C,MAAM;QAAA;QAAA,CAAAT,cAAA,GAAA2C,CAAA,UACnDa,UAAU,CAACG,OAAO,IAAI,GAAG;QAAC;QAAA3D,cAAA,GAAAK,CAAA;QAE5B,IAAIoD,OAAO,EAAE;UAAA;UAAAzD,cAAA,GAAA2C,CAAA;UAAA3C,cAAA,GAAAK,CAAA;UACXiD,gBAAgB,CAACM,IAAI,CAAC;YACpBC,QAAQ,EAAEL,UAAU,CAACK,QAAQ;YAC7BH,UAAU,EAAEF,UAAU,CAACE,UAAU;YACjCC,OAAO,EAAEH,UAAU,CAACG,OAAO;YAC3Bb,SAAS,EAAEU,UAAU,CAACV;WACvB,CAAC;QACJ,CAAC,MAAM;UAAA;UAAA9C,cAAA,GAAA2C,CAAA;UAAA3C,cAAA,GAAAK,CAAA;UACLkD,kBAAkB,CAACK,IAAI,CAAC;YACtBC,QAAQ,EAAEL,UAAU,CAACK,QAAQ;YAC7BxB,MAAM,EAAE,IAAI,CAACyB,mBAAmB,CAACN,UAAU,EAAEH,YAAY;WAC1D,CAAC;QACJ;MACF;MAEA,MAAMU,QAAQ;MAAA;MAAA,CAAA/D,cAAA,GAAAK,CAAA,QAAGiD,gBAAgB,CAACV,MAAM,GAAGtB,WAAW,CAACsB,MAAM;MAAC;MAAA5C,cAAA,GAAAK,CAAA;MAE9D,OAAO;QACLqC,MAAM,EAAEqB,QAAQ,IAAI,GAAG;QAAE;QACzBd,OAAO,EAAE;UACPe,KAAK,EAAE1C,WAAW,CAACsB,MAAM;UACzBqB,KAAK,EAAEX,gBAAgB,CAACV,MAAM;UAC9BsB,OAAO,EAAEX,kBAAkB,CAACX,MAAM;UAClCmB,QAAQ,EAAEA,QAAQ,GAAG,GAAG;UACxBT,gBAAgB;UAChBC;;OAEH;IACH,CAAC;;EAEa9B,0BAA0BA,CAAC0C,OAA2B;IAAA;IAAAnE,cAAA,GAAAI,CAAA;IAAAJ,cAAA,GAAAK,CAAA;;;;;MAClE,IAAI,CAAC8D,OAAO,EAAE;QAAA;QAAAnE,cAAA,GAAA2C,CAAA;QAAA3C,cAAA,GAAAK,CAAA;QACZ,OAAO;UACLqC,MAAM,EAAE,KAAK;UACbO,OAAO,EAAE;YAAEE,KAAK,EAAE;UAAiC;SACpD;MACH,CAAC;MAAA;MAAA;QAAAnD,cAAA,GAAA2C,CAAA;MAAA;MAED,MAAMyB,UAAU;MAAA;MAAA,CAAApE,cAAA,GAAAK,CAAA,QAAG,IAAI,CAACC,iBAAiB;MACzC,MAAMe,iBAAiB;MAAA;MAAA,CAAArB,cAAA,GAAAK,CAAA,QAAG;QACxBgE,QAAQ,EAAEF,OAAO,CAACE,QAAQ,IAAID,UAAU,CAACzD,WAAW;QACpD2D,GAAG,EAAEH,OAAO,CAACG,GAAG,IAAIF,UAAU,CAACxD,MAAM;QACrC2D,GAAG,EAAEJ,OAAO,CAACI,GAAG,IAAIH,UAAU,CAACvD,MAAM;QACrC2D,GAAG,EAAEL,OAAO,CAACK,GAAG,IAAIJ,UAAU,CAACtD;OAChC;MAED,MAAM2D,YAAY;MAAA;MAAA,CAAAzE,cAAA,GAAAK,CAAA,QAAGqE,MAAM,CAACC,MAAM,CAACtD,iBAAiB,CAAC,CAACuD,MAAM,CAACC,OAAO,CAAC,CAACjC,MAAM;MAC5E,MAAMkC,WAAW;MAAA;MAAA,CAAA9E,cAAA,GAAAK,CAAA,QAAGqE,MAAM,CAACK,IAAI,CAAC1D,iBAAiB,CAAC,CAACuB,MAAM;MACzD,MAAMC,KAAK;MAAA;MAAA,CAAA7C,cAAA,GAAAK,CAAA,QAAIoE,YAAY,GAAGK,WAAW,GAAI,GAAG;MAAC;MAAA9E,cAAA,GAAAK,CAAA;MAEjD,OAAO;QACLqC,MAAM,EAAEG,KAAK,IAAIuB,UAAU,CAAC1D,mBAAmB;QAC/CuC,OAAO,EAAE;UACPkB,OAAO;UACPC,UAAU,EAAE;YACVzD,WAAW,EAAEyD,UAAU,CAACzD,WAAW;YACnCC,MAAM,EAAEwD,UAAU,CAACxD,MAAM;YACzBC,MAAM,EAAEuD,UAAU,CAACvD,MAAM;YACzBC,MAAM,EAAEsD,UAAU,CAACtD;WACpB;UACDO,iBAAiB;UACjBwB,KAAK;UACL4B,YAAY;UACZK;;OAEH;IACH,CAAC;;EAEalD,mBAAmBA,CAACD,WAAyB;IAAA;IAAA3B,cAAA,GAAAI,CAAA;IAAAJ,cAAA,GAAAK,CAAA;;;;;MACzD;MAAI;MAAA,CAAAL,cAAA,GAAA2C,CAAA,YAAChB,WAAW;MAAA;MAAA,CAAA3B,cAAA,GAAA2C,CAAA,WAAIhB,WAAW,CAACiB,MAAM,KAAK,CAAC,GAAE;QAAA;QAAA5C,cAAA,GAAA2C,CAAA;QAAA3C,cAAA,GAAAK,CAAA;QAC5C,OAAO;UACLqC,MAAM,EAAE,KAAK;UACbO,OAAO,EAAE;YAAEE,KAAK,EAAE,0BAA0B;YAAEC,KAAK,EAAE;UAAC;SACvD;MACH,CAAC;MAAA;MAAA;QAAApD,cAAA,GAAA2C,CAAA;MAAA;MAED,MAAMqC,WAAW;MAAA;MAAA,CAAAhF,cAAA,GAAAK,CAAA,QAAGsB,WAAW,CAACiD,MAAM,CAACK,IAAI,IAAI;QAAA;QAAAjF,cAAA,GAAAI,CAAA;QAAAJ,cAAA,GAAAK,CAAA;QAAA,OAAA4E,IAAI,CAACC,MAAM,KAAK,QAAQ;MAAR,CAAQ,CAAC;MACxE,MAAMC,WAAW;MAAA;MAAA,CAAAnF,cAAA,GAAAK,CAAA,QAAGsB,WAAW,CAACiD,MAAM,CAACK,IAAI,IAAI;QAAA;QAAAjF,cAAA,GAAAI,CAAA;QAAAJ,cAAA,GAAAK,CAAA;QAAA,OAAA4E,IAAI,CAACC,MAAM,KAAK,QAAQ;MAAR,CAAQ,CAAC;MACxE,MAAMnB,QAAQ;MAAA;MAAA,CAAA/D,cAAA,GAAAK,CAAA,QAAI2E,WAAW,CAACpC,MAAM,GAAGjB,WAAW,CAACiB,MAAM,GAAI,GAAG;MAAC;MAAA5C,cAAA,GAAAK,CAAA;MAEjE,OAAO;QACLqC,MAAM,EAAEqB,QAAQ,IAAI,IAAI,CAACzD,iBAAiB,CAACS,eAAe;QAC1DkC,OAAO,EAAE;UACPe,KAAK,EAAErC,WAAW,CAACiB,MAAM;UACzBF,MAAM,EAAEsC,WAAW,CAACpC,MAAM;UAC1BwC,MAAM,EAAED,WAAW,CAACvC,MAAM;UAC1BmB,QAAQ;UACRoB,WAAW,EAAEA,WAAW,CAACE,GAAG,CAACJ,IAAI,IAAK;YAAA;YAAAjF,cAAA,GAAAI,CAAA;YAAAJ,cAAA,GAAAK,CAAA;YAAA;cACpCiF,IAAI,EAAEL,IAAI,CAACM,QAAQ;cACnBC,MAAM,EAAEP,IAAI,CAACO,MAAM;cACnBC,QAAQ,EAAER,IAAI,CAACQ;aAChB;WAAC;;OAEL;IACH,CAAC;;EAEa3D,mBAAmBA,CAACC,gBAAuC;IAAA;IAAA/B,cAAA,GAAAI,CAAA;IAAAJ,cAAA,GAAAK,CAAA;;;;;MACvE;MAAI;MAAA,CAAAL,cAAA,GAAA2C,CAAA,YAACZ,gBAAgB;MAAA;MAAA,CAAA/B,cAAA,GAAA2C,CAAA,WAAIZ,gBAAgB,CAACa,MAAM,KAAK,CAAC,GAAE;QAAA;QAAA5C,cAAA,GAAA2C,CAAA;QAAA3C,cAAA,GAAAK,CAAA;QACtD,OAAO;UACLqC,MAAM,EAAE,KAAK;UACbO,OAAO,EAAE;YAAEE,KAAK,EAAE,mCAAmC;YAAEC,KAAK,EAAE;UAAC;SAChE;MACH,CAAC;MAAA;MAAA;QAAApD,cAAA,GAAA2C,CAAA;MAAA;MAED,MAAM+C,eAAe;MAAA;MAAA,CAAA1F,cAAA,GAAAK,CAAA,QAAG0B,gBAAgB,CAAC6C,MAAM,CAACe,IAAI,IAAI;QAAA;QAAA3F,cAAA,GAAAI,CAAA;QAAAJ,cAAA,GAAAK,CAAA;QAAA,OAAAsF,IAAI,CAACC,OAAO;MAAP,CAAO,CAAC;MACrE,MAAMC,WAAW;MAAA;MAAA,CAAA7F,cAAA,GAAAK,CAAA,QAAG0B,gBAAgB,CAAC6C,MAAM,CAACe,IAAI,IAAI;QAAA;QAAA3F,cAAA,GAAAI,CAAA;QAAAJ,cAAA,GAAAK,CAAA;QAAA,QAACsF,IAAI,CAACC,OAAO;MAAP,CAAO,CAAC;MAClE,MAAME,WAAW;MAAA;MAAA,CAAA9F,cAAA,GAAAK,CAAA,QAAIqF,eAAe,CAAC9C,MAAM,GAAGb,gBAAgB,CAACa,MAAM,GAAI,GAAG;MAAC;MAAA5C,cAAA,GAAAK,CAAA;MAE7E,OAAO;QACLqC,MAAM,EAAEoD,WAAW,IAAI,EAAE;QAAE;QAC3B7C,OAAO,EAAE;UACPe,KAAK,EAAEjC,gBAAgB,CAACa,MAAM;UAC9BmD,UAAU,EAAEL,eAAe,CAAC9C,MAAM;UAClCwC,MAAM,EAAES,WAAW,CAACjD,MAAM;UAC1BkD,WAAW;UACXE,KAAK,EAAEjE,gBAAgB,CAACsD,GAAG,CAACM,IAAI,IAAK;YAAA;YAAA3F,cAAA,GAAAI,CAAA;YAAAJ,cAAA,GAAAK,CAAA;YAAA;cACnC4F,QAAQ,EAAEN,IAAI,CAACM,QAAQ;cACvBL,OAAO,EAAED,IAAI,CAACC,OAAO;cACrB9C,SAAS,EAAE6C,IAAI,CAAC7C,SAAS;cACzBoD,aAAa,EAAE,CAAC,CAACP,IAAI,CAACnC;aACvB;WAAC;;OAEL;IACH,CAAC;;EAEavB,4BAA4BA,CAACC,oBAAkD;IAAA;IAAAlC,cAAA,GAAAI,CAAA;IAAAJ,cAAA,GAAAK,CAAA;;;;;MAC3F;MAAI;MAAA,CAAAL,cAAA,GAAA2C,CAAA,YAACT,oBAAoB;MAAA;MAAA,CAAAlC,cAAA,GAAA2C,CAAA,WAAIT,oBAAoB,CAACU,MAAM,KAAK,CAAC,GAAE;QAAA;QAAA5C,cAAA,GAAA2C,CAAA;QAAA3C,cAAA,GAAAK,CAAA;QAC9D,OAAO;UACLqC,MAAM,EAAE,KAAK;UACbO,OAAO,EAAE;YAAEE,KAAK,EAAE,4CAA4C;YAAEC,KAAK,EAAE;UAAC;SACzE;MACH,CAAC;MAAA;MAAA;QAAApD,cAAA,GAAA2C,CAAA;MAAA;MAED,MAAMwD,gBAAgB;MAAA;MAAA,CAAAnG,cAAA,GAAAK,CAAA,QAAG,CAAC,QAAQ,EAAE,SAAS,EAAE,QAAQ,EAAE,MAAM,CAAC;MAChE,MAAM+F,cAAc;MAAA;MAAA,CAAApG,cAAA,GAAAK,CAAA,QAAG6B,oBAAoB,CAACmD,GAAG,CAACgB,MAAM,IAAI;QAAA;QAAArG,cAAA,GAAAI,CAAA;QAAAJ,cAAA,GAAAK,CAAA;QAAA,OAAAgG,MAAM,CAACC,OAAO;MAAP,CAAO,CAAC;MACzE,MAAMC,iBAAiB;MAAA;MAAA,CAAAvG,cAAA,GAAAK,CAAA,QAAG8F,gBAAgB,CAACK,KAAK,CAACF,OAAO,IACtD;QAAA;QAAAtG,cAAA,GAAAI,CAAA;QAAAJ,cAAA,GAAAK,CAAA;QAAA,OAAA+F,cAAc,CAACK,IAAI,CAACC,MAAM,IAAI;UAAA;UAAA1G,cAAA,GAAAI,CAAA;UAAAJ,cAAA,GAAAK,CAAA;UAAA,OAAAqG,MAAM,CAACC,WAAW,EAAE,CAACC,QAAQ,CAACN,OAAO,CAACK,WAAW,EAAE,CAAC;QAAD,CAAC,CAAC;MAAD,CAAC,CACpF;MAED,MAAME,kBAAkB;MAAA;MAAA,CAAA7G,cAAA,GAAAK,CAAA,QAAG6B,oBAAoB,CAAC4E,MAAM,CAAC,CAACC,GAAG,EAAEV,MAAM,KAAI;QAAA;QAAArG,cAAA,GAAAI,CAAA;QACrE,MAAM4E,WAAW;QAAA;QAAA,CAAAhF,cAAA,GAAAK,CAAA,QAAGgG,MAAM,CAACW,KAAK,CAACpC,MAAM,CAACK,IAAI,IAAI;UAAA;UAAAjF,cAAA,GAAAI,CAAA;UAAAJ,cAAA,GAAAK,CAAA;UAAA,OAAA4E,IAAI,CAACC,MAAM,KAAK,QAAQ;QAAR,CAAQ,CAAC,CAACtC,MAAM;QAChF,MAAMqE,UAAU;QAAA;QAAA,CAAAjH,cAAA,GAAAK,CAAA,QAAGgG,MAAM,CAACW,KAAK,CAACpE,MAAM;QAAC;QAAA5C,cAAA,GAAAK,CAAA;QACvC,OAAO0G,GAAG,IAAIE,UAAU,GAAG,CAAC;QAAA;QAAA,CAAAjH,cAAA,GAAA2C,CAAA,WAAIqC,WAAW,GAAGiC,UAAU;QAAA;QAAA,CAAAjH,cAAA,GAAA2C,CAAA,WAAI,CAAC,EAAC;MAChE,CAAC,EAAE,CAAC,CAAC,GAAGT,oBAAoB,CAACU,MAAM,GAAG,GAAG;MAAC;MAAA5C,cAAA,GAAAK,CAAA;MAE1C,OAAO;QACLqC,MAAM;QAAE;QAAA,CAAA1C,cAAA,GAAA2C,CAAA,WAAA4D,iBAAiB;QAAA;QAAA,CAAAvG,cAAA,GAAA2C,CAAA,WAAIkE,kBAAkB,IAAI,EAAE;QACrD5D,OAAO,EAAE;UACPkD,gBAAgB;UAChBC,cAAc;UACdG,iBAAiB;UACjBM,kBAAkB;UAClBK,cAAc,EAAEhF,oBAAoB,CAACmD,GAAG,CAACgB,MAAM,IAAK;YAAA;YAAArG,cAAA,GAAAI,CAAA;YAAAJ,cAAA,GAAAK,CAAA;YAAA;cAClDiG,OAAO,EAAED,MAAM,CAACC,OAAO;cACvBa,OAAO,EAAEd,MAAM,CAACc,OAAO;cACvBC,EAAE,EAAEf,MAAM,CAACe,EAAE;cACbC,WAAW,EAAEhB,MAAM,CAACW,KAAK,CAACpC,MAAM,CAACK,IAAI,IAAI;gBAAA;gBAAAjF,cAAA,GAAAI,CAAA;gBAAAJ,cAAA,GAAAK,CAAA;gBAAA,OAAA4E,IAAI,CAACC,MAAM,KAAK,QAAQ;cAAR,CAAQ,CAAC,CAACtC,MAAM;cACzE0E,UAAU,EAAEjB,MAAM,CAACW,KAAK,CAACpE,MAAM;cAC/BP,MAAM,EAAEgE,MAAM,CAAChE;aAChB;WAAC;;OAEL;IACH,CAAC;;EAEOD,qBAAqBA,CAACf,iBAAsB;IAAA;IAAArB,cAAA,GAAAI,CAAA;IAClD,MAAMmH,OAAO;IAAA;IAAA,CAAAvH,cAAA,GAAAK,CAAA,QAAG;MACdiB,WAAW,EAAE,GAAG;MAChBE,WAAW,EAAE,IAAI;MACjBG,WAAW,EAAE,IAAI;MACjBE,WAAW,EAAE,IAAI;MACjBG,aAAa,EAAE;KAChB;IAED,IAAIwF,UAAU;IAAA;IAAA,CAAAxH,cAAA,GAAAK,CAAA,QAAG,CAAC;IAClB,IAAIoH,WAAW;IAAA;IAAA,CAAAzH,cAAA,GAAAK,CAAA,QAAG,CAAC;IAAC;IAAAL,cAAA,GAAAK,CAAA;IAEpBqE,MAAM,CAACgD,OAAO,CAACrG,iBAAiB,CAAC,CAACsG,OAAO,CAAC,CAAC,CAACC,GAAG,EAAEnF,MAAM,CAAgB,KAAI;MAAA;MAAAzC,cAAA,GAAAI,CAAA;MACzE,MAAMyH,MAAM;MAAA;MAAA,CAAA7H,cAAA,GAAAK,CAAA;MAAG;MAAA,CAAAL,cAAA,GAAA2C,CAAA,WAAA4E,OAAO,CAACK,GAA2B,CAAC;MAAA;MAAA,CAAA5H,cAAA,GAAA2C,CAAA,WAAI,CAAC;MACxD,MAAME,KAAK;MAAA;MAAA,CAAA7C,cAAA,GAAAK,CAAA,QAAGoC,MAAM,CAACC,MAAM;MAAA;MAAA,CAAA1C,cAAA,GAAA2C,CAAA,WAAG,GAAG;MAAA;MAAA,CAAA3C,cAAA,GAAA2C,CAAA,WAAG,CAAC;MAAC;MAAA3C,cAAA,GAAAK,CAAA;MACtCmH,UAAU,IAAI3E,KAAK,GAAGgF,MAAM;MAAC;MAAA7H,cAAA,GAAAK,CAAA;MAC7BoH,WAAW,IAAII,MAAM;IACvB,CAAC,CAAC;IAAC;IAAA7H,cAAA,GAAAK,CAAA;IAEH,OAAOoH,WAAW,GAAG,CAAC;IAAA;IAAA,CAAAzH,cAAA,GAAA2C,CAAA,WAAG6E,UAAU,GAAGC,WAAW;IAAA;IAAA,CAAAzH,cAAA,GAAA2C,CAAA,WAAG,CAAC;EACvD;EAEQL,cAAcA,CAACjB,iBAAsB;IAAA;IAAArB,cAAA,GAAAI,CAAA;IAC3C,MAAMiC,MAAM;IAAA;IAAA,CAAArC,cAAA,GAAAK,CAAA,QAAa,EAAE;IAAC;IAAAL,cAAA,GAAAK,CAAA;IAE5BqE,MAAM,CAACgD,OAAO,CAACrG,iBAAiB,CAAC,CAACsG,OAAO,CAAC,CAAC,CAACG,QAAQ,EAAErF,MAAM,CAAgB,KAAI;MAAA;MAAAzC,cAAA,GAAAI,CAAA;MAAAJ,cAAA,GAAAK,CAAA;MAC9E,IAAI,CAACoC,MAAM,CAACC,MAAM,EAAE;QAAA;QAAA1C,cAAA,GAAA2C,CAAA;QAAA3C,cAAA,GAAAK,CAAA;QAClB,QAAQyH,QAAQ;UACd,KAAK,aAAa;YAAA;YAAA9H,cAAA,GAAA2C,CAAA;YAAA3C,cAAA,GAAAK,CAAA;YAChBgC,MAAM,CAACuB,IAAI,CAAC,oCAAoCnB,MAAM,CAACQ,OAAO,CAACiB,OAAO,IAAIzB,MAAM,CAACQ,OAAO,CAACe,KAAK,gCAAgC,CAAC;YAAC;YAAAhE,cAAA,GAAAK,CAAA;YAChI;UACF,KAAK,aAAa;YAAA;YAAAL,cAAA,GAAA2C,CAAA;YAAA3C,cAAA,GAAAK,CAAA;YAChBgC,MAAM,CAACuB,IAAI,CAAC,8CAA8CnB,MAAM,CAACQ,OAAO,CAACJ,KAAK,GAAG,CAAC;YAAC;YAAA7C,cAAA,GAAAK,CAAA;YACnF;UACF,KAAK,aAAa;YAAA;YAAAL,cAAA,GAAA2C,CAAA;YAAA3C,cAAA,GAAAK,CAAA;YAChBgC,MAAM,CAACuB,IAAI,CAAC,gCAAgCnB,MAAM,CAACQ,OAAO,CAACc,QAAQ,mBAAmB,CAAC;YAAC;YAAA/D,cAAA,GAAAK,CAAA;YACxF;UACF,KAAK,aAAa;YAAA;YAAAL,cAAA,GAAA2C,CAAA;YAAA3C,cAAA,GAAAK,CAAA;YAChBgC,MAAM,CAACuB,IAAI,CAAC,mCAAmCnB,MAAM,CAACQ,OAAO,CAAC6C,WAAW,gBAAgB,CAAC;YAAC;YAAA9F,cAAA,GAAAK,CAAA;YAC3F;UACF,KAAK,eAAe;YAAA;YAAAL,cAAA,GAAA2C,CAAA;YAAA3C,cAAA,GAAAK,CAAA;YAClBgC,MAAM,CAACuB,IAAI,CAAC,uCAAuCnB,MAAM,CAACQ,OAAO,CAAC4D,kBAAkB,iBAAiB,CAAC;YAAC;YAAA7G,cAAA,GAAAK,CAAA;YACvG;QACJ;MACF,CAAC;MAAA;MAAA;QAAAL,cAAA,GAAA2C,CAAA;MAAA;IACH,CAAC,CAAC;IAAC;IAAA3C,cAAA,GAAAK,CAAA;IAEH,OAAOgC,MAAM;EACf;EAEQG,uBAAuBA,CAACnB,iBAAsB;IAAA;IAAArB,cAAA,GAAAI,CAAA;IACpD,MAAMmC,eAAe;IAAA;IAAA,CAAAvC,cAAA,GAAAK,CAAA,SAAa,EAAE;IAAC;IAAAL,cAAA,GAAAK,CAAA;IAErCqE,MAAM,CAACgD,OAAO,CAACrG,iBAAiB,CAAC,CAACsG,OAAO,CAAC,CAAC,CAACG,QAAQ,EAAErF,MAAM,CAAgB,KAAI;MAAA;MAAAzC,cAAA,GAAAI,CAAA;MAAAJ,cAAA,GAAAK,CAAA;MAC9E,IAAI,CAACoC,MAAM,CAACC,MAAM,EAAE;QAAA;QAAA1C,cAAA,GAAA2C,CAAA;QAAA3C,cAAA,GAAAK,CAAA;QAClB,QAAQyH,QAAQ;UACd,KAAK,aAAa;YAAA;YAAA9H,cAAA,GAAA2C,CAAA;YAAA3C,cAAA,GAAAK,CAAA;YAChBkC,eAAe,CAACqB,IAAI,CAAC,gGAAgG,CAAC;YAAC;YAAA5D,cAAA,GAAAK,CAAA;YACvH;UACF,KAAK,aAAa;YAAA;YAAAL,cAAA,GAAA2C,CAAA;YAAA3C,cAAA,GAAAK,CAAA;YAChBkC,eAAe,CAACqB,IAAI,CAAC,qEAAqE,CAAC;YAAC;YAAA5D,cAAA,GAAAK,CAAA;YAC5F;UACF,KAAK,aAAa;YAAA;YAAAL,cAAA,GAAA2C,CAAA;YAAA3C,cAAA,GAAAK,CAAA;YAChBkC,eAAe,CAACqB,IAAI,CAAC,uEAAuE,CAAC;YAAC;YAAA5D,cAAA,GAAAK,CAAA;YAC9F;UACF,KAAK,aAAa;YAAA;YAAAL,cAAA,GAAA2C,CAAA;YAAA3C,cAAA,GAAAK,CAAA;YAChBkC,eAAe,CAACqB,IAAI,CAAC,6EAA6E,CAAC;YAAC;YAAA5D,cAAA,GAAAK,CAAA;YACpG;UACF,KAAK,eAAe;YAAA;YAAAL,cAAA,GAAA2C,CAAA;YAAA3C,cAAA,GAAAK,CAAA;YAClBkC,eAAe,CAACqB,IAAI,CAAC,2FAA2F,CAAC;YAAC;YAAA5D,cAAA,GAAAK,CAAA;YAClH;QACJ;MACF,CAAC;MAAA;MAAA;QAAAL,cAAA,GAAA2C,CAAA;MAAA;IACH,CAAC,CAAC;IAAC;IAAA3C,cAAA,GAAAK,CAAA;IAEH,OAAOkC,eAAe;EACxB;EAEQuB,mBAAmBA,CAACN,UAAsB,EAAEH,YAAiB;IAAA;IAAArD,cAAA,GAAAI,CAAA;IACnE,MAAMiC,MAAM;IAAA;IAAA,CAAArC,cAAA,GAAAK,CAAA,SAAa,EAAE;IAAC;IAAAL,cAAA,GAAAK,CAAA;IAE5B,IAAImD,UAAU,CAACE,UAAU,CAAClD,KAAK,GAAG6C,YAAY,CAAC7C,KAAK,EAAE;MAAA;MAAAR,cAAA,GAAA2C,CAAA;MAAA3C,cAAA,GAAAK,CAAA;MACpDgC,MAAM,CAACuB,IAAI,CAAC,kBAAkBJ,UAAU,CAACE,UAAU,CAAClD,KAAK,eAAe6C,YAAY,CAAC7C,KAAK,GAAG,CAAC;IAChG,CAAC;IAAA;IAAA;MAAAR,cAAA,GAAA2C,CAAA;IAAA;IAAA3C,cAAA,GAAAK,CAAA;IAED,IAAImD,UAAU,CAACE,UAAU,CAACjD,MAAM,GAAG4C,YAAY,CAAC5C,MAAM,EAAE;MAAA;MAAAT,cAAA,GAAA2C,CAAA;MAAA3C,cAAA,GAAAK,CAAA;MACtDgC,MAAM,CAACuB,IAAI,CAAC,mBAAmBJ,UAAU,CAACE,UAAU,CAACjD,MAAM,eAAe4C,YAAY,CAAC5C,MAAM,GAAG,CAAC;IACnG,CAAC;IAAA;IAAA;MAAAT,cAAA,GAAA2C,CAAA;IAAA;IAAA3C,cAAA,GAAAK,CAAA;IAED,IAAImD,UAAU,CAACG,OAAO,GAAG,GAAG,EAAE;MAAA;MAAA3D,cAAA,GAAA2C,CAAA;MAAA3C,cAAA,GAAAK,CAAA;MAC5BgC,MAAM,CAACuB,IAAI,CAAC,oBAAoBJ,UAAU,CAACG,OAAO,kBAAkB,CAAC;IACvE,CAAC;IAAA;IAAA;MAAA3D,cAAA,GAAA2C,CAAA;IAAA;IAAA3C,cAAA,GAAAK,CAAA;IAED,OAAOgC,MAAM;EACf;EAEQa,oBAAoBA,CAACT,MAAyB;IAAA;IAAAzC,cAAA,GAAAI,CAAA;IAAAJ,cAAA,GAAAK,CAAA;IACpDc,OAAO,CAACC,GAAG,CAAC,qCAAqC,CAAC;IAAC;IAAApB,cAAA,GAAAK,CAAA;IACnDc,OAAO,CAACC,GAAG,CAAC,aAAaqB,MAAM,CAACC,MAAM;IAAA;IAAA,CAAA1C,cAAA,GAAA2C,CAAA,WAAG,QAAQ;IAAA;IAAA,CAAA3C,cAAA,GAAA2C,CAAA,WAAG,QAAQ,GAAE,CAAC;IAAC;IAAA3C,cAAA,GAAAK,CAAA;IAChEc,OAAO,CAACC,GAAG,CAAC,aAAaqB,MAAM,CAACI,KAAK,CAACkF,OAAO,CAAC,CAAC,CAAC,GAAG,CAAC;IAAC;IAAA/H,cAAA,GAAAK,CAAA;IACrDc,OAAO,CAACC,GAAG,CAAC,gBAAgBqB,MAAM,CAACK,SAAS,EAAE,CAAC;IAAC;IAAA9C,cAAA,GAAAK,CAAA;IAEhD,IAAIoC,MAAM,CAACJ,MAAM,CAACO,MAAM,GAAG,CAAC,EAAE;MAAA;MAAA5C,cAAA,GAAA2C,CAAA;MAAA3C,cAAA,GAAAK,CAAA;MAC5Bc,OAAO,CAACC,GAAG,CAAC,mBAAmB,CAAC;MAAC;MAAApB,cAAA,GAAAK,CAAA;MACjCoC,MAAM,CAACJ,MAAM,CAACsF,OAAO,CAAC,CAACK,KAAK,EAAEC,KAAK,KAAI;QAAA;QAAAjI,cAAA,GAAAI,CAAA;QAAAJ,cAAA,GAAAK,CAAA;QACrCc,OAAO,CAACC,GAAG,CAAC,KAAK6G,KAAK,GAAG,CAAC,KAAKD,KAAK,EAAE,CAAC;MACzC,CAAC,CAAC;IACJ,CAAC;IAAA;IAAA;MAAAhI,cAAA,GAAA2C,CAAA;IAAA;IAAA3C,cAAA,GAAAK,CAAA;IAED,IAAIoC,MAAM,CAACF,eAAe,CAACK,MAAM,GAAG,CAAC,EAAE;MAAA;MAAA5C,cAAA,GAAA2C,CAAA;MAAA3C,cAAA,GAAAK,CAAA;MACrCc,OAAO,CAACC,GAAG,CAAC,uBAAuB,CAAC;MAAC;MAAApB,cAAA,GAAAK,CAAA;MACrCoC,MAAM,CAACF,eAAe,CAACoF,OAAO,CAAC,CAACO,GAAG,EAAED,KAAK,KAAI;QAAA;QAAAjI,cAAA,GAAAI,CAAA;QAAAJ,cAAA,GAAAK,CAAA;QAC5Cc,OAAO,CAACC,GAAG,CAAC,KAAK6G,KAAK,GAAG,CAAC,KAAKC,GAAG,EAAE,CAAC;MACvC,CAAC,CAAC;IACJ,CAAC;IAAA;IAAA;MAAAlI,cAAA,GAAA2C,CAAA;IAAA;IAAA3C,cAAA,GAAAK,CAAA;IAEDc,OAAO,CAACC,GAAG,CAAC,wBAAwB,CAAC;IAAC;IAAApB,cAAA,GAAAK,CAAA;IACtCqE,MAAM,CAACgD,OAAO,CAACjF,MAAM,CAACQ,OAAO,CAAC,CAAC0E,OAAO,CAAC,CAAC,CAACG,QAAQ,EAAE7E,OAAO,CAAgB,KAAI;MAAA;MAAAjD,cAAA,GAAAI,CAAA;MAAAJ,cAAA,GAAAK,CAAA;MAC5Ec,OAAO,CAACC,GAAG,CAAC,KAAK0G,QAAQ,KAAK7E,OAAO,CAACP,MAAM;MAAA;MAAA,CAAA1C,cAAA,GAAA2C,CAAA,WAAG,UAAU;MAAA;MAAA,CAAA3C,cAAA,GAAA2C,CAAA,WAAG,UAAU,GAAE,CAAC;IAC3E,CAAC,CAAC;EACJ;;AACD;AAAA3C,cAAA,GAAAK,CAAA;AAzVD8H,OAAA,CAAAjI,mBAAA,GAAAA,mBAAA","ignoreList":[]}