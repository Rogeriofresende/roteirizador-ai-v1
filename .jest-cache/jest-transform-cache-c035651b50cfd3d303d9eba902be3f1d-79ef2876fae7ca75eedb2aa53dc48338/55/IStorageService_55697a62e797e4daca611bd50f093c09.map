{"version":3,"names":["cov_l60l7svbp","path","hash","global","Function","gcv","coverageData","statementMap","start","line","column","end","fnMap","branchMap","s","f","b","inputSourceMap","file","mappings","names","sources","sourcesContent","version","_coverageSchema","coverage","actualCoverage"],"sources":["/Users/rogerioresende/Desktop/Roteirar-ia/src/services/interfaces/IStorageService.ts"],"sourcesContent":["/**\n * Storage Service Interface\n * Contract para servi√ßos de armazenamento (cache, database, localStorage)\n */\n\nimport { IBaseService } from './IBaseService';\n\nexport interface StorageItem<T = any> {\n  key: string;\n  value: T;\n  ttl?: number;\n  metadata?: Record<string, any>;\n  createdAt: Date;\n  updatedAt: Date;\n}\n\nexport interface StorageQuery {\n  collection?: string;\n  filters?: Record<string, any>;\n  orderBy?: { field: string; direction: 'asc' | 'desc' };\n  limit?: number;\n  offset?: number;\n}\n\nexport interface StorageMetrics {\n  totalItems: number;\n  totalSize: number;\n  hitRate?: number;\n  missRate?: number;\n  operations: {\n    reads: number;\n    writes: number;\n    deletes: number;\n  };\n}\n\nexport interface IStorageService extends IBaseService {\n  // Basic CRUD operations\n  get<T>(key: string): Promise<T | null>;\n  set<T>(key: string, value: T, ttl?: number): Promise<void>;\n  delete(key: string): Promise<boolean>;\n  exists(key: string): Promise<boolean>;\n  \n  // Batch operations\n  getMultiple<T>(keys: string[]): Promise<(T | null)[]>;\n  setMultiple<T>(items: Array<{ key: string; value: T; ttl?: number }>): Promise<void>;\n  deleteMultiple(keys: string[]): Promise<number>;\n  \n  // Collection operations (for database services)\n  query<T>(query: StorageQuery): Promise<T[]>;\n  count(query: StorageQuery): Promise<number>;\n  \n  // Cache-specific operations\n  invalidate(pattern?: string): Promise<void>;\n  clear(): Promise<void>;\n  \n  // Storage management\n  getStorageMetrics(): Promise<StorageMetrics>;\n  optimize(): Promise<void>;\n  \n  // Transaction support (for database services)\n  transaction<T>(operations: () => Promise<T>): Promise<T>;\n}\n\nexport interface CacheConfig {\n  maxSize?: number;\n  defaultTTL?: number;\n  strategy: 'LRU' | 'LFU' | 'FIFO';\n  persistent?: boolean;\n}\n\nexport interface DatabaseConfig {\n  connectionString?: string;\n  poolSize?: number;\n  timeout?: number;\n  retryPolicy?: {\n    maxRetries: number;\n    backoffMs: number;\n  };\n} "],"mappings":";;AAAA;;;;AAAA;AAAA,SAAAA,cAAA;EAAA,IAAAC,IAAA;EAAA,IAAAC,IAAA;EAAA,IAAAC,MAAA,OAAAC,QAAA;EAAA,IAAAC,GAAA;EAAA,IAAAC,YAAA;IAAAL,IAAA;IAAAM,YAAA;MAAA;QAAAC,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;IAAA;IAAAE,KAAA;IAAAC,SAAA;IAAAC,CAAA;MAAA;IAAA;IAAAC,CAAA;IAAAC,CAAA;IAAAC,cAAA;MAAAC,IAAA;MAAAC,QAAA;MAAAC,KAAA;MAAAC,OAAA;MAAAC,cAAA;MAAAC,OAAA;IAAA;IAAAC,eAAA;IAAAtB,IAAA;EAAA;EAAA,IAAAuB,QAAA,GAAAtB,MAAA,CAAAE,GAAA,MAAAF,MAAA,CAAAE,GAAA;EAAA,KAAAoB,QAAA,CAAAxB,IAAA,KAAAwB,QAAA,CAAAxB,IAAA,EAAAC,IAAA,KAAAA,IAAA;IAAAuB,QAAA,CAAAxB,IAAA,IAAAK,YAAA;EAAA;EAAA,IAAAoB,cAAA,GAAAD,QAAA,CAAAxB,IAAA;EAAA","ignoreList":[]}