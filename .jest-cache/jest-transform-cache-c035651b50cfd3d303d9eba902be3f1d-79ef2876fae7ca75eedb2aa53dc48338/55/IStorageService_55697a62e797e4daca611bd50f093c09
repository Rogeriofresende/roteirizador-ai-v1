837993ad15a78412c3c12dafdb8cd2ff
"use strict";

/**
 * Storage Service Interface
 * Contract para servi√ßos de armazenamento (cache, database, localStorage)
 */
/* istanbul ignore next */
function cov_l60l7svbp() {
  var path = "/Users/rogerioresende/Desktop/Roteirar-ia/src/services/interfaces/IStorageService.ts";
  var hash = "97ea88f4a968146464e0c2c5df13d56af75d132f";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/rogerioresende/Desktop/Roteirar-ia/src/services/interfaces/IStorageService.ts",
    statementMap: {
      "0": {
        start: {
          line: 6,
          column: 0
        },
        end: {
          line: 6,
          column: 62
        }
      }
    },
    fnMap: {},
    branchMap: {},
    s: {
      "0": 0
    },
    f: {},
    b: {},
    inputSourceMap: {
      file: "/Users/rogerioresende/Desktop/Roteirar-ia/src/services/interfaces/IStorageService.ts",
      mappings: ";AAAA;;;GAGG",
      names: [],
      sources: ["/Users/rogerioresende/Desktop/Roteirar-ia/src/services/interfaces/IStorageService.ts"],
      sourcesContent: ["/**\n * Storage Service Interface\n * Contract para servi\xE7os de armazenamento (cache, database, localStorage)\n */\n\nimport { IBaseService } from './IBaseService';\n\nexport interface StorageItem<T = any> {\n  key: string;\n  value: T;\n  ttl?: number;\n  metadata?: Record<string, any>;\n  createdAt: Date;\n  updatedAt: Date;\n}\n\nexport interface StorageQuery {\n  collection?: string;\n  filters?: Record<string, any>;\n  orderBy?: { field: string; direction: 'asc' | 'desc' };\n  limit?: number;\n  offset?: number;\n}\n\nexport interface StorageMetrics {\n  totalItems: number;\n  totalSize: number;\n  hitRate?: number;\n  missRate?: number;\n  operations: {\n    reads: number;\n    writes: number;\n    deletes: number;\n  };\n}\n\nexport interface IStorageService extends IBaseService {\n  // Basic CRUD operations\n  get<T>(key: string): Promise<T | null>;\n  set<T>(key: string, value: T, ttl?: number): Promise<void>;\n  delete(key: string): Promise<boolean>;\n  exists(key: string): Promise<boolean>;\n  \n  // Batch operations\n  getMultiple<T>(keys: string[]): Promise<(T | null)[]>;\n  setMultiple<T>(items: Array<{ key: string; value: T; ttl?: number }>): Promise<void>;\n  deleteMultiple(keys: string[]): Promise<number>;\n  \n  // Collection operations (for database services)\n  query<T>(query: StorageQuery): Promise<T[]>;\n  count(query: StorageQuery): Promise<number>;\n  \n  // Cache-specific operations\n  invalidate(pattern?: string): Promise<void>;\n  clear(): Promise<void>;\n  \n  // Storage management\n  getStorageMetrics(): Promise<StorageMetrics>;\n  optimize(): Promise<void>;\n  \n  // Transaction support (for database services)\n  transaction<T>(operations: () => Promise<T>): Promise<T>;\n}\n\nexport interface CacheConfig {\n  maxSize?: number;\n  defaultTTL?: number;\n  strategy: 'LRU' | 'LFU' | 'FIFO';\n  persistent?: boolean;\n}\n\nexport interface DatabaseConfig {\n  connectionString?: string;\n  poolSize?: number;\n  timeout?: number;\n  retryPolicy?: {\n    maxRetries: number;\n    backoffMs: number;\n  };\n} "],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "97ea88f4a968146464e0c2c5df13d56af75d132f"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_l60l7svbp = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_l60l7svbp();
cov_l60l7svbp().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJjb3ZfbDYwbDdzdmJwIiwicGF0aCIsImhhc2giLCJnbG9iYWwiLCJGdW5jdGlvbiIsImdjdiIsImNvdmVyYWdlRGF0YSIsInN0YXRlbWVudE1hcCIsInN0YXJ0IiwibGluZSIsImNvbHVtbiIsImVuZCIsImZuTWFwIiwiYnJhbmNoTWFwIiwicyIsImYiLCJiIiwiaW5wdXRTb3VyY2VNYXAiLCJmaWxlIiwibWFwcGluZ3MiLCJuYW1lcyIsInNvdXJjZXMiLCJzb3VyY2VzQ29udGVudCIsInZlcnNpb24iLCJfY292ZXJhZ2VTY2hlbWEiLCJjb3ZlcmFnZSIsImFjdHVhbENvdmVyYWdlIl0sInNvdXJjZXMiOlsiL1VzZXJzL3JvZ2VyaW9yZXNlbmRlL0Rlc2t0b3AvUm90ZWlyYXItaWEvc3JjL3NlcnZpY2VzL2ludGVyZmFjZXMvSVN0b3JhZ2VTZXJ2aWNlLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogU3RvcmFnZSBTZXJ2aWNlIEludGVyZmFjZVxuICogQ29udHJhY3QgcGFyYSBzZXJ2acOnb3MgZGUgYXJtYXplbmFtZW50byAoY2FjaGUsIGRhdGFiYXNlLCBsb2NhbFN0b3JhZ2UpXG4gKi9cblxuaW1wb3J0IHsgSUJhc2VTZXJ2aWNlIH0gZnJvbSAnLi9JQmFzZVNlcnZpY2UnO1xuXG5leHBvcnQgaW50ZXJmYWNlIFN0b3JhZ2VJdGVtPFQgPSBhbnk+IHtcbiAga2V5OiBzdHJpbmc7XG4gIHZhbHVlOiBUO1xuICB0dGw/OiBudW1iZXI7XG4gIG1ldGFkYXRhPzogUmVjb3JkPHN0cmluZywgYW55PjtcbiAgY3JlYXRlZEF0OiBEYXRlO1xuICB1cGRhdGVkQXQ6IERhdGU7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgU3RvcmFnZVF1ZXJ5IHtcbiAgY29sbGVjdGlvbj86IHN0cmluZztcbiAgZmlsdGVycz86IFJlY29yZDxzdHJpbmcsIGFueT47XG4gIG9yZGVyQnk/OiB7IGZpZWxkOiBzdHJpbmc7IGRpcmVjdGlvbjogJ2FzYycgfCAnZGVzYycgfTtcbiAgbGltaXQ/OiBudW1iZXI7XG4gIG9mZnNldD86IG51bWJlcjtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBTdG9yYWdlTWV0cmljcyB7XG4gIHRvdGFsSXRlbXM6IG51bWJlcjtcbiAgdG90YWxTaXplOiBudW1iZXI7XG4gIGhpdFJhdGU/OiBudW1iZXI7XG4gIG1pc3NSYXRlPzogbnVtYmVyO1xuICBvcGVyYXRpb25zOiB7XG4gICAgcmVhZHM6IG51bWJlcjtcbiAgICB3cml0ZXM6IG51bWJlcjtcbiAgICBkZWxldGVzOiBudW1iZXI7XG4gIH07XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgSVN0b3JhZ2VTZXJ2aWNlIGV4dGVuZHMgSUJhc2VTZXJ2aWNlIHtcbiAgLy8gQmFzaWMgQ1JVRCBvcGVyYXRpb25zXG4gIGdldDxUPihrZXk6IHN0cmluZyk6IFByb21pc2U8VCB8IG51bGw+O1xuICBzZXQ8VD4oa2V5OiBzdHJpbmcsIHZhbHVlOiBULCB0dGw/OiBudW1iZXIpOiBQcm9taXNlPHZvaWQ+O1xuICBkZWxldGUoa2V5OiBzdHJpbmcpOiBQcm9taXNlPGJvb2xlYW4+O1xuICBleGlzdHMoa2V5OiBzdHJpbmcpOiBQcm9taXNlPGJvb2xlYW4+O1xuICBcbiAgLy8gQmF0Y2ggb3BlcmF0aW9uc1xuICBnZXRNdWx0aXBsZTxUPihrZXlzOiBzdHJpbmdbXSk6IFByb21pc2U8KFQgfCBudWxsKVtdPjtcbiAgc2V0TXVsdGlwbGU8VD4oaXRlbXM6IEFycmF5PHsga2V5OiBzdHJpbmc7IHZhbHVlOiBUOyB0dGw/OiBudW1iZXIgfT4pOiBQcm9taXNlPHZvaWQ+O1xuICBkZWxldGVNdWx0aXBsZShrZXlzOiBzdHJpbmdbXSk6IFByb21pc2U8bnVtYmVyPjtcbiAgXG4gIC8vIENvbGxlY3Rpb24gb3BlcmF0aW9ucyAoZm9yIGRhdGFiYXNlIHNlcnZpY2VzKVxuICBxdWVyeTxUPihxdWVyeTogU3RvcmFnZVF1ZXJ5KTogUHJvbWlzZTxUW10+O1xuICBjb3VudChxdWVyeTogU3RvcmFnZVF1ZXJ5KTogUHJvbWlzZTxudW1iZXI+O1xuICBcbiAgLy8gQ2FjaGUtc3BlY2lmaWMgb3BlcmF0aW9uc1xuICBpbnZhbGlkYXRlKHBhdHRlcm4/OiBzdHJpbmcpOiBQcm9taXNlPHZvaWQ+O1xuICBjbGVhcigpOiBQcm9taXNlPHZvaWQ+O1xuICBcbiAgLy8gU3RvcmFnZSBtYW5hZ2VtZW50XG4gIGdldFN0b3JhZ2VNZXRyaWNzKCk6IFByb21pc2U8U3RvcmFnZU1ldHJpY3M+O1xuICBvcHRpbWl6ZSgpOiBQcm9taXNlPHZvaWQ+O1xuICBcbiAgLy8gVHJhbnNhY3Rpb24gc3VwcG9ydCAoZm9yIGRhdGFiYXNlIHNlcnZpY2VzKVxuICB0cmFuc2FjdGlvbjxUPihvcGVyYXRpb25zOiAoKSA9PiBQcm9taXNlPFQ+KTogUHJvbWlzZTxUPjtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBDYWNoZUNvbmZpZyB7XG4gIG1heFNpemU/OiBudW1iZXI7XG4gIGRlZmF1bHRUVEw/OiBudW1iZXI7XG4gIHN0cmF0ZWd5OiAnTFJVJyB8ICdMRlUnIHwgJ0ZJRk8nO1xuICBwZXJzaXN0ZW50PzogYm9vbGVhbjtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBEYXRhYmFzZUNvbmZpZyB7XG4gIGNvbm5lY3Rpb25TdHJpbmc/OiBzdHJpbmc7XG4gIHBvb2xTaXplPzogbnVtYmVyO1xuICB0aW1lb3V0PzogbnVtYmVyO1xuICByZXRyeVBvbGljeT86IHtcbiAgICBtYXhSZXRyaWVzOiBudW1iZXI7XG4gICAgYmFja29mZk1zOiBudW1iZXI7XG4gIH07XG59ICJdLCJtYXBwaW5ncyI6Ijs7QUFBQTs7OztBQUFBO0FBQUEsU0FBQUEsY0FBQTtFQUFBLElBQUFDLElBQUE7RUFBQSxJQUFBQyxJQUFBO0VBQUEsSUFBQUMsTUFBQSxPQUFBQyxRQUFBO0VBQUEsSUFBQUMsR0FBQTtFQUFBLElBQUFDLFlBQUE7SUFBQUwsSUFBQTtJQUFBTSxZQUFBO01BQUE7UUFBQUMsS0FBQTtVQUFBQyxJQUFBO1VBQUFDLE1BQUE7UUFBQTtRQUFBQyxHQUFBO1VBQUFGLElBQUE7VUFBQUMsTUFBQTtRQUFBO01BQUE7SUFBQTtJQUFBRSxLQUFBO0lBQUFDLFNBQUE7SUFBQUMsQ0FBQTtNQUFBO0lBQUE7SUFBQUMsQ0FBQTtJQUFBQyxDQUFBO0lBQUFDLGNBQUE7TUFBQUMsSUFBQTtNQUFBQyxRQUFBO01BQUFDLEtBQUE7TUFBQUMsT0FBQTtNQUFBQyxjQUFBO01BQUFDLE9BQUE7SUFBQTtJQUFBQyxlQUFBO0lBQUF0QixJQUFBO0VBQUE7RUFBQSxJQUFBdUIsUUFBQSxHQUFBdEIsTUFBQSxDQUFBRSxHQUFBLE1BQUFGLE1BQUEsQ0FBQUUsR0FBQTtFQUFBLEtBQUFvQixRQUFBLENBQUF4QixJQUFBLEtBQUF3QixRQUFBLENBQUF4QixJQUFBLEVBQUFDLElBQUEsS0FBQUEsSUFBQTtJQUFBdUIsUUFBQSxDQUFBeEIsSUFBQSxJQUFBSyxZQUFBO0VBQUE7RUFBQSxJQUFBb0IsY0FBQSxHQUFBRCxRQUFBLENBQUF4QixJQUFBO0VBQUEiLCJpZ25vcmVMaXN0IjpbXX0=