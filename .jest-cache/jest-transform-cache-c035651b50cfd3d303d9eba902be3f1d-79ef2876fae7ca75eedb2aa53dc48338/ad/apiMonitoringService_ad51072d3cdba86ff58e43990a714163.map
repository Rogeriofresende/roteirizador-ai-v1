{"version":3,"names":["cov_13h7f332w0","actualCoverage","geminiService_1","s","require","analyticsService_1","APIMonitoringService","constructor","f","healthCheckInterval","healthCheckFrequency","metrics","totalRequests","successfulRequests","failedRequests","averageResponseTime","uptime","lastHealthCheck","circuitBreakerState","failureRate","loadMetrics","startMonitoring","console","log","setInterval","performHealthCheck","stopMonitoring","b","clearInterval","startTime","Date","now","isHealthy","geminiService","testConnection","responseTime","updateMetrics","successful","getSystemStatus","warn","handleHealthCheckFailure","error","checkResult","saveMetrics","analyticsService","trackUserAction","response_time","circuit_breaker_state","failure_rate","trackError","getMetrics","Object","assign","getHealthStatus","systemStatus","healthy","configured","failureCount","lastTested","localStorage","setItem","JSON","stringify","saved","getItem","parse","resetMetrics","exports","apiMonitoringService"],"sources":["/Users/rogerioresende/Desktop/Roteirar-ia/src/services/apiMonitoringService.ts"],"sourcesContent":["// API Monitoring Service for Gemini Integration\nimport { geminiService } from './geminiService';\nimport { analyticsService } from './analyticsService';\n\nexport class APIMonitoringService {\n  private healthCheckInterval: NodeJS.Timeout | null = null;\n  private healthCheckFrequency = 30000; // 30 seconds\n  private metrics: APIMetrics = {\n    totalRequests: 0,\n    successfulRequests: 0,\n    failedRequests: 0,\n    averageResponseTime: 0,\n    uptime: 0,\n    lastHealthCheck: null,\n    circuitBreakerState: 'CLOSED',\n    failureRate: 0\n  };\n\n  constructor() {\n    this.loadMetrics();\n  }\n\n  startMonitoring(): void {\n    console.log('üîç Iniciando monitoramento da API Gemini...');\n    \n    // Start health check interval\n    this.healthCheckInterval = setInterval(() => {\n      this.performHealthCheck();\n    }, this.healthCheckFrequency);\n\n    // Initial health check\n    this.performHealthCheck();\n  }\n\n  stopMonitoring(): void {\n    if (this.healthCheckInterval) {\n      clearInterval(this.healthCheckInterval);\n      this.healthCheckInterval = null;\n      console.log('‚èπÔ∏è Monitoramento da API Gemini parado.');\n    }\n  }\n\n  private async performHealthCheck(): Promise<void> {\n    const startTime = Date.now();\n    \n    try {\n      const isHealthy = await geminiService.testConnection();\n      const responseTime = Date.now() - startTime;\n      \n      this.updateMetrics({\n        successful: isHealthy,\n        responseTime,\n        circuitBreakerState: geminiService.getSystemStatus().circuitBreakerState\n      });\n\n      if (isHealthy) {\n        console.log(`‚úÖ API Health Check: OK (${responseTime}ms)`);\n      } else {\n        console.warn(`‚ö†Ô∏è API Health Check: FAILED (${responseTime}ms)`);\n        this.handleHealthCheckFailure();\n      }\n\n    } catch (error) {\n      const responseTime = Date.now() - startTime;\n      console.error('‚ùå Health Check Error:', error);\n      \n      this.updateMetrics({\n        successful: false,\n        responseTime,\n        circuitBreakerState: geminiService.getSystemStatus().circuitBreakerState\n      });\n      \n      this.handleHealthCheckFailure();\n    }\n  }\n\n  private updateMetrics(checkResult: {\n    successful: boolean;\n    responseTime: number;\n    circuitBreakerState: string;\n  }): void {\n    this.metrics.totalRequests++;\n    \n    if (checkResult.successful) {\n      this.metrics.successfulRequests++;\n    } else {\n      this.metrics.failedRequests++;\n    }\n\n    // Update average response time\n    this.metrics.averageResponseTime = (\n      (this.metrics.averageResponseTime * (this.metrics.totalRequests - 1)) + \n      checkResult.responseTime\n    ) / this.metrics.totalRequests;\n\n    // Update failure rate\n    this.metrics.failureRate = (this.metrics.failedRequests / this.metrics.totalRequests) * 100;\n\n    // Update circuit breaker state\n    this.metrics.circuitBreakerState = checkResult.circuitBreakerState;\n    \n    // Update last health check\n    this.metrics.lastHealthCheck = new Date();\n\n    // Calculate uptime (simplified)\n    this.metrics.uptime = (this.metrics.successfulRequests / this.metrics.totalRequests) * 100;\n\n    // Save metrics\n    this.saveMetrics();\n\n    // Track analytics\n    analyticsService.trackUserAction('api_health_check', {\n      successful: checkResult.successful,\n      response_time: checkResult.responseTime,\n      circuit_breaker_state: checkResult.circuitBreakerState,\n      failure_rate: this.metrics.failureRate,\n      uptime: this.metrics.uptime\n    });\n  }\n\n  private handleHealthCheckFailure(): void {\n    // Alert if failure rate is high\n    if (this.metrics.failureRate > 50) {\n      console.error('üö® HIGH FAILURE RATE DETECTED:', this.metrics.failureRate + '%');\n      \n      // Track critical alert\n      analyticsService.trackError('High API Failure Rate', {\n        failure_rate: this.metrics.failureRate,\n        uptime: this.metrics.uptime,\n        circuit_breaker_state: this.metrics.circuitBreakerState\n      });\n    }\n\n    // Alert if circuit breaker is open\n    if (this.metrics.circuitBreakerState === 'OPEN') {\n      console.error('üö® CIRCUIT BREAKER OPEN - API UNAVAILABLE');\n      \n      analyticsService.trackError('Circuit Breaker Open', {\n        uptime: this.metrics.uptime,\n        failure_rate: this.metrics.failureRate\n      });\n    }\n  }\n\n  getMetrics(): APIMetrics {\n    return { ...this.metrics };\n  }\n\n  getHealthStatus(): HealthStatus {\n    const systemStatus = geminiService.getSystemStatus();\n    \n    return {\n      healthy: systemStatus.configured && this.metrics.circuitBreakerState === 'CLOSED',\n      configured: systemStatus.configured,\n      circuitBreakerState: systemStatus.circuitBreakerState,\n      failureCount: systemStatus.failureCount,\n      lastTested: systemStatus.lastTested,\n      uptime: this.metrics.uptime,\n      averageResponseTime: this.metrics.averageResponseTime,\n      failureRate: this.metrics.failureRate\n    };\n  }\n\n  private saveMetrics(): void {\n    try {\n      localStorage.setItem('api_metrics', JSON.stringify(this.metrics));\n    } catch (error) {\n      console.warn('Failed to save API metrics:', error);\n    }\n  }\n\n  private loadMetrics(): void {\n    try {\n      const saved = localStorage.getItem('api_metrics');\n      if (saved) {\n        this.metrics = { ...this.metrics, ...JSON.parse(saved) };\n      }\n    } catch (error) {\n      console.warn('Failed to load API metrics:', error);\n    }\n  }\n\n  // Reset metrics (for testing)\n  resetMetrics(): void {\n    this.metrics = {\n      totalRequests: 0,\n      successfulRequests: 0,\n      failedRequests: 0,\n      averageResponseTime: 0,\n      uptime: 0,\n      lastHealthCheck: null,\n      circuitBreakerState: 'CLOSED',\n      failureRate: 0\n    };\n    this.saveMetrics();\n  }\n}\n\n// Types\ninterface APIMetrics {\n  totalRequests: number;\n  successfulRequests: number;\n  failedRequests: number;\n  averageResponseTime: number;\n  uptime: number;\n  lastHealthCheck: Date | null;\n  circuitBreakerState: string;\n  failureRate: number;\n}\n\ninterface HealthStatus {\n  healthy: boolean;\n  configured: boolean;\n  circuitBreakerState: string;\n  failureCount: number;\n  lastTested: Date | null;\n  uptime: number;\n  averageResponseTime: number;\n  failureRate: number;\n}\n\n// Singleton export\nexport const apiMonitoringService = new APIMonitoringService(); "],"mappingsa;IAAAA,cAAA,YAAAA,CAAA;MAAA,OAAAC,cAAA;IAAA;EAAA;EAAA,OAAAA,cAAA;AAAA;AAAAD,cAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAJb;AACA,MAAAE,eAAA;AAAA;AAAA,CAAAF,cAAA,GAAAG,CAAA,QAAAC,OAAA;AACA,MAAAC,kBAAA;AAAA;AAAA,CAAAL,cAAA,GAAAG,CAAA,QAAAC,OAAA;AAEA,MAAaE,oBAAoB;EAc/BC,YAAA;IAAA;IAAAP,cAAA,GAAAQ,CAAA;IAAAR,cAAA,GAAAG,CAAA;IAbQ,KAAAM,mBAAmB,GAA0B,IAAI;IAAC;IAAAT,cAAA,GAAAG,CAAA;IAClD,KAAAO,oBAAoB,GAAG,KAAK,CAAC,CAAC;IAAA;IAAAV,cAAA,GAAAG,CAAA;IAC9B,KAAAQ,OAAO,GAAe;MAC5BC,aAAa,EAAE,CAAC;MAChBC,kBAAkB,EAAE,CAAC;MACrBC,cAAc,EAAE,CAAC;MACjBC,mBAAmB,EAAE,CAAC;MACtBC,MAAM,EAAE,CAAC;MACTC,eAAe,EAAE,IAAI;MACrBC,mBAAmB,EAAE,QAAQ;MAC7BC,WAAW,EAAE;KACd;IAAC;IAAAnB,cAAA,GAAAG,CAAA;IAGA,IAAI,CAACiB,WAAW,EAAE;EACpB;EAEAC,eAAeA,CAAA;IAAA;IAAArB,cAAA,GAAAQ,CAAA;IAAAR,cAAA,GAAAG,CAAA;IACbmB,OAAO,CAACC,GAAG,CAAC,6CAA6C,CAAC;IAE1D;IAAA;IAAAvB,cAAA,GAAAG,CAAA;IACA,IAAI,CAACM,mBAAmB,GAAGe,WAAW,CAAC,MAAK;MAAA;MAAAxB,cAAA,GAAAQ,CAAA;MAAAR,cAAA,GAAAG,CAAA;MAC1C,IAAI,CAACsB,kBAAkB,EAAE;IAC3B,CAAC,EAAE,IAAI,CAACf,oBAAoB,CAAC;IAE7B;IAAA;IAAAV,cAAA,GAAAG,CAAA;IACA,IAAI,CAACsB,kBAAkB,EAAE;EAC3B;EAEAC,cAAcA,CAAA;IAAA;IAAA1B,cAAA,GAAAQ,CAAA;IAAAR,cAAA,GAAAG,CAAA;IACZ,IAAI,IAAI,CAACM,mBAAmB,EAAE;MAAA;MAAAT,cAAA,GAAA2B,CAAA;MAAA3B,cAAA,GAAAG,CAAA;MAC5ByB,aAAa,CAAC,IAAI,CAACnB,mBAAmB,CAAC;MAAC;MAAAT,cAAA,GAAAG,CAAA;MACxC,IAAI,CAACM,mBAAmB,GAAG,IAAI;MAAC;MAAAT,cAAA,GAAAG,CAAA;MAChCmB,OAAO,CAACC,GAAG,CAAC,wCAAwC,CAAC;IACvD,CAAC;IAAA;IAAA;MAAAvB,cAAA,GAAA2B,CAAA;IAAA;EACH;EAEcF,kBAAkBA,CAAA;IAAA;IAAAzB,cAAA,GAAAQ,CAAA;IAAAR,cAAA,GAAAG,CAAA;;;;MAC9B,MAAM0B,SAAS;MAAA;MAAA,CAAA7B,cAAA,GAAAG,CAAA,QAAG2B,IAAI,CAACC,GAAG,EAAE;MAAC;MAAA/B,cAAA,GAAAG,CAAA;MAE7B,IAAI;QACF,MAAM6B,SAAS;QAAA;QAAA,CAAAhC,cAAA,GAAAG,CAAA,QAAG,MAAMD,eAAA,CAAA+B,aAAa,CAACC,cAAc,EAAE;QACtD,MAAMC,YAAY;QAAA;QAAA,CAAAnC,cAAA,GAAAG,CAAA,QAAG2B,IAAI,CAACC,GAAG,EAAE,GAAGF,SAAS;QAAC;QAAA7B,cAAA,GAAAG,CAAA;QAE5C,IAAI,CAACiC,aAAa,CAAC;UACjBC,UAAU,EAAEL,SAAS;UACrBG,YAAY;UACZjB,mBAAmB,EAAEhB,eAAA,CAAA+B,aAAa,CAACK,eAAe,EAAE,CAACpB;SACtD,CAAC;QAAC;QAAAlB,cAAA,GAAAG,CAAA;QAEH,IAAI6B,SAAS,EAAE;UAAA;UAAAhC,cAAA,GAAA2B,CAAA;UAAA3B,cAAA,GAAAG,CAAA;UACbmB,OAAO,CAACC,GAAG,CAAC,2BAA2BY,YAAY,KAAK,CAAC;QAC3D,CAAC,MAAM;UAAA;UAAAnC,cAAA,GAAA2B,CAAA;UAAA3B,cAAA,GAAAG,CAAA;UACLmB,OAAO,CAACiB,IAAI,CAAC,gCAAgCJ,YAAY,KAAK,CAAC;UAAC;UAAAnC,cAAA,GAAAG,CAAA;UAChE,IAAI,CAACqC,wBAAwB,EAAE;QACjC;MAEF,CAAC,CAAC,OAAOC,KAAK,EAAE;QACd,MAAMN,YAAY;QAAA;QAAA,CAAAnC,cAAA,GAAAG,CAAA,QAAG2B,IAAI,CAACC,GAAG,EAAE,GAAGF,SAAS;QAAC;QAAA7B,cAAA,GAAAG,CAAA;QAC5CmB,OAAO,CAACmB,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC;QAAC;QAAAzC,cAAA,GAAAG,CAAA;QAE9C,IAAI,CAACiC,aAAa,CAAC;UACjBC,UAAU,EAAE,KAAK;UACjBF,YAAY;UACZjB,mBAAmB,EAAEhB,eAAA,CAAA+B,aAAa,CAACK,eAAe,EAAE,CAACpB;SACtD,CAAC;QAAC;QAAAlB,cAAA,GAAAG,CAAA;QAEH,IAAI,CAACqC,wBAAwB,EAAE;MACjC;IACF,CAAC;;EAEOJ,aAAaA,CAACM,WAIrB;IAAA;IAAA1C,cAAA,GAAAQ,CAAA;IAAAR,cAAA,GAAAG,CAAA;IACC,IAAI,CAACQ,OAAO,CAACC,aAAa,EAAE;IAAC;IAAAZ,cAAA,GAAAG,CAAA;IAE7B,IAAIuC,WAAW,CAACL,UAAU,EAAE;MAAA;MAAArC,cAAA,GAAA2B,CAAA;MAAA3B,cAAA,GAAAG,CAAA;MAC1B,IAAI,CAACQ,OAAO,CAACE,kBAAkB,EAAE;IACnC,CAAC,MAAM;MAAA;MAAAb,cAAA,GAAA2B,CAAA;MAAA3B,cAAA,GAAAG,CAAA;MACL,IAAI,CAACQ,OAAO,CAACG,cAAc,EAAE;IAC/B;IAEA;IAAA;IAAAd,cAAA,GAAAG,CAAA;IACA,IAAI,CAACQ,OAAO,CAACI,mBAAmB,GAAG,CAChC,IAAI,CAACJ,OAAO,CAACI,mBAAmB,IAAI,IAAI,CAACJ,OAAO,CAACC,aAAa,GAAG,CAAC,CAAC,GACpE8B,WAAW,CAACP,YAAY,IACtB,IAAI,CAACxB,OAAO,CAACC,aAAa;IAE9B;IAAA;IAAAZ,cAAA,GAAAG,CAAA;IACA,IAAI,CAACQ,OAAO,CAACQ,WAAW,GAAI,IAAI,CAACR,OAAO,CAACG,cAAc,GAAG,IAAI,CAACH,OAAO,CAACC,aAAa,GAAI,GAAG;IAE3F;IAAA;IAAAZ,cAAA,GAAAG,CAAA;IACA,IAAI,CAACQ,OAAO,CAACO,mBAAmB,GAAGwB,WAAW,CAACxB,mBAAmB;IAElE;IAAA;IAAAlB,cAAA,GAAAG,CAAA;IACA,IAAI,CAACQ,OAAO,CAACM,eAAe,GAAG,IAAIa,IAAI,EAAE;IAEzC;IAAA;IAAA9B,cAAA,GAAAG,CAAA;IACA,IAAI,CAACQ,OAAO,CAACK,MAAM,GAAI,IAAI,CAACL,OAAO,CAACE,kBAAkB,GAAG,IAAI,CAACF,OAAO,CAACC,aAAa,GAAI,GAAG;IAE1F;IAAA;IAAAZ,cAAA,GAAAG,CAAA;IACA,IAAI,CAACwC,WAAW,EAAE;IAElB;IAAA;IAAA3C,cAAA,GAAAG,CAAA;IACAE,kBAAA,CAAAuC,gBAAgB,CAACC,eAAe,CAAC,kBAAkB,EAAE;MACnDR,UAAU,EAAEK,WAAW,CAACL,UAAU;MAClCS,aAAa,EAAEJ,WAAW,CAACP,YAAY;MACvCY,qBAAqB,EAAEL,WAAW,CAACxB,mBAAmB;MACtD8B,YAAY,EAAE,IAAI,CAACrC,OAAO,CAACQ,WAAW;MACtCH,MAAM,EAAE,IAAI,CAACL,OAAO,CAACK;KACtB,CAAC;EACJ;EAEQwB,wBAAwBA,CAAA;IAAA;IAAAxC,cAAA,GAAAQ,CAAA;IAAAR,cAAA,GAAAG,CAAA;IAC9B;IACA,IAAI,IAAI,CAACQ,OAAO,CAACQ,WAAW,GAAG,EAAE,EAAE;MAAA;MAAAnB,cAAA,GAAA2B,CAAA;MAAA3B,cAAA,GAAAG,CAAA;MACjCmB,OAAO,CAACmB,KAAK,CAAC,gCAAgC,EAAE,IAAI,CAAC9B,OAAO,CAACQ,WAAW,GAAG,GAAG,CAAC;MAE/E;MAAA;MAAAnB,cAAA,GAAAG,CAAA;MACAE,kBAAA,CAAAuC,gBAAgB,CAACK,UAAU,CAAC,uBAAuB,EAAE;QACnDD,YAAY,EAAE,IAAI,CAACrC,OAAO,CAACQ,WAAW;QACtCH,MAAM,EAAE,IAAI,CAACL,OAAO,CAACK,MAAM;QAC3B+B,qBAAqB,EAAE,IAAI,CAACpC,OAAO,CAACO;OACrC,CAAC;IACJ,CAAC;IAAA;IAAA;MAAAlB,cAAA,GAAA2B,CAAA;IAAA;IAED;IAAA3B,cAAA,GAAAG,CAAA;IACA,IAAI,IAAI,CAACQ,OAAO,CAACO,mBAAmB,KAAK,MAAM,EAAE;MAAA;MAAAlB,cAAA,GAAA2B,CAAA;MAAA3B,cAAA,GAAAG,CAAA;MAC/CmB,OAAO,CAACmB,KAAK,CAAC,2CAA2C,CAAC;MAAC;MAAAzC,cAAA,GAAAG,CAAA;MAE3DE,kBAAA,CAAAuC,gBAAgB,CAACK,UAAU,CAAC,sBAAsB,EAAE;QAClDjC,MAAM,EAAE,IAAI,CAACL,OAAO,CAACK,MAAM;QAC3BgC,YAAY,EAAE,IAAI,CAACrC,OAAO,CAACQ;OAC5B,CAAC;IACJ,CAAC;IAAA;IAAA;MAAAnB,cAAA,GAAA2B,CAAA;IAAA;EACH;EAEAuB,UAAUA,CAAA;IAAA;IAAAlD,cAAA,GAAAQ,CAAA;IAAAR,cAAA,GAAAG,CAAA;IACR,OAAAgD,MAAA,CAAAC,MAAA,KAAY,IAAI,CAACzC,OAAO;EAC1B;EAEA0C,eAAeA,CAAA;IAAA;IAAArD,cAAA,GAAAQ,CAAA;IACb,MAAM8C,YAAY;IAAA;IAAA,CAAAtD,cAAA,GAAAG,CAAA,QAAGD,eAAA,CAAA+B,aAAa,CAACK,eAAe,EAAE;IAAC;IAAAtC,cAAA,GAAAG,CAAA;IAErD,OAAO;MACLoD,OAAO;MAAE;MAAA,CAAAvD,cAAA,GAAA2B,CAAA,WAAA2B,YAAY,CAACE,UAAU;MAAA;MAAA,CAAAxD,cAAA,GAAA2B,CAAA,WAAI,IAAI,CAAChB,OAAO,CAACO,mBAAmB,KAAK,QAAQ;MACjFsC,UAAU,EAAEF,YAAY,CAACE,UAAU;MACnCtC,mBAAmB,EAAEoC,YAAY,CAACpC,mBAAmB;MACrDuC,YAAY,EAAEH,YAAY,CAACG,YAAY;MACvCC,UAAU,EAAEJ,YAAY,CAACI,UAAU;MACnC1C,MAAM,EAAE,IAAI,CAACL,OAAO,CAACK,MAAM;MAC3BD,mBAAmB,EAAE,IAAI,CAACJ,OAAO,CAACI,mBAAmB;MACrDI,WAAW,EAAE,IAAI,CAACR,OAAO,CAACQ;KAC3B;EACH;EAEQwB,WAAWA,CAAA;IAAA;IAAA3C,cAAA,GAAAQ,CAAA;IAAAR,cAAA,GAAAG,CAAA;IACjB,IAAI;MAAA;MAAAH,cAAA,GAAAG,CAAA;MACFwD,YAAY,CAACC,OAAO,CAAC,aAAa,EAAEC,IAAI,CAACC,SAAS,CAAC,IAAI,CAACnD,OAAO,CAAC,CAAC;IACnE,CAAC,CAAC,OAAO8B,KAAK,EAAE;MAAA;MAAAzC,cAAA,GAAAG,CAAA;MACdmB,OAAO,CAACiB,IAAI,CAAC,6BAA6B,EAAEE,KAAK,CAAC;IACpD;EACF;EAEQrB,WAAWA,CAAA;IAAA;IAAApB,cAAA,GAAAQ,CAAA;IAAAR,cAAA,GAAAG,CAAA;IACjB,IAAI;MACF,MAAM4D,KAAK;MAAA;MAAA,CAAA/D,cAAA,GAAAG,CAAA,QAAGwD,YAAY,CAACK,OAAO,CAAC,aAAa,CAAC;MAAC;MAAAhE,cAAA,GAAAG,CAAA;MAClD,IAAI4D,KAAK,EAAE;QAAA;QAAA/D,cAAA,GAAA2B,CAAA;QAAA3B,cAAA,GAAAG,CAAA;QACT,IAAI,CAACQ,OAAO,GAAAwC,MAAA,CAAAC,MAAA,CAAAD,MAAA,CAAAC,MAAA,KAAQ,IAAI,CAACzC,OAAO,GAAKkD,IAAI,CAACI,KAAK,CAACF,KAAK,CAAC,CAAE;MAC1D,CAAC;MAAA;MAAA;QAAA/D,cAAA,GAAA2B,CAAA;MAAA;IACH,CAAC,CAAC,OAAOc,KAAK,EAAE;MAAA;MAAAzC,cAAA,GAAAG,CAAA;MACdmB,OAAO,CAACiB,IAAI,CAAC,6BAA6B,EAAEE,KAAK,CAAC;IACpD;EACF;EAEA;EACAyB,YAAYA,CAAA;IAAA;IAAAlE,cAAA,GAAAQ,CAAA;IAAAR,cAAA,GAAAG,CAAA;IACV,IAAI,CAACQ,OAAO,GAAG;MACbC,aAAa,EAAE,CAAC;MAChBC,kBAAkB,EAAE,CAAC;MACrBC,cAAc,EAAE,CAAC;MACjBC,mBAAmB,EAAE,CAAC;MACtBC,MAAM,EAAE,CAAC;MACTC,eAAe,EAAE,IAAI;MACrBC,mBAAmB,EAAE,QAAQ;MAC7BC,WAAW,EAAE;KACd;IAAC;IAAAnB,cAAA,GAAAG,CAAA;IACF,IAAI,CAACwC,WAAW,EAAE;EACpB;;AACD;AAAA3C,cAAA,GAAAG,CAAA;AAhMDgE,OAAA,CAAA7D,oBAAA,GAAAA,oBAAA;AAyNA;AAAA;AAAAN,cAAA,GAAAG,CAAA;AACagE,OAAA,CAAAC,oBAAoB,GAAG,IAAI9D,oBAAoB,EAAE","ignoreList":[]}