{"version":3,"names":["cov_10zsv63gui","actualCoverage","NetworkResilienceManager","constructor","f","s","maxRetries","baseDelay","maxDelay","executeWithRetry","operation","operationName","lastError","attempt","error","b","Error","message","delay","Math","min","pow","console","warn","Promise","resolve","setTimeout","exports"],"sources":["/Users/rogerioresende/Desktop/Roteirar-ia/src/services/networkResilienceManager.ts"],"sourcesContent":["// Retry logic with exponential backoff\nexport class NetworkResilienceManager {\n  private maxRetries = 3;\n  private baseDelay = 1000;\n  private maxDelay = 10000;\n  \n  async executeWithRetry<T>(\n    operation: () => Promise<T>,\n    operationName: string\n  ): Promise<T> {\n    let lastError: Error;\n    \n    for (let attempt = 0; attempt < this.maxRetries; attempt++) {\n      try {\n        return await operation();\n      } catch (error) {\n        lastError = error as Error;\n        \n        if (attempt === this.maxRetries - 1) {\n          throw new Error(`${operationName} failed after ${this.maxRetries} attempts: ${lastError.message}`);\n        }\n        \n        const delay = Math.min(\n          this.baseDelay * Math.pow(2, attempt),\n          this.maxDelay\n        );\n        \n        console.warn(`${operationName} attempt ${attempt + 1} failed, retrying in ${delay}ms:`, error);\n        await new Promise(resolve => setTimeout(resolve, delay));\n      }\n    }\n    \n    throw lastError!;\n  }\n} "],"mappingscAAA,YAAAA,CAAA;MAAA,OAAAC,cAAA;IAAA;EAAA;EAAA,OAAAA,cAAA;AAAA;AAAAD,cAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAFV;AACA,MAAaE,wBAAwB;EAArCC,YAAA;IAAA;IAAAH,cAAA,GAAAI,CAAA;IAAAJ,cAAA,GAAAK,CAAA;IACU,KAAAC,UAAU,GAAG,CAAC;IAAC;IAAAN,cAAA,GAAAK,CAAA;IACf,KAAAE,SAAS,GAAG,IAAI;IAAC;IAAAP,cAAA,GAAAK,CAAA;IACjB,KAAAG,QAAQ,GAAG,KAAK;EA8B1B;EA5BQC,gBAAgBA,CACpBC,SAA2B,EAC3BC,aAAqB;IAAA;IAAAX,cAAA,GAAAI,CAAA;IAAAJ,cAAA,GAAAK,CAAA;;;;MAErB,IAAIO,SAAgB;MAAC;MAAAZ,cAAA,GAAAK,CAAA;MAErB,KAAK,IAAIQ,OAAO;MAAA;MAAA,CAAAb,cAAA,GAAAK,CAAA,QAAG,CAAC,GAAEQ,OAAO,GAAG,IAAI,CAACP,UAAU,EAAEO,OAAO,EAAE,EAAE;QAAA;QAAAb,cAAA,GAAAK,CAAA;QAC1D,IAAI;UAAA;UAAAL,cAAA,GAAAK,CAAA;UACF,OAAO,MAAMK,SAAS,EAAE;QAC1B,CAAC,CAAC,OAAOI,KAAK,EAAE;UAAA;UAAAd,cAAA,GAAAK,CAAA;UACdO,SAAS,GAAGE,KAAc;UAAC;UAAAd,cAAA,GAAAK,CAAA;UAE3B,IAAIQ,OAAO,KAAK,IAAI,CAACP,UAAU,GAAG,CAAC,EAAE;YAAA;YAAAN,cAAA,GAAAe,CAAA;YAAAf,cAAA,GAAAK,CAAA;YACnC,MAAM,IAAIW,KAAK,CAAC,GAAGL,aAAa,iBAAiB,IAAI,CAACL,UAAU,cAAcM,SAAS,CAACK,OAAO,EAAE,CAAC;UACpG,CAAC;UAAA;UAAA;YAAAjB,cAAA,GAAAe,CAAA;UAAA;UAED,MAAMG,KAAK;UAAA;UAAA,CAAAlB,cAAA,GAAAK,CAAA,QAAGc,IAAI,CAACC,GAAG,CACpB,IAAI,CAACb,SAAS,GAAGY,IAAI,CAACE,GAAG,CAAC,CAAC,EAAER,OAAO,CAAC,EACrC,IAAI,CAACL,QAAQ,CACd;UAAC;UAAAR,cAAA,GAAAK,CAAA;UAEFiB,OAAO,CAACC,IAAI,CAAC,GAAGZ,aAAa,YAAYE,OAAO,GAAG,CAAC,wBAAwBK,KAAK,KAAK,EAAEJ,KAAK,CAAC;UAAC;UAAAd,cAAA,GAAAK,CAAA;UAC/F,MAAM,IAAImB,OAAO,CAACC,OAAO,IAAI;YAAA;YAAAzB,cAAA,GAAAI,CAAA;YAAAJ,cAAA,GAAAK,CAAA;YAAA,OAAAqB,UAAU,CAACD,OAAO,EAAEP,KAAK,CAAC;UAAD,CAAC,CAAC;QAC1D;MACF;MAAC;MAAAlB,cAAA,GAAAK,CAAA;MAED,MAAMO,SAAU;IAClB,CAAC;;;AACF;AAAAZ,cAAA,GAAAK,CAAA;AAjCDsB,OAAA,CAAAzB,wBAAA,GAAAA,wBAAA","ignoreList":[]}