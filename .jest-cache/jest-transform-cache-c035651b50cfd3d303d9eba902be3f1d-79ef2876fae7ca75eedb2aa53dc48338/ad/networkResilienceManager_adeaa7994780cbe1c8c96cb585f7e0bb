c007f40c2db3e338b2f7dfb58aa59f29
"use strict";

/* istanbul ignore next */
function cov_10zsv63gui() {
  var path = "/Users/rogerioresende/Desktop/Roteirar-ia/src/services/networkResilienceManager.ts";
  var hash = "36712adbaedfbd6b59c9a839f6303780de6dbf00";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/rogerioresende/Desktop/Roteirar-ia/src/services/networkResilienceManager.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 16
        },
        end: {
          line: 10,
          column: 1
        }
      },
      "1": {
        start: {
          line: 3,
          column: 28
        },
        end: {
          line: 3,
          column: 110
        }
      },
      "2": {
        start: {
          line: 3,
          column: 91
        },
        end: {
          line: 3,
          column: 106
        }
      },
      "3": {
        start: {
          line: 4,
          column: 4
        },
        end: {
          line: 9,
          column: 7
        }
      },
      "4": {
        start: {
          line: 5,
          column: 36
        },
        end: {
          line: 5,
          column: 97
        }
      },
      "5": {
        start: {
          line: 5,
          column: 42
        },
        end: {
          line: 5,
          column: 70
        }
      },
      "6": {
        start: {
          line: 5,
          column: 85
        },
        end: {
          line: 5,
          column: 95
        }
      },
      "7": {
        start: {
          line: 6,
          column: 35
        },
        end: {
          line: 6,
          column: 100
        }
      },
      "8": {
        start: {
          line: 6,
          column: 41
        },
        end: {
          line: 6,
          column: 73
        }
      },
      "9": {
        start: {
          line: 6,
          column: 88
        },
        end: {
          line: 6,
          column: 98
        }
      },
      "10": {
        start: {
          line: 7,
          column: 32
        },
        end: {
          line: 7,
          column: 116
        }
      },
      "11": {
        start: {
          line: 8,
          column: 8
        },
        end: {
          line: 8,
          column: 78
        }
      },
      "12": {
        start: {
          line: 11,
          column: 0
        },
        end: {
          line: 11,
          column: 62
        }
      },
      "13": {
        start: {
          line: 12,
          column: 0
        },
        end: {
          line: 12,
          column: 42
        }
      },
      "14": {
        start: {
          line: 16,
          column: 8
        },
        end: {
          line: 16,
          column: 28
        }
      },
      "15": {
        start: {
          line: 17,
          column: 8
        },
        end: {
          line: 17,
          column: 30
        }
      },
      "16": {
        start: {
          line: 18,
          column: 8
        },
        end: {
          line: 18,
          column: 30
        }
      },
      "17": {
        start: {
          line: 21,
          column: 8
        },
        end: {
          line: 38,
          column: 11
        }
      },
      "18": {
        start: {
          line: 23,
          column: 12
        },
        end: {
          line: 36,
          column: 13
        }
      },
      "19": {
        start: {
          line: 23,
          column: 31
        },
        end: {
          line: 23,
          column: 32
        }
      },
      "20": {
        start: {
          line: 24,
          column: 16
        },
        end: {
          line: 35,
          column: 17
        }
      },
      "21": {
        start: {
          line: 25,
          column: 20
        },
        end: {
          line: 25,
          column: 45
        }
      },
      "22": {
        start: {
          line: 28,
          column: 20
        },
        end: {
          line: 28,
          column: 38
        }
      },
      "23": {
        start: {
          line: 29,
          column: 20
        },
        end: {
          line: 31,
          column: 21
        }
      },
      "24": {
        start: {
          line: 30,
          column: 24
        },
        end: {
          line: 30,
          column: 123
        }
      },
      "25": {
        start: {
          line: 32,
          column: 34
        },
        end: {
          line: 32,
          column: 96
        }
      },
      "26": {
        start: {
          line: 33,
          column: 20
        },
        end: {
          line: 33,
          column: 115
        }
      },
      "27": {
        start: {
          line: 34,
          column: 20
        },
        end: {
          line: 34,
          column: 77
        }
      },
      "28": {
        start: {
          line: 34,
          column: 49
        },
        end: {
          line: 34,
          column: 75
        }
      },
      "29": {
        start: {
          line: 37,
          column: 12
        },
        end: {
          line: 37,
          column: 28
        }
      },
      "30": {
        start: {
          line: 41,
          column: 0
        },
        end: {
          line: 41,
          column: 60
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 2,
            column: 44
          },
          end: {
            line: 2,
            column: 45
          }
        },
        loc: {
          start: {
            line: 2,
            column: 89
          },
          end: {
            line: 10,
            column: 1
          }
        },
        line: 2
      },
      "1": {
        name: "adopt",
        decl: {
          start: {
            line: 3,
            column: 13
          },
          end: {
            line: 3,
            column: 18
          }
        },
        loc: {
          start: {
            line: 3,
            column: 26
          },
          end: {
            line: 3,
            column: 112
          }
        },
        line: 3
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 3,
            column: 70
          },
          end: {
            line: 3,
            column: 71
          }
        },
        loc: {
          start: {
            line: 3,
            column: 89
          },
          end: {
            line: 3,
            column: 108
          }
        },
        line: 3
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 4,
            column: 36
          },
          end: {
            line: 4,
            column: 37
          }
        },
        loc: {
          start: {
            line: 4,
            column: 63
          },
          end: {
            line: 9,
            column: 5
          }
        },
        line: 4
      },
      "4": {
        name: "fulfilled",
        decl: {
          start: {
            line: 5,
            column: 17
          },
          end: {
            line: 5,
            column: 26
          }
        },
        loc: {
          start: {
            line: 5,
            column: 34
          },
          end: {
            line: 5,
            column: 99
          }
        },
        line: 5
      },
      "5": {
        name: "rejected",
        decl: {
          start: {
            line: 6,
            column: 17
          },
          end: {
            line: 6,
            column: 25
          }
        },
        loc: {
          start: {
            line: 6,
            column: 33
          },
          end: {
            line: 6,
            column: 102
          }
        },
        line: 6
      },
      "6": {
        name: "step",
        decl: {
          start: {
            line: 7,
            column: 17
          },
          end: {
            line: 7,
            column: 21
          }
        },
        loc: {
          start: {
            line: 7,
            column: 30
          },
          end: {
            line: 7,
            column: 118
          }
        },
        line: 7
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 15,
            column: 4
          },
          end: {
            line: 15,
            column: 5
          }
        },
        loc: {
          start: {
            line: 15,
            column: 18
          },
          end: {
            line: 19,
            column: 5
          }
        },
        line: 15
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 20,
            column: 4
          },
          end: {
            line: 20,
            column: 5
          }
        },
        loc: {
          start: {
            line: 20,
            column: 47
          },
          end: {
            line: 39,
            column: 5
          }
        },
        line: 20
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 21,
            column: 47
          },
          end: {
            line: 21,
            column: 48
          }
        },
        loc: {
          start: {
            line: 21,
            column: 60
          },
          end: {
            line: 38,
            column: 9
          }
        },
        line: 21
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 34,
            column: 38
          },
          end: {
            line: 34,
            column: 39
          }
        },
        loc: {
          start: {
            line: 34,
            column: 49
          },
          end: {
            line: 34,
            column: 75
          }
        },
        line: 34
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 2,
            column: 16
          },
          end: {
            line: 10,
            column: 1
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 2,
            column: 17
          },
          end: {
            line: 2,
            column: 21
          }
        }, {
          start: {
            line: 2,
            column: 25
          },
          end: {
            line: 2,
            column: 39
          }
        }, {
          start: {
            line: 2,
            column: 44
          },
          end: {
            line: 10,
            column: 1
          }
        }],
        line: 2
      },
      "1": {
        loc: {
          start: {
            line: 3,
            column: 35
          },
          end: {
            line: 3,
            column: 109
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 3,
            column: 56
          },
          end: {
            line: 3,
            column: 61
          }
        }, {
          start: {
            line: 3,
            column: 64
          },
          end: {
            line: 3,
            column: 109
          }
        }],
        line: 3
      },
      "2": {
        loc: {
          start: {
            line: 4,
            column: 16
          },
          end: {
            line: 4,
            column: 34
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 4,
            column: 16
          },
          end: {
            line: 4,
            column: 17
          }
        }, {
          start: {
            line: 4,
            column: 22
          },
          end: {
            line: 4,
            column: 33
          }
        }],
        line: 4
      },
      "3": {
        loc: {
          start: {
            line: 7,
            column: 32
          },
          end: {
            line: 7,
            column: 115
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 7,
            column: 46
          },
          end: {
            line: 7,
            column: 67
          }
        }, {
          start: {
            line: 7,
            column: 70
          },
          end: {
            line: 7,
            column: 115
          }
        }],
        line: 7
      },
      "4": {
        loc: {
          start: {
            line: 8,
            column: 51
          },
          end: {
            line: 8,
            column: 67
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 8,
            column: 51
          },
          end: {
            line: 8,
            column: 61
          }
        }, {
          start: {
            line: 8,
            column: 65
          },
          end: {
            line: 8,
            column: 67
          }
        }],
        line: 8
      },
      "5": {
        loc: {
          start: {
            line: 29,
            column: 20
          },
          end: {
            line: 31,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 29,
            column: 20
          },
          end: {
            line: 31,
            column: 21
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 29
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0
    },
    b: {
      "0": [0, 0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0]
    },
    inputSourceMap: {
      file: "/Users/rogerioresende/Desktop/Roteirar-ia/src/services/networkResilienceManager.ts",
      mappings: ";;;;;;;;;;;;AAAA,uCAAuC;AACvC,MAAa,wBAAwB;IAArC;QACU,eAAU,GAAG,CAAC,CAAC;QACf,cAAS,GAAG,IAAI,CAAC;QACjB,aAAQ,GAAG,KAAK,CAAC;IA8B3B,CAAC;IA5BO,gBAAgB,CACpB,SAA2B,EAC3B,aAAqB;;YAErB,IAAI,SAAgB,CAAC;YAErB,KAAK,IAAI,OAAO,GAAG,CAAC,EAAE,OAAO,GAAG,IAAI,CAAC,UAAU,EAAE,OAAO,EAAE,EAAE,CAAC;gBAC3D,IAAI,CAAC;oBACH,OAAO,MAAM,SAAS,EAAE,CAAC;gBAC3B,CAAC;gBAAC,OAAO,KAAK,EAAE,CAAC;oBACf,SAAS,GAAG,KAAc,CAAC;oBAE3B,IAAI,OAAO,KAAK,IAAI,CAAC,UAAU,GAAG,CAAC,EAAE,CAAC;wBACpC,MAAM,IAAI,KAAK,CAAC,GAAG,aAAa,iBAAiB,IAAI,CAAC,UAAU,cAAc,SAAS,CAAC,OAAO,EAAE,CAAC,CAAC;oBACrG,CAAC;oBAED,MAAM,KAAK,GAAG,IAAI,CAAC,GAAG,CACpB,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,OAAO,CAAC,EACrC,IAAI,CAAC,QAAQ,CACd,CAAC;oBAEF,OAAO,CAAC,IAAI,CAAC,GAAG,aAAa,YAAY,OAAO,GAAG,CAAC,wBAAwB,KAAK,KAAK,EAAE,KAAK,CAAC,CAAC;oBAC/F,MAAM,IAAI,OAAO,CAAC,OAAO,CAAC,EAAE,CAAC,UAAU,CAAC,OAAO,EAAE,KAAK,CAAC,CAAC,CAAC;gBAC3D,CAAC;YACH,CAAC;YAED,MAAM,SAAU,CAAC;QACnB,CAAC;KAAA;CACF;AAjCD,4DAiCC",
      names: [],
      sources: ["/Users/rogerioresende/Desktop/Roteirar-ia/src/services/networkResilienceManager.ts"],
      sourcesContent: ["// Retry logic with exponential backoff\nexport class NetworkResilienceManager {\n  private maxRetries = 3;\n  private baseDelay = 1000;\n  private maxDelay = 10000;\n  \n  async executeWithRetry<T>(\n    operation: () => Promise<T>,\n    operationName: string\n  ): Promise<T> {\n    let lastError: Error;\n    \n    for (let attempt = 0; attempt < this.maxRetries; attempt++) {\n      try {\n        return await operation();\n      } catch (error) {\n        lastError = error as Error;\n        \n        if (attempt === this.maxRetries - 1) {\n          throw new Error(`${operationName} failed after ${this.maxRetries} attempts: ${lastError.message}`);\n        }\n        \n        const delay = Math.min(\n          this.baseDelay * Math.pow(2, attempt),\n          this.maxDelay\n        );\n        \n        console.warn(`${operationName} attempt ${attempt + 1} failed, retrying in ${delay}ms:`, error);\n        await new Promise(resolve => setTimeout(resolve, delay));\n      }\n    }\n    \n    throw lastError!;\n  }\n} "],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "36712adbaedfbd6b59c9a839f6303780de6dbf00"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_10zsv63gui = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_10zsv63gui();
var __awaiter =
/* istanbul ignore next */
(cov_10zsv63gui().s[0]++,
/* istanbul ignore next */
(cov_10zsv63gui().b[0][0]++, this) &&
/* istanbul ignore next */
(cov_10zsv63gui().b[0][1]++, this.__awaiter) ||
/* istanbul ignore next */
(cov_10zsv63gui().b[0][2]++, function (thisArg, _arguments, P, generator) {
  /* istanbul ignore next */
  cov_10zsv63gui().f[0]++;
  function adopt(value) {
    /* istanbul ignore next */
    cov_10zsv63gui().f[1]++;
    cov_10zsv63gui().s[1]++;
    return value instanceof P ?
    /* istanbul ignore next */
    (cov_10zsv63gui().b[1][0]++, value) :
    /* istanbul ignore next */
    (cov_10zsv63gui().b[1][1]++, new P(function (resolve) {
      /* istanbul ignore next */
      cov_10zsv63gui().f[2]++;
      cov_10zsv63gui().s[2]++;
      resolve(value);
    }));
  }
  /* istanbul ignore next */
  cov_10zsv63gui().s[3]++;
  return new (
  /* istanbul ignore next */
  (cov_10zsv63gui().b[2][0]++, P) ||
  /* istanbul ignore next */
  (cov_10zsv63gui().b[2][1]++, P = Promise))(function (resolve, reject) {
    /* istanbul ignore next */
    cov_10zsv63gui().f[3]++;
    function fulfilled(value) {
      /* istanbul ignore next */
      cov_10zsv63gui().f[4]++;
      cov_10zsv63gui().s[4]++;
      try {
        /* istanbul ignore next */
        cov_10zsv63gui().s[5]++;
        step(generator.next(value));
      } catch (e) {
        /* istanbul ignore next */
        cov_10zsv63gui().s[6]++;
        reject(e);
      }
    }
    function rejected(value) {
      /* istanbul ignore next */
      cov_10zsv63gui().f[5]++;
      cov_10zsv63gui().s[7]++;
      try {
        /* istanbul ignore next */
        cov_10zsv63gui().s[8]++;
        step(generator["throw"](value));
      } catch (e) {
        /* istanbul ignore next */
        cov_10zsv63gui().s[9]++;
        reject(e);
      }
    }
    function step(result) {
      /* istanbul ignore next */
      cov_10zsv63gui().f[6]++;
      cov_10zsv63gui().s[10]++;
      result.done ?
      /* istanbul ignore next */
      (cov_10zsv63gui().b[3][0]++, resolve(result.value)) :
      /* istanbul ignore next */
      (cov_10zsv63gui().b[3][1]++, adopt(result.value).then(fulfilled, rejected));
    }
    /* istanbul ignore next */
    cov_10zsv63gui().s[11]++;
    step((generator = generator.apply(thisArg,
    /* istanbul ignore next */
    (cov_10zsv63gui().b[4][0]++, _arguments) ||
    /* istanbul ignore next */
    (cov_10zsv63gui().b[4][1]++, []))).next());
  });
}));
/* istanbul ignore next */
cov_10zsv63gui().s[12]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_10zsv63gui().s[13]++;
exports.NetworkResilienceManager = void 0;
// Retry logic with exponential backoff
class NetworkResilienceManager {
  constructor() {
    /* istanbul ignore next */
    cov_10zsv63gui().f[7]++;
    cov_10zsv63gui().s[14]++;
    this.maxRetries = 3;
    /* istanbul ignore next */
    cov_10zsv63gui().s[15]++;
    this.baseDelay = 1000;
    /* istanbul ignore next */
    cov_10zsv63gui().s[16]++;
    this.maxDelay = 10000;
  }
  executeWithRetry(operation, operationName) {
    /* istanbul ignore next */
    cov_10zsv63gui().f[8]++;
    cov_10zsv63gui().s[17]++;
    return __awaiter(this, void 0, void 0, function* () {
      /* istanbul ignore next */
      cov_10zsv63gui().f[9]++;
      let lastError;
      /* istanbul ignore next */
      cov_10zsv63gui().s[18]++;
      for (let attempt =
      /* istanbul ignore next */
      (cov_10zsv63gui().s[19]++, 0); attempt < this.maxRetries; attempt++) {
        /* istanbul ignore next */
        cov_10zsv63gui().s[20]++;
        try {
          /* istanbul ignore next */
          cov_10zsv63gui().s[21]++;
          return yield operation();
        } catch (error) {
          /* istanbul ignore next */
          cov_10zsv63gui().s[22]++;
          lastError = error;
          /* istanbul ignore next */
          cov_10zsv63gui().s[23]++;
          if (attempt === this.maxRetries - 1) {
            /* istanbul ignore next */
            cov_10zsv63gui().b[5][0]++;
            cov_10zsv63gui().s[24]++;
            throw new Error(`${operationName} failed after ${this.maxRetries} attempts: ${lastError.message}`);
          } else
          /* istanbul ignore next */
          {
            cov_10zsv63gui().b[5][1]++;
          }
          const delay =
          /* istanbul ignore next */
          (cov_10zsv63gui().s[25]++, Math.min(this.baseDelay * Math.pow(2, attempt), this.maxDelay));
          /* istanbul ignore next */
          cov_10zsv63gui().s[26]++;
          console.warn(`${operationName} attempt ${attempt + 1} failed, retrying in ${delay}ms:`, error);
          /* istanbul ignore next */
          cov_10zsv63gui().s[27]++;
          yield new Promise(resolve => {
            /* istanbul ignore next */
            cov_10zsv63gui().f[10]++;
            cov_10zsv63gui().s[28]++;
            return setTimeout(resolve, delay);
          });
        }
      }
      /* istanbul ignore next */
      cov_10zsv63gui().s[29]++;
      throw lastError;
    });
  }
}
/* istanbul ignore next */
cov_10zsv63gui().s[30]++;
exports.NetworkResilienceManager = NetworkResilienceManager;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJjb3ZfMTB6c3Y2M2d1aSIsImFjdHVhbENvdmVyYWdlIiwiTmV0d29ya1Jlc2lsaWVuY2VNYW5hZ2VyIiwiY29uc3RydWN0b3IiLCJmIiwicyIsIm1heFJldHJpZXMiLCJiYXNlRGVsYXkiLCJtYXhEZWxheSIsImV4ZWN1dGVXaXRoUmV0cnkiLCJvcGVyYXRpb24iLCJvcGVyYXRpb25OYW1lIiwibGFzdEVycm9yIiwiYXR0ZW1wdCIsImVycm9yIiwiYiIsIkVycm9yIiwibWVzc2FnZSIsImRlbGF5IiwiTWF0aCIsIm1pbiIsInBvdyIsImNvbnNvbGUiLCJ3YXJuIiwiUHJvbWlzZSIsInJlc29sdmUiLCJzZXRUaW1lb3V0IiwiZXhwb3J0cyJdLCJzb3VyY2VzIjpbIi9Vc2Vycy9yb2dlcmlvcmVzZW5kZS9EZXNrdG9wL1JvdGVpcmFyLWlhL3NyYy9zZXJ2aWNlcy9uZXR3b3JrUmVzaWxpZW5jZU1hbmFnZXIudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gUmV0cnkgbG9naWMgd2l0aCBleHBvbmVudGlhbCBiYWNrb2ZmXG5leHBvcnQgY2xhc3MgTmV0d29ya1Jlc2lsaWVuY2VNYW5hZ2VyIHtcbiAgcHJpdmF0ZSBtYXhSZXRyaWVzID0gMztcbiAgcHJpdmF0ZSBiYXNlRGVsYXkgPSAxMDAwO1xuICBwcml2YXRlIG1heERlbGF5ID0gMTAwMDA7XG4gIFxuICBhc3luYyBleGVjdXRlV2l0aFJldHJ5PFQ+KFxuICAgIG9wZXJhdGlvbjogKCkgPT4gUHJvbWlzZTxUPixcbiAgICBvcGVyYXRpb25OYW1lOiBzdHJpbmdcbiAgKTogUHJvbWlzZTxUPiB7XG4gICAgbGV0IGxhc3RFcnJvcjogRXJyb3I7XG4gICAgXG4gICAgZm9yIChsZXQgYXR0ZW1wdCA9IDA7IGF0dGVtcHQgPCB0aGlzLm1heFJldHJpZXM7IGF0dGVtcHQrKykge1xuICAgICAgdHJ5IHtcbiAgICAgICAgcmV0dXJuIGF3YWl0IG9wZXJhdGlvbigpO1xuICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgbGFzdEVycm9yID0gZXJyb3IgYXMgRXJyb3I7XG4gICAgICAgIFxuICAgICAgICBpZiAoYXR0ZW1wdCA9PT0gdGhpcy5tYXhSZXRyaWVzIC0gMSkge1xuICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgJHtvcGVyYXRpb25OYW1lfSBmYWlsZWQgYWZ0ZXIgJHt0aGlzLm1heFJldHJpZXN9IGF0dGVtcHRzOiAke2xhc3RFcnJvci5tZXNzYWdlfWApO1xuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICBjb25zdCBkZWxheSA9IE1hdGgubWluKFxuICAgICAgICAgIHRoaXMuYmFzZURlbGF5ICogTWF0aC5wb3coMiwgYXR0ZW1wdCksXG4gICAgICAgICAgdGhpcy5tYXhEZWxheVxuICAgICAgICApO1xuICAgICAgICBcbiAgICAgICAgY29uc29sZS53YXJuKGAke29wZXJhdGlvbk5hbWV9IGF0dGVtcHQgJHthdHRlbXB0ICsgMX0gZmFpbGVkLCByZXRyeWluZyBpbiAke2RlbGF5fW1zOmAsIGVycm9yKTtcbiAgICAgICAgYXdhaXQgbmV3IFByb21pc2UocmVzb2x2ZSA9PiBzZXRUaW1lb3V0KHJlc29sdmUsIGRlbGF5KSk7XG4gICAgICB9XG4gICAgfVxuICAgIFxuICAgIHRocm93IGxhc3RFcnJvciE7XG4gIH1cbn0gIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0lBRVU7SUFBQUEsY0FBQSxZQUFBQSxDQUFBO01BQUEsT0FBQUMsY0FBQTtJQUFBO0VBQUE7RUFBQSxPQUFBQSxjQUFBO0FBQUE7QUFBQUQsY0FBQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUZWO0FBQ0EsTUFBYUUsd0JBQXdCO0VBQXJDQyxZQUFBO0lBQUE7SUFBQUgsY0FBQSxHQUFBSSxDQUFBO0lBQUFKLGNBQUEsR0FBQUssQ0FBQTtJQUNVLEtBQUFDLFVBQVUsR0FBRyxDQUFDO0lBQUM7SUFBQU4sY0FBQSxHQUFBSyxDQUFBO0lBQ2YsS0FBQUUsU0FBUyxHQUFHLElBQUk7SUFBQztJQUFBUCxjQUFBLEdBQUFLLENBQUE7SUFDakIsS0FBQUcsUUFBUSxHQUFHLEtBQUs7RUE4QjFCO0VBNUJRQyxnQkFBZ0JBLENBQ3BCQyxTQUEyQixFQUMzQkMsYUFBcUI7SUFBQTtJQUFBWCxjQUFBLEdBQUFJLENBQUE7SUFBQUosY0FBQSxHQUFBSyxDQUFBOzs7O01BRXJCLElBQUlPLFNBQWdCO01BQUM7TUFBQVosY0FBQSxHQUFBSyxDQUFBO01BRXJCLEtBQUssSUFBSVEsT0FBTztNQUFBO01BQUEsQ0FBQWIsY0FBQSxHQUFBSyxDQUFBLFFBQUcsQ0FBQyxHQUFFUSxPQUFPLEdBQUcsSUFBSSxDQUFDUCxVQUFVLEVBQUVPLE9BQU8sRUFBRSxFQUFFO1FBQUE7UUFBQWIsY0FBQSxHQUFBSyxDQUFBO1FBQzFELElBQUk7VUFBQTtVQUFBTCxjQUFBLEdBQUFLLENBQUE7VUFDRixPQUFPLE1BQU1LLFNBQVMsRUFBRTtRQUMxQixDQUFDLENBQUMsT0FBT0ksS0FBSyxFQUFFO1VBQUE7VUFBQWQsY0FBQSxHQUFBSyxDQUFBO1VBQ2RPLFNBQVMsR0FBR0UsS0FBYztVQUFDO1VBQUFkLGNBQUEsR0FBQUssQ0FBQTtVQUUzQixJQUFJUSxPQUFPLEtBQUssSUFBSSxDQUFDUCxVQUFVLEdBQUcsQ0FBQyxFQUFFO1lBQUE7WUFBQU4sY0FBQSxHQUFBZSxDQUFBO1lBQUFmLGNBQUEsR0FBQUssQ0FBQTtZQUNuQyxNQUFNLElBQUlXLEtBQUssQ0FBQyxHQUFHTCxhQUFhLGlCQUFpQixJQUFJLENBQUNMLFVBQVUsY0FBY00sU0FBUyxDQUFDSyxPQUFPLEVBQUUsQ0FBQztVQUNwRyxDQUFDO1VBQUE7VUFBQTtZQUFBakIsY0FBQSxHQUFBZSxDQUFBO1VBQUE7VUFFRCxNQUFNRyxLQUFLO1VBQUE7VUFBQSxDQUFBbEIsY0FBQSxHQUFBSyxDQUFBLFFBQUdjLElBQUksQ0FBQ0MsR0FBRyxDQUNwQixJQUFJLENBQUNiLFNBQVMsR0FBR1ksSUFBSSxDQUFDRSxHQUFHLENBQUMsQ0FBQyxFQUFFUixPQUFPLENBQUMsRUFDckMsSUFBSSxDQUFDTCxRQUFRLENBQ2Q7VUFBQztVQUFBUixjQUFBLEdBQUFLLENBQUE7VUFFRmlCLE9BQU8sQ0FBQ0MsSUFBSSxDQUFDLEdBQUdaLGFBQWEsWUFBWUUsT0FBTyxHQUFHLENBQUMsd0JBQXdCSyxLQUFLLEtBQUssRUFBRUosS0FBSyxDQUFDO1VBQUM7VUFBQWQsY0FBQSxHQUFBSyxDQUFBO1VBQy9GLE1BQU0sSUFBSW1CLE9BQU8sQ0FBQ0MsT0FBTyxJQUFJO1lBQUE7WUFBQXpCLGNBQUEsR0FBQUksQ0FBQTtZQUFBSixjQUFBLEdBQUFLLENBQUE7WUFBQSxPQUFBcUIsVUFBVSxDQUFDRCxPQUFPLEVBQUVQLEtBQUssQ0FBQztVQUFELENBQUMsQ0FBQztRQUMxRDtNQUNGO01BQUM7TUFBQWxCLGNBQUEsR0FBQUssQ0FBQTtNQUVELE1BQU1PLFNBQVU7SUFDbEIsQ0FBQzs7O0FBQ0Y7QUFBQVosY0FBQSxHQUFBSyxDQUFBO0FBakNEc0IsT0FBQSxDQUFBekIsd0JBQUEsR0FBQUEsd0JBQUEiLCJpZ25vcmVMaXN0IjpbXX0=