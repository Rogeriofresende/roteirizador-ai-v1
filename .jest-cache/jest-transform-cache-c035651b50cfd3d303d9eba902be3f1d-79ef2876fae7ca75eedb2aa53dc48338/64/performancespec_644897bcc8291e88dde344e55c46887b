3325fe68a81092660c6a4f6db043e4a5
"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const test_1 = require("@playwright/test");
const helpers_1 = require("./helpers");
test_1.test.describe('Performance e Responsividade', () => {
    let helpers;
    test_1.test.beforeEach((_a) => __awaiter(void 0, [_a], void 0, function* ({ page }) {
        helpers = new helpers_1.TestHelpers(page);
    }));
    test_1.test.afterEach((_a) => __awaiter(void 0, [_a], void 0, function* ({ page }) {
        if (helpers) {
            yield helpers.cleanup();
        }
    }));
    test_1.test.describe('Responsividade Mobile', () => {
        (0, test_1.test)('TC009 - Mobile responsivo completo', (_a) => __awaiter(void 0, [_a], void 0, function* ({ page }) {
            // Dado que estou em dispositivo mobile
            yield helpers.setMobileViewport();
            // Quando navego pelo aplicativo
            yield helpers.goToHome();
            // Então todos os elementos são clicáveis
            const clickableElements = page.locator('button, a, input, select, textarea');
            const count = yield clickableElements.count();
            if (count > 0) {
                for (let i = 0; i < Math.min(count, 5); i++) {
                    const element = clickableElements.nth(i);
                    yield (0, test_1.expect)(element).toBeVisible();
                    const boundingBox = yield element.boundingBox();
                    if (boundingBox) {
                        // Elementos devem ter tamanho mínimo para touch
                        (0, test_1.expect)(boundingBox.width).toBeGreaterThan(20);
                        (0, test_1.expect)(boundingBox.height).toBeGreaterThan(20);
                    }
                }
            }
            // E a interface se adapta corretamente
            const viewport = page.viewportSize();
            (0, test_1.expect)(viewport === null || viewport === void 0 ? void 0 : viewport.width).toBe(375);
            (0, test_1.expect)(viewport === null || viewport === void 0 ? void 0 : viewport.height).toBe(667);
        }));
        (0, test_1.test)('TC009.1 - Navegação mobile entre páginas', (_a) => __awaiter(void 0, [_a], void 0, function* ({ page }) {
            yield helpers.setMobileViewport();
            const pages = [
                { name: 'Home', action: () => helpers.goToHome() },
                { name: 'Login', action: () => helpers.goToLogin() },
                { name: 'Signup', action: () => helpers.goToSignup() }
            ];
            for (const pageInfo of pages) {
                yield test_1.test.step(`Testando ${pageInfo.name} em mobile`, () => __awaiter(void 0, void 0, void 0, function* () {
                    var _a;
                    yield pageInfo.action();
                    yield page.waitForTimeout(1000);
                    // Verifica se página carregou sem overflow horizontal
                    const bodyWidth = yield page.evaluate(() => document.body.scrollWidth);
                    const viewportWidth = ((_a = page.viewportSize()) === null || _a === void 0 ? void 0 : _a.width) || 375;
                    // Pequena tolerância para scrollbars
                    (0, test_1.expect)(bodyWidth).toBeLessThanOrEqual(viewportWidth + 20);
                }));
            }
        }));
        (0, test_1.test)('TC009.2 - Formulários responsivos', (_a) => __awaiter(void 0, [_a], void 0, function* ({ page }) {
            yield helpers.setMobileViewport();
            yield helpers.goToLogin();
            // Testa campos de input em mobile
            const inputs = page.locator('input, textarea, select');
            const inputCount = yield inputs.count();
            if (inputCount > 0) {
                for (let i = 0; i < Math.min(inputCount, 3); i++) {
                    const input = inputs.nth(i);
                    yield (0, test_1.expect)(input).toBeVisible();
                    // Testa se campo é focalizável
                    yield input.click();
                    yield (0, test_1.expect)(input).toBeFocused();
                    // Testa se consegue digitar
                    yield input.fill('teste mobile');
                    const value = yield input.inputValue();
                    (0, test_1.expect)(value).toBe('teste mobile');
                    yield input.clear();
                }
            }
        }));
    });
    test_1.test.describe('Performance e Carregamento', () => {
        (0, test_1.test)('TC010 - Performance de carregamento', (_a) => __awaiter(void 0, [_a], void 0, function* ({ page }) {
            // Mede tempo de carregamento
            const startTime = Date.now();
            yield helpers.goToHome();
            const loadTime = Date.now() - startTime;
            // Deve carregar em menos de 5 segundos (tolerante para testes)
            (0, test_1.expect)(loadTime).toBeLessThan(5000);
            console.log(`Tempo de carregamento da home: ${loadTime}ms`);
        }));
        (0, test_1.test)('TC010.1 - Performance do gerador', (_a) => __awaiter(void 0, [_a], void 0, function* ({ page }) {
            // Faz login primeiro
            yield helpers.goToLogin();
            yield page.fill('[data-testid="email-input"], input[name="email"], input[type="email"]', 'demo@roteirizar.com');
            yield page.fill('[data-testid="password-input"], input[name="password"], input[type="password"]', 'demo123');
            yield page.click('[data-testid="login-button"], button[type="submit"], button:has-text("Entrar")');
            yield page.waitForTimeout(2000);
            // Mede carregamento do gerador
            const startTime = Date.now();
            yield helpers.goToGenerator();
            const loadTime = Date.now() - startTime;
            (0, test_1.expect)(loadTime).toBeLessThan(3000);
            console.log(`Tempo de carregamento do gerador: ${loadTime}ms`);
        }));
        (0, test_1.test)('TC010.2 - Recursos de página', (_a) => __awaiter(void 0, [_a], void 0, function* ({ page }) {
            // Monitora requests da página
            const responses = [];
            page.on('response', (response) => {
                responses.push({
                    url: response.url(),
                    status: response.status(),
                    size: response.headers()['content-length']
                });
            });
            yield helpers.goToHome();
            yield page.waitForTimeout(3000);
            // Verifica se não há muitos recursos falhando
            const failedRequests = responses.filter(r => r.status >= 400);
            const failedRatio = failedRequests.length / responses.length;
            (0, test_1.expect)(failedRatio).toBeLessThan(0.1); // Menos de 10% de falhas
            console.log(`Total de requests: ${responses.length}, falhas: ${failedRequests.length}`);
        }));
    });
    test_1.test.describe('Acessibilidade Básica', () => {
        (0, test_1.test)('TC010.3 - Navegação por teclado', (_a) => __awaiter(void 0, [_a], void 0, function* ({ page }) {
            yield helpers.goToHome();
            // Testa navegação por Tab
            const focusableElements = page.locator('button, a, input, select, textarea, [tabindex]:not([tabindex="-1"])');
            const count = yield focusableElements.count();
            if (count > 0) {
                // Foca primeiro elemento
                yield page.keyboard.press('Tab');
                const firstFocused = yield page.evaluate(() => { var _a; return (_a = document.activeElement) === null || _a === void 0 ? void 0 : _a.tagName; });
                (0, test_1.expect)(firstFocused).toBeTruthy();
                // Testa alguns tabs
                for (let i = 0; i < Math.min(count, 5); i++) {
                    yield page.keyboard.press('Tab');
                    yield page.waitForTimeout(100);
                }
                // Verifica se ainda há elemento focado
                const lastFocused = yield page.evaluate(() => { var _a; return (_a = document.activeElement) === null || _a === void 0 ? void 0 : _a.tagName; });
                (0, test_1.expect)(lastFocused).toBeTruthy();
            }
        }));
        (0, test_1.test)('TC010.4 - Imagens com alt text', (_a) => __awaiter(void 0, [_a], void 0, function* ({ page }) {
            yield helpers.goToHome();
            const images = page.locator('img');
            const imageCount = yield images.count();
            if (imageCount > 0) {
                for (let i = 0; i < imageCount; i++) {
                    const img = images.nth(i);
                    const alt = yield img.getAttribute('alt');
                    const src = yield img.getAttribute('src');
                    // Imagens devem ter alt text (ou ser decorativas)
                    if (src && !src.includes('data:image')) {
                        (0, test_1.expect)(alt).toBeTruthy();
                    }
                }
            }
        }));
        (0, test_1.test)('TC010.5 - Contraste e legibilidade', (_a) => __awaiter(void 0, [_a], void 0, function* ({ page }) {
            yield helpers.goToHome();
            // Verifica se texto é legível (básico)
            const textElements = page.locator('p, h1, h2, h3, h4, h5, h6, span, div').filter({ hasText: /.+/ });
            const textCount = yield textElements.count();
            if (textCount > 0) {
                for (let i = 0; i < Math.min(textCount, 5); i++) {
                    const element = textElements.nth(i);
                    if (yield element.isVisible()) {
                        const styles = yield element.evaluate((el) => {
                            const computed = window.getComputedStyle(el);
                            return {
                                fontSize: computed.fontSize,
                                color: computed.color,
                                backgroundColor: computed.backgroundColor
                            };
                        });
                        // Font size mínimo
                        const fontSize = parseInt(styles.fontSize);
                        (0, test_1.expect)(fontSize).toBeGreaterThan(10);
                    }
                }
            }
        }));
    });
    test_1.test.describe('Cross-Browser Compatibility', () => {
        (0, test_1.test)('TC010.6 - Funcionalidade básica em diferentes browsers', (_a) => __awaiter(void 0, [_a], void 0, function* ({ page }) {
            // Este teste roda automaticamente em diferentes browsers via playwright.config.ts
            yield helpers.goToHome();
            // Verifica se elementos básicos funcionam
            const basicElements = [
                'title',
                'h1, h2, h3',
                'button, a',
                'main, .main, .content'
            ];
            for (const selector of basicElements) {
                const element = page.locator(selector);
                if ((yield element.count()) > 0) {
                    yield (0, test_1.expect)(element.first()).toBeVisible();
                }
            }
        }));
    });
    test_1.test.describe('Múltiplos Viewports', () => {
        (0, test_1.test)('TC009.3 - Desktop, Tablet e Mobile', (_a) => __awaiter(void 0, [_a], void 0, function* ({ page }) {
            const viewports = [
                { name: 'Desktop', width: 1280, height: 720 },
                { name: 'Tablet', width: 768, height: 1024 },
                { name: 'Mobile', width: 375, height: 667 }
            ];
            for (const viewport of viewports) {
                yield test_1.test.step(`Testando viewport ${viewport.name}`, () => __awaiter(void 0, void 0, void 0, function* () {
                    yield page.setViewportSize({ width: viewport.width, height: viewport.height });
                    yield helpers.goToHome();
                    yield page.waitForTimeout(1000);
                    // Verifica se página é responsiva
                    const bodyWidth = yield page.evaluate(() => document.body.scrollWidth);
                    (0, test_1.expect)(bodyWidth).toBeLessThanOrEqual(viewport.width + 50); // Tolerância
                    // Verifica se elementos principais estão visíveis
                    const mainContent = page.locator('main, .main, .content, body > div');
                    if ((yield mainContent.count()) > 0) {
                        yield (0, test_1.expect)(mainContent.first()).toBeVisible();
                    }
                }));
            }
        }));
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,