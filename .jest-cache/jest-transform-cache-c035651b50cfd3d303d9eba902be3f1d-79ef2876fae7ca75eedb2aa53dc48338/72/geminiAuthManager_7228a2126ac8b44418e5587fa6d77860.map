{"version":3,"names":["cov_19cx3nsyci","actualCoverage","GeminiAuthManager","constructor","apiKey","f","s","lastValidated","validationInterval","validateCredentials","b","startsWith","console","warn","modelsToTest","model","log","testResponse","fetch","method","headers","body","JSON","stringify","contents","parts","text","status","ok","Date","errorData","json","_b","error","_a","message","statusText","code","getValidatedApiKey","now","needsValidation","getTime","isValid","Error","exports"],"sources":["/Users/rogerioresende/Desktop/Roteirar-ia/src/services/geminiAuthManager.ts"],"sourcesContent":["// Enhanced authentication management for Gemini API\nexport class GeminiAuthManager {\n  private apiKey: string;\n  private lastValidated: Date | null = null;\n  private validationInterval = 24 * 60 * 60 * 1000; // 24 hours\n  \n  constructor(apiKey: string) {\n    this.apiKey = apiKey;\n  }\n  \n  async validateCredentials(): Promise<boolean> {\n    try {\n      // First, validate API key format\n      if (!this.apiKey || !this.apiKey.startsWith('AIza')) {\n        console.warn('‚ö†Ô∏è Invalid API key format');\n        return false;\n      }\n\n      // Try different models in order of preference\n      const modelsToTest = [\n        'gemini-2.0-flash',\n        'gemini-1.5-flash-latest',\n        'gemini-1.5-flash'\n      ];\n\n      for (const model of modelsToTest) {\n        console.log(`üß™ Testing model: ${model}`);\n        \n        const testResponse = await fetch(\n          `https://generativelanguage.googleapis.com/v1beta/models/${model}:generateContent`,\n          {\n            method: 'POST',\n            headers: {\n              'Content-Type': 'application/json',\n              'X-goog-api-key': this.apiKey\n            },\n            body: JSON.stringify({\n              contents: [{\n                parts: [{\n                  text: 'Hello'\n                }]\n              }]\n            })\n          }\n        );\n\n        console.log(`üîç Model ${model} response status: ${testResponse.status}`);\n\n        if (testResponse.ok) {\n          this.lastValidated = new Date();\n          console.log(`‚úÖ Gemini API credentials validated successfully with model: ${model}`);\n          return true;\n        } else {\n          let errorData;\n          try {\n            errorData = await testResponse.json();\n          } catch {\n            errorData = { error: 'No JSON response' };\n          }\n          \n          console.warn(`‚ùå Model ${model} failed:`, {\n            status: testResponse.status,\n            error: errorData?.error?.message || 'Unknown error'\n          });\n\n          // If it's a 404, the model doesn't exist, try next one\n          if (testResponse.status === 404) {\n            continue;\n          }\n          \n          // If it's other errors (like 401/403), log detailed info\n          if (testResponse.status === 400 || testResponse.status === 401 || testResponse.status === 403) {\n            console.error('‚ùå API validation failed with model:', model, {\n              status: testResponse.status,\n              statusText: testResponse.statusText,\n              error: errorData\n            });\n            \n            // Try to extract more specific error information\n            if (errorData?.error) {\n              console.log('üîç Error details:', {\n                code: errorData.error.code,\n                message: errorData.error.message,\n                status: errorData.error.status\n              });\n            }\n          }\n        }\n      }\n\n      // If we get here, all models failed\n      console.error('‚ùå All Gemini models failed validation');\n      return false;\n    } catch (error) {\n      console.error('‚ùå Auth validation network error:', error);\n      return false;\n    }\n  }\n  \n  async getValidatedApiKey(): Promise<string> {\n    const now = new Date();\n    const needsValidation = !this.lastValidated || \n      (now.getTime() - this.lastValidated.getTime()) > this.validationInterval;\n    \n    if (needsValidation) {\n      const isValid = await this.validateCredentials();\n      if (!isValid) {\n        throw new Error('API credentials are invalid or expired');\n      }\n    }\n    \n    return this.apiKey;\n  }\n} "],"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","ignoreList":[]}