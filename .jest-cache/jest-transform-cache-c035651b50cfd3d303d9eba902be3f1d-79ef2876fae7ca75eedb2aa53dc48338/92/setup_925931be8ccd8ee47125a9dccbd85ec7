a4ab0e72d0cfc1cb773a0474850b1690
"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
require("@testing-library/jest-dom");
// Enhanced error handling for tests
const originalError = console.error;
beforeAll(() => {
    console.error = (...args) => {
        // Suppress specific React warnings in tests that are expected
        if (typeof args[0] === 'string' &&
            (args[0].includes('Warning: ReactDOM.render is deprecated') ||
                args[0].includes('Warning: componentWillReceiveProps'))) {
            return;
        }
        originalError.call(console, ...args);
    };
});
afterAll(() => {
    console.error = originalError;
});
// Global test utilities
global.testUtils = {
    // Async helper for testing loading states
    waitForLoadingToFinish: () => __awaiter(void 0, void 0, void 0, function* () {
        yield new Promise(resolve => setTimeout(resolve, 100));
    }),
    // Mock localStorage with quota simulation
    mockLocalStorageWithQuota: (maxItems = 5) => {
        let itemCount = 0;
        return {
            getItem: jest.fn((key) => {
                return localStorage.getItem(key);
            }),
            setItem: jest.fn((key, value) => {
                if (itemCount >= maxItems) {
                    throw new Error('QuotaExceededError');
                }
                itemCount++;
                return localStorage.setItem(key, value);
            }),
            removeItem: jest.fn((key) => {
                itemCount = Math.max(0, itemCount - 1);
                return localStorage.removeItem(key);
            }),
            clear: jest.fn(() => {
                itemCount = 0;
                return localStorage.clear();
            })
        };
    },
    // Performance testing helper
    measureRenderTime: (renderFn) => __awaiter(void 0, void 0, void 0, function* () {
        const start = performance.now();
        yield renderFn();
        const end = performance.now();
        return end - start;
    })
};
// Enhanced cleanup
afterEach(() => {
    // Clear all mocks
    jest.clearAllMocks();
    // Reset DOM
    document.body.innerHTML = '';
    // Clear localStorage
    localStorage.clear();
    // Reset any global state
    if (global.testCleanup) {
        global.testCleanup.forEach(cleanup => cleanup());
        global.testCleanup = [];
    }
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL3JvZ2VyaW9yZXNlbmRlL0Rlc2t0b3AvUm90ZWlyYXItaWEvc3JjL3Rlc3RzL3NldHVwLnRzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0FBQUEscUNBQW1DO0FBRW5DLG9DQUFvQztBQUNwQyxNQUFNLGFBQWEsR0FBRyxPQUFPLENBQUMsS0FBSyxDQUFDO0FBQ3BDLFNBQVMsQ0FBQyxHQUFHLEVBQUU7SUFDYixPQUFPLENBQUMsS0FBSyxHQUFHLENBQUMsR0FBRyxJQUFJLEVBQUUsRUFBRTtRQUMxQiw4REFBOEQ7UUFDOUQsSUFDRSxPQUFPLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxRQUFRO1lBQzNCLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyx3Q0FBd0MsQ0FBQztnQkFDMUQsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxvQ0FBb0MsQ0FBQyxDQUFDLEVBQ3hELENBQUM7WUFDRCxPQUFPO1FBQ1QsQ0FBQztRQUNELGFBQWEsQ0FBQyxJQUFJLENBQUMsT0FBTyxFQUFFLEdBQUcsSUFBSSxDQUFDLENBQUM7SUFDdkMsQ0FBQyxDQUFDO0FBQ0osQ0FBQyxDQUFDLENBQUM7QUFFSCxRQUFRLENBQUMsR0FBRyxFQUFFO0lBQ1osT0FBTyxDQUFDLEtBQUssR0FBRyxhQUFhLENBQUM7QUFDaEMsQ0FBQyxDQUFDLENBQUM7QUFFSCx3QkFBd0I7QUFDeEIsTUFBTSxDQUFDLFNBQVMsR0FBRztJQUNqQiwwQ0FBMEM7SUFDMUMsc0JBQXNCLEVBQUUsR0FBUyxFQUFFO1FBQ2pDLE1BQU0sSUFBSSxPQUFPLENBQUMsT0FBTyxDQUFDLEVBQUUsQ0FBQyxVQUFVLENBQUMsT0FBTyxFQUFFLEdBQUcsQ0FBQyxDQUFDLENBQUM7SUFDekQsQ0FBQyxDQUFBO0lBRUQsMENBQTBDO0lBQzFDLHlCQUF5QixFQUFFLENBQUMsUUFBUSxHQUFHLENBQUMsRUFBRSxFQUFFO1FBQzFDLElBQUksU0FBUyxHQUFHLENBQUMsQ0FBQztRQUNsQixPQUFPO1lBQ0wsT0FBTyxFQUFFLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQyxHQUFHLEVBQUUsRUFBRTtnQkFDdkIsT0FBTyxZQUFZLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1lBQ25DLENBQUMsQ0FBQztZQUNGLE9BQU8sRUFBRSxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUMsR0FBRyxFQUFFLEtBQUssRUFBRSxFQUFFO2dCQUM5QixJQUFJLFNBQVMsSUFBSSxRQUFRLEVBQUUsQ0FBQztvQkFDMUIsTUFBTSxJQUFJLEtBQUssQ0FBQyxvQkFBb0IsQ0FBQyxDQUFDO2dCQUN4QyxDQUFDO2dCQUNELFNBQVMsRUFBRSxDQUFDO2dCQUNaLE9BQU8sWUFBWSxDQUFDLE9BQU8sQ0FBQyxHQUFHLEVBQUUsS0FBSyxDQUFDLENBQUM7WUFDMUMsQ0FBQyxDQUFDO1lBQ0YsVUFBVSxFQUFFLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQyxHQUFHLEVBQUUsRUFBRTtnQkFDMUIsU0FBUyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLFNBQVMsR0FBRyxDQUFDLENBQUMsQ0FBQztnQkFDdkMsT0FBTyxZQUFZLENBQUMsVUFBVSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1lBQ3RDLENBQUMsQ0FBQztZQUNGLEtBQUssRUFBRSxJQUFJLENBQUMsRUFBRSxDQUFDLEdBQUcsRUFBRTtnQkFDbEIsU0FBUyxHQUFHLENBQUMsQ0FBQztnQkFDZCxPQUFPLFlBQVksQ0FBQyxLQUFLLEVBQUUsQ0FBQztZQUM5QixDQUFDLENBQUM7U0FDSCxDQUFDO0lBQ0osQ0FBQztJQUVELDZCQUE2QjtJQUM3QixpQkFBaUIsRUFBRSxDQUFPLFFBQVEsRUFBRSxFQUFFO1FBQ3BDLE1BQU0sS0FBSyxHQUFHLFdBQVcsQ0FBQyxHQUFHLEVBQUUsQ0FBQztRQUNoQyxNQUFNLFFBQVEsRUFBRSxDQUFDO1FBQ2pCLE1BQU0sR0FBRyxHQUFHLFdBQVcsQ0FBQyxHQUFHLEVBQUUsQ0FBQztRQUM5QixPQUFPLEdBQUcsR0FBRyxLQUFLLENBQUM7SUFDckIsQ0FBQyxDQUFBO0NBQ0YsQ0FBQztBQUVGLG1CQUFtQjtBQUNuQixTQUFTLENBQUMsR0FBRyxFQUFFO0lBQ2Isa0JBQWtCO0lBQ2xCLElBQUksQ0FBQyxhQUFhLEVBQUUsQ0FBQztJQUVyQixZQUFZO0lBQ1osUUFBUSxDQUFDLElBQUksQ0FBQyxTQUFTLEdBQUcsRUFBRSxDQUFDO0lBRTdCLHFCQUFxQjtJQUNyQixZQUFZLENBQUMsS0FBSyxFQUFFLENBQUM7SUFFckIseUJBQXlCO0lBQ3pCLElBQUksTUFBTSxDQUFDLFdBQVcsRUFBRSxDQUFDO1FBQ3ZCLE1BQU0sQ0FBQyxXQUFXLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUMsT0FBTyxFQUFFLENBQUMsQ0FBQztRQUNqRCxNQUFNLENBQUMsV0FBVyxHQUFHLEVBQUUsQ0FBQztJQUMxQixDQUFDO0FBQ0gsQ0FBQyxDQUFDLENBQUMiLCJuYW1lcyI6W10sInNvdXJjZXMiOlsiL1VzZXJzL3JvZ2VyaW9yZXNlbmRlL0Rlc2t0b3AvUm90ZWlyYXItaWEvc3JjL3Rlc3RzL3NldHVwLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAnQHRlc3RpbmctbGlicmFyeS9qZXN0LWRvbSc7XG5cbi8vIEVuaGFuY2VkIGVycm9yIGhhbmRsaW5nIGZvciB0ZXN0c1xuY29uc3Qgb3JpZ2luYWxFcnJvciA9IGNvbnNvbGUuZXJyb3I7XG5iZWZvcmVBbGwoKCkgPT4ge1xuICBjb25zb2xlLmVycm9yID0gKC4uLmFyZ3MpID0+IHtcbiAgICAvLyBTdXBwcmVzcyBzcGVjaWZpYyBSZWFjdCB3YXJuaW5ncyBpbiB0ZXN0cyB0aGF0IGFyZSBleHBlY3RlZFxuICAgIGlmIChcbiAgICAgIHR5cGVvZiBhcmdzWzBdID09PSAnc3RyaW5nJyAmJlxuICAgICAgKGFyZ3NbMF0uaW5jbHVkZXMoJ1dhcm5pbmc6IFJlYWN0RE9NLnJlbmRlciBpcyBkZXByZWNhdGVkJykgfHxcbiAgICAgICBhcmdzWzBdLmluY2x1ZGVzKCdXYXJuaW5nOiBjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzJykpXG4gICAgKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIG9yaWdpbmFsRXJyb3IuY2FsbChjb25zb2xlLCAuLi5hcmdzKTtcbiAgfTtcbn0pO1xuXG5hZnRlckFsbCgoKSA9PiB7XG4gIGNvbnNvbGUuZXJyb3IgPSBvcmlnaW5hbEVycm9yO1xufSk7XG5cbi8vIEdsb2JhbCB0ZXN0IHV0aWxpdGllc1xuZ2xvYmFsLnRlc3RVdGlscyA9IHtcbiAgLy8gQXN5bmMgaGVscGVyIGZvciB0ZXN0aW5nIGxvYWRpbmcgc3RhdGVzXG4gIHdhaXRGb3JMb2FkaW5nVG9GaW5pc2g6IGFzeW5jICgpID0+IHtcbiAgICBhd2FpdCBuZXcgUHJvbWlzZShyZXNvbHZlID0+IHNldFRpbWVvdXQocmVzb2x2ZSwgMTAwKSk7XG4gIH0sXG4gIFxuICAvLyBNb2NrIGxvY2FsU3RvcmFnZSB3aXRoIHF1b3RhIHNpbXVsYXRpb25cbiAgbW9ja0xvY2FsU3RvcmFnZVdpdGhRdW90YTogKG1heEl0ZW1zID0gNSkgPT4ge1xuICAgIGxldCBpdGVtQ291bnQgPSAwO1xuICAgIHJldHVybiB7XG4gICAgICBnZXRJdGVtOiBqZXN0LmZuKChrZXkpID0+IHtcbiAgICAgICAgcmV0dXJuIGxvY2FsU3RvcmFnZS5nZXRJdGVtKGtleSk7XG4gICAgICB9KSxcbiAgICAgIHNldEl0ZW06IGplc3QuZm4oKGtleSwgdmFsdWUpID0+IHtcbiAgICAgICAgaWYgKGl0ZW1Db3VudCA+PSBtYXhJdGVtcykge1xuICAgICAgICAgIHRocm93IG5ldyBFcnJvcignUXVvdGFFeGNlZWRlZEVycm9yJyk7XG4gICAgICAgIH1cbiAgICAgICAgaXRlbUNvdW50Kys7XG4gICAgICAgIHJldHVybiBsb2NhbFN0b3JhZ2Uuc2V0SXRlbShrZXksIHZhbHVlKTtcbiAgICAgIH0pLFxuICAgICAgcmVtb3ZlSXRlbTogamVzdC5mbigoa2V5KSA9PiB7XG4gICAgICAgIGl0ZW1Db3VudCA9IE1hdGgubWF4KDAsIGl0ZW1Db3VudCAtIDEpO1xuICAgICAgICByZXR1cm4gbG9jYWxTdG9yYWdlLnJlbW92ZUl0ZW0oa2V5KTtcbiAgICAgIH0pLFxuICAgICAgY2xlYXI6IGplc3QuZm4oKCkgPT4ge1xuICAgICAgICBpdGVtQ291bnQgPSAwO1xuICAgICAgICByZXR1cm4gbG9jYWxTdG9yYWdlLmNsZWFyKCk7XG4gICAgICB9KVxuICAgIH07XG4gIH0sXG4gIFxuICAvLyBQZXJmb3JtYW5jZSB0ZXN0aW5nIGhlbHBlclxuICBtZWFzdXJlUmVuZGVyVGltZTogYXN5bmMgKHJlbmRlckZuKSA9PiB7XG4gICAgY29uc3Qgc3RhcnQgPSBwZXJmb3JtYW5jZS5ub3coKTtcbiAgICBhd2FpdCByZW5kZXJGbigpO1xuICAgIGNvbnN0IGVuZCA9IHBlcmZvcm1hbmNlLm5vdygpO1xuICAgIHJldHVybiBlbmQgLSBzdGFydDtcbiAgfVxufTtcblxuLy8gRW5oYW5jZWQgY2xlYW51cFxuYWZ0ZXJFYWNoKCgpID0+IHtcbiAgLy8gQ2xlYXIgYWxsIG1vY2tzXG4gIGplc3QuY2xlYXJBbGxNb2NrcygpO1xuICBcbiAgLy8gUmVzZXQgRE9NXG4gIGRvY3VtZW50LmJvZHkuaW5uZXJIVE1MID0gJyc7XG4gIFxuICAvLyBDbGVhciBsb2NhbFN0b3JhZ2VcbiAgbG9jYWxTdG9yYWdlLmNsZWFyKCk7XG4gIFxuICAvLyBSZXNldCBhbnkgZ2xvYmFsIHN0YXRlXG4gIGlmIChnbG9iYWwudGVzdENsZWFudXApIHtcbiAgICBnbG9iYWwudGVzdENsZWFudXAuZm9yRWFjaChjbGVhbnVwID0+IGNsZWFudXAoKSk7XG4gICAgZ2xvYmFsLnRlc3RDbGVhbnVwID0gW107XG4gIH1cbn0pO1xuXG4vLyBUeXBlIGRlY2xhcmF0aW9ucyBmb3IgZ2xvYmFsIHV0aWxpdGllc1xuZGVjbGFyZSBnbG9iYWwge1xuICB2YXIgdGVzdFV0aWxzOiB7XG4gICAgd2FpdEZvckxvYWRpbmdUb0ZpbmlzaDogKCkgPT4gUHJvbWlzZTx2b2lkPjtcbiAgICBtb2NrTG9jYWxTdG9yYWdlV2l0aFF1b3RhOiAobWF4SXRlbXM/OiBudW1iZXIpID0+IGFueTtcbiAgICBtZWFzdXJlUmVuZGVyVGltZTogKHJlbmRlckZuOiAoKSA9PiBQcm9taXNlPHZvaWQ+KSA9PiBQcm9taXNlPG51bWJlcj47XG4gIH07XG4gIHZhciB0ZXN0Q2xlYW51cDogKCgpID0+IHZvaWQpW107XG59XG5cbi8vIEV4dGVuZCBKZXN0IG1hdGNoZXJzIHR5cGVcbmRlY2xhcmUgZ2xvYmFsIHtcbiAgbmFtZXNwYWNlIGplc3Qge1xuICAgIGludGVyZmFjZSBNYXRjaGVyczxSPiB7XG4gICAgICB0b0JlSW5UaGVEb2N1bWVudCgpOiBSO1xuICAgICAgdG9IYXZlQ2xhc3MoY2xhc3NOYW1lOiBzdHJpbmcpOiBSO1xuICAgICAgdG9CZURpc2FibGVkKCk6IFI7XG4gICAgfVxuICB9XG59ICJdLCJ2ZXJzaW9uIjozfQ==