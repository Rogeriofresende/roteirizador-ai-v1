{"file":"/Users/rogerioresende/Desktop/Roteirar-ia/tests/e2e/navigation.spec.ts","mappings":"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","names":[],"sources":["/Users/rogerioresende/Desktop/Roteirar-ia/tests/e2e/navigation.spec.ts"],"sourcesContent":["import { test, expect } from '@playwright/test';\nimport { TestHelpers } from './helpers';\n\ntest.describe('Navegação e Dashboard', () => {\n  let helpers: TestHelpers;\n\n  test.beforeEach(async ({ page }) => {\n    helpers = new TestHelpers(page);\n  });\n\n  test.afterEach(async ({ page }) => {\n    if (helpers) {\n      await helpers.cleanup();\n    }\n  });\n\n  test.describe('Dashboard de Usuário', () => {\n    test('TC007 - Dashboard completo após login', async ({ page }) => {\n      // Dado que estou logado\n      await helpers.goToLogin();\n      await page.fill('[data-testid=\"email-input\"], input[name=\"email\"], input[type=\"email\"]', 'demo@roteirizar.com');\n      await page.fill('[data-testid=\"password-input\"], input[name=\"password\"], input[type=\"password\"]', 'demo123');\n      await page.click('[data-testid=\"login-button\"], button[type=\"submit\"], button:has-text(\"Entrar\")');\n      \n      await page.waitForTimeout(3000);\n\n      // Quando acesso o dashboard\n      await helpers.goToDashboard();\n\n      // Então vejo informações do meu perfil\n      const userInfo = page.locator('[data-testid=\"user-info\"], .user-profile, .profile-info, h1, h2');\n      const hasUserContent = await userInfo.count() > 0;\n      \n      if (hasUserContent) {\n        await expect(userInfo.first()).toBeVisible();\n      }\n\n      // E posso navegar para o gerador\n      const generatorLink = page.locator('[data-testid=\"generator-link\"], a:has-text(\"Gerar\"), a:has-text(\"Generator\"), [href*=\"generator\"]');\n      if (await generatorLink.count() > 0) {\n        await expect(generatorLink.first()).toBeVisible();\n        await generatorLink.first().click();\n        await page.waitForTimeout(2000);\n        expect(page.url()).toMatch(/(generator|gerador)/);\n      } else {\n        // Verifica se há botões ou elementos que levam ao gerador\n        const generateButton = page.locator('button:has-text(\"Gerar\"), button:has-text(\"Novo\"), .generate-btn');\n        if (await generateButton.count() > 0) {\n          await expect(generateButton.first()).toBeVisible();\n        }\n      }\n    });\n  });\n\n  test.describe('Proteção de Rotas', () => {\n    test('TC008 - Navegação protegida sem login', async ({ page }) => {\n      // Dado que não estou logado\n      // Quando tento acessar área restrita\n      await helpers.goToDashboard();\n\n      // Então sou redirecionado para login\n      await page.waitForTimeout(3000);\n      const currentUrl = page.url();\n      \n      expect(currentUrl.includes('login') || currentUrl.includes('signin')).toBeTruthy();\n    });\n  });\n}); "],"version":3}