39c4e50ef48646dde8a387be2e35ac23
"use strict";

/* istanbul ignore next */
function cov_10b5p3ovn1() {
  var path = "/Users/rogerioresende/Desktop/Roteirar-ia/src/services/qualityGates/QualityGateOrchestrator.ts";
  var hash = "e4515bc21609d51c4172667b53420a026288ee0b";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/rogerioresende/Desktop/Roteirar-ia/src/services/qualityGates/QualityGateOrchestrator.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 16
        },
        end: {
          line: 10,
          column: 1
        }
      },
      "1": {
        start: {
          line: 3,
          column: 28
        },
        end: {
          line: 3,
          column: 110
        }
      },
      "2": {
        start: {
          line: 3,
          column: 91
        },
        end: {
          line: 3,
          column: 106
        }
      },
      "3": {
        start: {
          line: 4,
          column: 4
        },
        end: {
          line: 9,
          column: 7
        }
      },
      "4": {
        start: {
          line: 5,
          column: 36
        },
        end: {
          line: 5,
          column: 97
        }
      },
      "5": {
        start: {
          line: 5,
          column: 42
        },
        end: {
          line: 5,
          column: 70
        }
      },
      "6": {
        start: {
          line: 5,
          column: 85
        },
        end: {
          line: 5,
          column: 95
        }
      },
      "7": {
        start: {
          line: 6,
          column: 35
        },
        end: {
          line: 6,
          column: 100
        }
      },
      "8": {
        start: {
          line: 6,
          column: 41
        },
        end: {
          line: 6,
          column: 73
        }
      },
      "9": {
        start: {
          line: 6,
          column: 88
        },
        end: {
          line: 6,
          column: 98
        }
      },
      "10": {
        start: {
          line: 7,
          column: 32
        },
        end: {
          line: 7,
          column: 116
        }
      },
      "11": {
        start: {
          line: 8,
          column: 8
        },
        end: {
          line: 8,
          column: 78
        }
      },
      "12": {
        start: {
          line: 11,
          column: 0
        },
        end: {
          line: 11,
          column: 62
        }
      },
      "13": {
        start: {
          line: 12,
          column: 0
        },
        end: {
          line: 12,
          column: 41
        }
      },
      "14": {
        start: {
          line: 14,
          column: 31
        },
        end: {
          line: 14,
          column: 64
        }
      },
      "15": {
        start: {
          line: 15,
          column: 28
        },
        end: {
          line: 15,
          column: 58
        }
      },
      "16": {
        start: {
          line: 16,
          column: 30
        },
        end: {
          line: 16,
          column: 62
        }
      },
      "17": {
        start: {
          line: 17,
          column: 35
        },
        end: {
          line: 17,
          column: 72
        }
      },
      "18": {
        start: {
          line: 20,
          column: 8
        },
        end: {
          line: 20,
          column: 35
        }
      },
      "19": {
        start: {
          line: 21,
          column: 8
        },
        end: {
          line: 21,
          column: 36
        }
      },
      "20": {
        start: {
          line: 22,
          column: 8
        },
        end: {
          line: 22,
          column: 33
        }
      },
      "21": {
        start: {
          line: 26,
          column: 26
        },
        end: {
          line: 26,
          column: 36
        }
      },
      "22": {
        start: {
          line: 27,
          column: 8
        },
        end: {
          line: 27,
          column: 68
        }
      },
      "23": {
        start: {
          line: 28,
          column: 8
        },
        end: {
          line: 63,
          column: 9
        }
      },
      "24": {
        start: {
          line: 30,
          column: 12
        },
        end: {
          line: 30,
          column: 90
        }
      },
      "25": {
        start: {
          line: 31,
          column: 12
        },
        end: {
          line: 31,
          column: 96
        }
      },
      "26": {
        start: {
          line: 32,
          column: 12
        },
        end: {
          line: 32,
          column: 74
        }
      },
      "27": {
        start: {
          line: 33,
          column: 12
        },
        end: {
          line: 33,
          column: 81
        }
      },
      "28": {
        start: {
          line: 34,
          column: 12
        },
        end: {
          line: 34,
          column: 87
        }
      },
      "29": {
        start: {
          line: 35,
          column: 12
        },
        end: {
          line: 35,
          column: 102
        }
      },
      "30": {
        start: {
          line: 37,
          column: 12
        },
        end: {
          line: 37,
          column: 42
        }
      },
      "31": {
        start: {
          line: 38,
          column: 12
        },
        end: {
          line: 38,
          column: 61
        }
      },
      "32": {
        start: {
          line: 39,
          column: 12
        },
        end: {
          line: 39,
          column: 38
        }
      },
      "33": {
        start: {
          line: 40,
          column: 12
        },
        end: {
          line: 40,
          column: 99
        }
      },
      "34": {
        start: {
          line: 42,
          column: 12
        },
        end: {
          line: 51,
          column: 15
        }
      },
      "35": {
        start: {
          line: 54,
          column: 12
        },
        end: {
          line: 54,
          column: 86
        }
      },
      "36": {
        start: {
          line: 55,
          column: 12
        },
        end: {
          line: 61,
          column: 15
        }
      },
      "37": {
        start: {
          line: 62,
          column: 12
        },
        end: {
          line: 62,
          column: 24
        }
      },
      "38": {
        start: {
          line: 67,
          column: 8
        },
        end: {
          line: 69,
          column: 11
        }
      },
      "39": {
        start: {
          line: 68,
          column: 12
        },
        end: {
          line: 68,
          column: 78
        }
      },
      "40": {
        start: {
          line: 71,
          column: 8
        },
        end: {
          line: 71,
          column: 54
        }
      },
      "41": {
        start: {
          line: 72,
          column: 8
        },
        end: {
          line: 72,
          column: 56
        }
      },
      "42": {
        start: {
          line: 76,
          column: 8
        },
        end: {
          line: 136,
          column: 11
        }
      },
      "43": {
        start: {
          line: 77,
          column: 12
        },
        end: {
          line: 79,
          column: 13
        }
      },
      "44": {
        start: {
          line: 78,
          column: 16
        },
        end: {
          line: 78,
          column: 77
        }
      },
      "45": {
        start: {
          line: 80,
          column: 12
        },
        end: {
          line: 80,
          column: 66
        }
      },
      "46": {
        start: {
          line: 81,
          column: 30
        },
        end: {
          line: 81,
          column: 40
        }
      },
      "47": {
        start: {
          line: 82,
          column: 12
        },
        end: {
          line: 135,
          column: 13
        }
      },
      "48": {
        start: {
          line: 84,
          column: 37
        },
        end: {
          line: 84,
          column: 65
        }
      },
      "49": {
        start: {
          line: 85,
          column: 16
        },
        end: {
          line: 87,
          column: 17
        }
      },
      "50": {
        start: {
          line: 86,
          column: 20
        },
        end: {
          line: 86,
          column: 90
        }
      },
      "51": {
        start: {
          line: 89,
          column: 16
        },
        end: {
          line: 89,
          column: 65
        }
      },
      "52": {
        start: {
          line: 90,
          column: 40
        },
        end: {
          line: 90,
          column: 93
        }
      },
      "53": {
        start: {
          line: 92,
          column: 16
        },
        end: {
          line: 92,
          column: 59
        }
      },
      "54": {
        start: {
          line: 93,
          column: 62
        },
        end: {
          line: 96,
          column: 18
        }
      },
      "55": {
        start: {
          line: 98,
          column: 37
        },
        end: {
          line: 98,
          column: 89
        }
      },
      "56": {
        start: {
          line: 100,
          column: 41
        },
        end: {
          line: 113,
          column: 17
        }
      },
      "57": {
        start: {
          line: 114,
          column: 16
        },
        end: {
          line: 114,
          column: 109
        }
      },
      "58": {
        start: {
          line: 116,
          column: 16
        },
        end: {
          line: 122,
          column: 19
        }
      },
      "59": {
        start: {
          line: 123,
          column: 16
        },
        end: {
          line: 123,
          column: 40
        }
      },
      "60": {
        start: {
          line: 126,
          column: 16
        },
        end: {
          line: 126,
          column: 74
        }
      },
      "61": {
        start: {
          line: 127,
          column: 16
        },
        end: {
          line: 133,
          column: 19
        }
      },
      "62": {
        start: {
          line: 134,
          column: 16
        },
        end: {
          line: 134,
          column: 28
        }
      },
      "63": {
        start: {
          line: 139,
          column: 8
        },
        end: {
          line: 153,
          column: 11
        }
      },
      "64": {
        start: {
          line: 140,
          column: 12
        },
        end: {
          line: 142,
          column: 13
        }
      },
      "65": {
        start: {
          line: 141,
          column: 16
        },
        end: {
          line: 141,
          column: 77
        }
      },
      "66": {
        start: {
          line: 143,
          column: 12
        },
        end: {
          line: 143,
          column: 59
        }
      },
      "67": {
        start: {
          line: 144,
          column: 12
        },
        end: {
          line: 152,
          column: 13
        }
      },
      "68": {
        start: {
          line: 145,
          column: 41
        },
        end: {
          line: 145,
          column: 93
        }
      },
      "69": {
        start: {
          line: 146,
          column: 16
        },
        end: {
          line: 146,
          column: 110
        }
      },
      "70": {
        start: {
          line: 147,
          column: 16
        },
        end: {
          line: 147,
          column: 40
        }
      },
      "71": {
        start: {
          line: 150,
          column: 16
        },
        end: {
          line: 150,
          column: 72
        }
      },
      "72": {
        start: {
          line: 151,
          column: 16
        },
        end: {
          line: 151,
          column: 28
        }
      },
      "73": {
        start: {
          line: 156,
          column: 8
        },
        end: {
          line: 174,
          column: 11
        }
      },
      "74": {
        start: {
          line: 157,
          column: 27
        },
        end: {
          line: 164,
          column: 13
        }
      },
      "75": {
        start: {
          line: 166,
          column: 33
        },
        end: {
          line: 166,
          column: 85
        }
      },
      "76": {
        start: {
          line: 167,
          column: 12
        },
        end: {
          line: 172,
          column: 13
        }
      },
      "77": {
        start: {
          line: 168,
          column: 16
        },
        end: {
          line: 168,
          column: 50
        }
      },
      "78": {
        start: {
          line: 170,
          column: 17
        },
        end: {
          line: 172,
          column: 13
        }
      },
      "79": {
        start: {
          line: 171,
          column: 16
        },
        end: {
          line: 171,
          column: 50
        }
      },
      "80": {
        start: {
          line: 173,
          column: 12
        },
        end: {
          line: 173,
          column: 26
        }
      },
      "81": {
        start: {
          line: 177,
          column: 8
        },
        end: {
          line: 214,
          column: 11
        }
      },
      "82": {
        start: {
          line: 178,
          column: 33
        },
        end: {
          line: 178,
          column: 85
        }
      },
      "83": {
        start: {
          line: 179,
          column: 36
        },
        end: {
          line: 179,
          column: 82
        }
      },
      "84": {
        start: {
          line: 180,
          column: 31
        },
        end: {
          line: 180,
          column: 63
        }
      },
      "85": {
        start: {
          line: 181,
          column: 27
        },
        end: {
          line: 212,
          column: 13
        }
      },
      "86": {
        start: {
          line: 213,
          column: 12
        },
        end: {
          line: 213,
          column: 26
        }
      },
      "87": {
        start: {
          line: 218,
          column: 8
        },
        end: {
          line: 267,
          column: 11
        }
      },
      "88": {
        start: {
          line: 219,
          column: 12
        },
        end: {
          line: 219,
          column: 75
        }
      },
      "89": {
        start: {
          line: 220,
          column: 12
        },
        end: {
          line: 220,
          column: 76
        }
      },
      "90": {
        start: {
          line: 221,
          column: 12
        },
        end: {
          line: 266,
          column: 13
        }
      },
      "91": {
        start: {
          line: 223,
          column: 16
        },
        end: {
          line: 223,
          column: 64
        }
      },
      "92": {
        start: {
          line: 224,
          column: 37
        },
        end: {
          line: 224,
          column: 65
        }
      },
      "93": {
        start: {
          line: 225,
          column: 16
        },
        end: {
          line: 225,
          column: 60
        }
      },
      "94": {
        start: {
          line: 227,
          column: 16
        },
        end: {
          line: 227,
          column: 76
        }
      },
      "95": {
        start: {
          line: 228,
          column: 16
        },
        end: {
          line: 232,
          column: 17
        }
      },
      "96": {
        start: {
          line: 229,
          column: 20
        },
        end: {
          line: 229,
          column: 66
        }
      },
      "97": {
        start: {
          line: 230,
          column: 20
        },
        end: {
          line: 230,
          column: 64
        }
      },
      "98": {
        start: {
          line: 231,
          column: 20
        },
        end: {
          line: 231,
          column: 76
        }
      },
      "99": {
        start: {
          line: 231,
          column: 49
        },
        end: {
          line: 231,
          column: 74
        }
      },
      "100": {
        start: {
          line: 233,
          column: 37
        },
        end: {
          line: 233,
          column: 71
        }
      },
      "101": {
        start: {
          line: 234,
          column: 16
        },
        end: {
          line: 234,
          column: 78
        }
      },
      "102": {
        start: {
          line: 236,
          column: 16
        },
        end: {
          line: 236,
          column: 78
        }
      },
      "103": {
        start: {
          line: 237,
          column: 40
        },
        end: {
          line: 237,
          column: 93
        }
      },
      "104": {
        start: {
          line: 238,
          column: 16
        },
        end: {
          line: 238,
          column: 153
        }
      },
      "105": {
        start: {
          line: 240,
          column: 16
        },
        end: {
          line: 240,
          column: 72
        }
      },
      "106": {
        start: {
          line: 241,
          column: 42
        },
        end: {
          line: 241,
          column: 83
        }
      },
      "107": {
        start: {
          line: 242,
          column: 16
        },
        end: {
          line: 242,
          column: 147
        }
      },
      "108": {
        start: {
          line: 244,
          column: 16
        },
        end: {
          line: 244,
          column: 74
        }
      },
      "109": {
        start: {
          line: 245,
          column: 45
        },
        end: {
          line: 245,
          column: 79
        }
      },
      "110": {
        start: {
          line: 246,
          column: 16
        },
        end: {
          line: 246,
          column: 145
        }
      },
      "111": {
        start: {
          line: 248,
          column: 16
        },
        end: {
          line: 248,
          column: 71
        }
      },
      "112": {
        start: {
          line: 249,
          column: 16
        },
        end: {
          line: 255,
          column: 19
        }
      },
      "113": {
        start: {
          line: 256,
          column: 16
        },
        end: {
          line: 256,
          column: 73
        }
      },
      "114": {
        start: {
          line: 257,
          column: 16
        },
        end: {
          line: 257,
          column: 69
        }
      },
      "115": {
        start: {
          line: 259,
          column: 36
        },
        end: {
          line: 259,
          column: 64
        }
      },
      "116": {
        start: {
          line: 260,
          column: 16
        },
        end: {
          line: 260,
          column: 84
        }
      },
      "117": {
        start: {
          line: 261,
          column: 16
        },
        end: {
          line: 261,
          column: 102
        }
      },
      "118": {
        start: {
          line: 264,
          column: 16
        },
        end: {
          line: 264,
          column: 66
        }
      },
      "119": {
        start: {
          line: 265,
          column: 16
        },
        end: {
          line: 265,
          column: 28
        }
      },
      "120": {
        start: {
          line: 270,
          column: 8
        },
        end: {
          line: 310,
          column: 11
        }
      },
      "121": {
        start: {
          line: 271,
          column: 12
        },
        end: {
          line: 271,
          column: 53
        }
      },
      "122": {
        start: {
          line: 272,
          column: 12
        },
        end: {
          line: 272,
          column: 52
        }
      },
      "123": {
        start: {
          line: 273,
          column: 26
        },
        end: {
          line: 280,
          column: 13
        }
      },
      "124": {
        start: {
          line: 274,
          column: 61
        },
        end: {
          line: 274,
          column: 92
        }
      },
      "125": {
        start: {
          line: 275,
          column: 59
        },
        end: {
          line: 275,
          column: 88
        }
      },
      "126": {
        start: {
          line: 276,
          column: 53
        },
        end: {
          line: 276,
          column: 76
        }
      },
      "127": {
        start: {
          line: 277,
          column: 57
        },
        end: {
          line: 277,
          column: 84
        }
      },
      "128": {
        start: {
          line: 278,
          column: 52
        },
        end: {
          line: 278,
          column: 74
        }
      },
      "129": {
        start: {
          line: 279,
          column: 56
        },
        end: {
          line: 279,
          column: 82
        }
      },
      "130": {
        start: {
          line: 281,
          column: 25
        },
        end: {
          line: 281,
          column: 26
        }
      },
      "131": {
        start: {
          line: 282,
          column: 25
        },
        end: {
          line: 282,
          column: 26
        }
      },
      "132": {
        start: {
          line: 283,
          column: 12
        },
        end: {
          line: 294,
          column: 13
        }
      },
      "133": {
        start: {
          line: 284,
          column: 16
        },
        end: {
          line: 293,
          column: 17
        }
      },
      "134": {
        start: {
          line: 285,
          column: 20
        },
        end: {
          line: 285,
          column: 62
        }
      },
      "135": {
        start: {
          line: 286,
          column: 20
        },
        end: {
          line: 286,
          column: 38
        }
      },
      "136": {
        start: {
          line: 287,
          column: 20
        },
        end: {
          line: 287,
          column: 58
        }
      },
      "137": {
        start: {
          line: 288,
          column: 20
        },
        end: {
          line: 288,
          column: 29
        }
      },
      "138": {
        start: {
          line: 291,
          column: 20
        },
        end: {
          line: 291,
          column: 67
        }
      },
      "139": {
        start: {
          line: 292,
          column: 20
        },
        end: {
          line: 292,
          column: 29
        }
      },
      "140": {
        start: {
          line: 295,
          column: 26
        },
        end: {
          line: 295,
          column: 38
        }
      },
      "141": {
        start: {
          line: 296,
          column: 32
        },
        end: {
          line: 296,
          column: 54
        }
      },
      "142": {
        start: {
          line: 297,
          column: 12
        },
        end: {
          line: 297,
          column: 53
        }
      },
      "143": {
        start: {
          line: 298,
          column: 12
        },
        end: {
          line: 298,
          column: 51
        }
      },
      "144": {
        start: {
          line: 299,
          column: 12
        },
        end: {
          line: 299,
          column: 49
        }
      },
      "145": {
        start: {
          line: 300,
          column: 12
        },
        end: {
          line: 300,
          column: 45
        }
      },
      "146": {
        start: {
          line: 301,
          column: 12
        },
        end: {
          line: 301,
          column: 45
        }
      },
      "147": {
        start: {
          line: 302,
          column: 12
        },
        end: {
          line: 302,
          column: 68
        }
      },
      "148": {
        start: {
          line: 303,
          column: 12
        },
        end: {
          line: 308,
          column: 13
        }
      },
      "149": {
        start: {
          line: 304,
          column: 16
        },
        end: {
          line: 304,
          column: 77
        }
      },
      "150": {
        start: {
          line: 307,
          column: 16
        },
        end: {
          line: 307,
          column: 84
        }
      },
      "151": {
        start: {
          line: 309,
          column: 12
        },
        end: {
          line: 309,
          column: 45
        }
      },
      "152": {
        start: {
          line: 314,
          column: 8
        },
        end: {
          line: 321,
          column: 11
        }
      },
      "153": {
        start: {
          line: 315,
          column: 12
        },
        end: {
          line: 317,
          column: 13
        }
      },
      "154": {
        start: {
          line: 316,
          column: 16
        },
        end: {
          line: 316,
          column: 67
        }
      },
      "155": {
        start: {
          line: 318,
          column: 12
        },
        end: {
          line: 320,
          column: 13
        }
      },
      "156": {
        start: {
          line: 319,
          column: 16
        },
        end: {
          line: 319,
          column: 63
        }
      },
      "157": {
        start: {
          line: 324,
          column: 8
        },
        end: {
          line: 332,
          column: 11
        }
      },
      "158": {
        start: {
          line: 325,
          column: 29
        },
        end: {
          line: 325,
          column: 82
        }
      },
      "159": {
        start: {
          line: 326,
          column: 12
        },
        end: {
          line: 328,
          column: 13
        }
      },
      "160": {
        start: {
          line: 327,
          column: 16
        },
        end: {
          line: 327,
          column: 60
        }
      },
      "161": {
        start: {
          line: 329,
          column: 12
        },
        end: {
          line: 331,
          column: 13
        }
      },
      "162": {
        start: {
          line: 330,
          column: 16
        },
        end: {
          line: 330,
          column: 68
        }
      },
      "163": {
        start: {
          line: 335,
          column: 8
        },
        end: {
          line: 345,
          column: 11
        }
      },
      "164": {
        start: {
          line: 336,
          column: 29
        },
        end: {
          line: 336,
          column: 82
        }
      },
      "165": {
        start: {
          line: 337,
          column: 35
        },
        end: {
          line: 337,
          column: 92
        }
      },
      "166": {
        start: {
          line: 338,
          column: 40
        },
        end: {
          line: 338,
          column: 99
        }
      },
      "167": {
        start: {
          line: 339,
          column: 12
        },
        end: {
          line: 341,
          column: 13
        }
      },
      "168": {
        start: {
          line: 340,
          column: 16
        },
        end: {
          line: 340,
          column: 75
        }
      },
      "169": {
        start: {
          line: 342,
          column: 12
        },
        end: {
          line: 344,
          column: 13
        }
      },
      "170": {
        start: {
          line: 343,
          column: 16
        },
        end: {
          line: 343,
          column: 80
        }
      },
      "171": {
        start: {
          line: 348,
          column: 8
        },
        end: {
          line: 357,
          column: 11
        }
      },
      "172": {
        start: {
          line: 349,
          column: 12
        },
        end: {
          line: 352,
          column: 13
        }
      },
      "173": {
        start: {
          line: 350,
          column: 16
        },
        end: {
          line: 350,
          column: 62
        }
      },
      "174": {
        start: {
          line: 351,
          column: 16
        },
        end: {
          line: 351,
          column: 72
        }
      },
      "175": {
        start: {
          line: 351,
          column: 45
        },
        end: {
          line: 351,
          column: 70
        }
      },
      "176": {
        start: {
          line: 353,
          column: 33
        },
        end: {
          line: 353,
          column: 85
        }
      },
      "177": {
        start: {
          line: 354,
          column: 12
        },
        end: {
          line: 356,
          column: 13
        }
      },
      "178": {
        start: {
          line: 355,
          column: 16
        },
        end: {
          line: 355,
          column: 74
        }
      },
      "179": {
        start: {
          line: 360,
          column: 8
        },
        end: {
          line: 373,
          column: 11
        }
      },
      "180": {
        start: {
          line: 361,
          column: 30
        },
        end: {
          line: 367,
          column: 13
        }
      },
      "181": {
        start: {
          line: 368,
          column: 12
        },
        end: {
          line: 368,
          column: 59
        }
      },
      "182": {
        start: {
          line: 369,
          column: 33
        },
        end: {
          line: 369,
          column: 68
        }
      },
      "183": {
        start: {
          line: 370,
          column: 12
        },
        end: {
          line: 372,
          column: 13
        }
      },
      "184": {
        start: {
          line: 371,
          column: 16
        },
        end: {
          line: 371,
          column: 65
        }
      },
      "185": {
        start: {
          line: 376,
          column: 8
        },
        end: {
          line: 384,
          column: 11
        }
      },
      "186": {
        start: {
          line: 377,
          column: 27
        },
        end: {
          line: 377,
          column: 79
        }
      },
      "187": {
        start: {
          line: 378,
          column: 12
        },
        end: {
          line: 380,
          column: 13
        }
      },
      "188": {
        start: {
          line: 379,
          column: 16
        },
        end: {
          line: 379,
          column: 77
        }
      },
      "189": {
        start: {
          line: 381,
          column: 12
        },
        end: {
          line: 383,
          column: 13
        }
      },
      "190": {
        start: {
          line: 382,
          column: 16
        },
        end: {
          line: 382,
          column: 87
        }
      },
      "191": {
        start: {
          line: 388,
          column: 8
        },
        end: {
          line: 388,
          column: 86
        }
      },
      "192": {
        start: {
          line: 392,
          column: 8
        },
        end: {
          line: 392,
          column: 41
        }
      },
      "193": {
        start: {
          line: 395,
          column: 8
        },
        end: {
          line: 395,
          column: 43
        }
      },
      "194": {
        start: {
          line: 398,
          column: 8
        },
        end: {
          line: 398,
          column: 32
        }
      },
      "195": {
        start: {
          line: 401,
          column: 8
        },
        end: {
          line: 401,
          column: 34
        }
      },
      "196": {
        start: {
          line: 404,
          column: 8
        },
        end: {
          line: 416,
          column: 11
        }
      },
      "197": {
        start: {
          line: 405,
          column: 12
        },
        end: {
          line: 405,
          column: 73
        }
      },
      "198": {
        start: {
          line: 406,
          column: 12
        },
        end: {
          line: 406,
          column: 57
        }
      },
      "199": {
        start: {
          line: 407,
          column: 12
        },
        end: {
          line: 407,
          column: 48
        }
      },
      "200": {
        start: {
          line: 408,
          column: 12
        },
        end: {
          line: 414,
          column: 15
        }
      },
      "201": {
        start: {
          line: 415,
          column: 12
        },
        end: {
          line: 415,
          column: 78
        }
      },
      "202": {
        start: {
          line: 419,
          column: 0
        },
        end: {
          line: 419,
          column: 58
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 2,
            column: 44
          },
          end: {
            line: 2,
            column: 45
          }
        },
        loc: {
          start: {
            line: 2,
            column: 89
          },
          end: {
            line: 10,
            column: 1
          }
        },
        line: 2
      },
      "1": {
        name: "adopt",
        decl: {
          start: {
            line: 3,
            column: 13
          },
          end: {
            line: 3,
            column: 18
          }
        },
        loc: {
          start: {
            line: 3,
            column: 26
          },
          end: {
            line: 3,
            column: 112
          }
        },
        line: 3
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 3,
            column: 70
          },
          end: {
            line: 3,
            column: 71
          }
        },
        loc: {
          start: {
            line: 3,
            column: 89
          },
          end: {
            line: 3,
            column: 108
          }
        },
        line: 3
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 4,
            column: 36
          },
          end: {
            line: 4,
            column: 37
          }
        },
        loc: {
          start: {
            line: 4,
            column: 63
          },
          end: {
            line: 9,
            column: 5
          }
        },
        line: 4
      },
      "4": {
        name: "fulfilled",
        decl: {
          start: {
            line: 5,
            column: 17
          },
          end: {
            line: 5,
            column: 26
          }
        },
        loc: {
          start: {
            line: 5,
            column: 34
          },
          end: {
            line: 5,
            column: 99
          }
        },
        line: 5
      },
      "5": {
        name: "rejected",
        decl: {
          start: {
            line: 6,
            column: 17
          },
          end: {
            line: 6,
            column: 25
          }
        },
        loc: {
          start: {
            line: 6,
            column: 33
          },
          end: {
            line: 6,
            column: 102
          }
        },
        line: 6
      },
      "6": {
        name: "step",
        decl: {
          start: {
            line: 7,
            column: 17
          },
          end: {
            line: 7,
            column: 21
          }
        },
        loc: {
          start: {
            line: 7,
            column: 30
          },
          end: {
            line: 7,
            column: 118
          }
        },
        line: 7
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 19,
            column: 4
          },
          end: {
            line: 19,
            column: 5
          }
        },
        loc: {
          start: {
            line: 19,
            column: 18
          },
          end: {
            line: 23,
            column: 5
          }
        },
        line: 19
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 24,
            column: 4
          },
          end: {
            line: 24,
            column: 5
          }
        },
        loc: {
          start: {
            line: 24,
            column: 24
          },
          end: {
            line: 64,
            column: 5
          }
        },
        line: 24
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 65,
            column: 4
          },
          end: {
            line: 65,
            column: 5
          }
        },
        loc: {
          start: {
            line: 65,
            column: 29
          },
          end: {
            line: 73,
            column: 5
          }
        },
        line: 65
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 67,
            column: 44
          },
          end: {
            line: 67,
            column: 45
          }
        },
        loc: {
          start: {
            line: 67,
            column: 55
          },
          end: {
            line: 69,
            column: 9
          }
        },
        line: 67
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 75,
            column: 4
          },
          end: {
            line: 75,
            column: 5
          }
        },
        loc: {
          start: {
            line: 75,
            column: 35
          },
          end: {
            line: 137,
            column: 5
          }
        },
        line: 75
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 76,
            column: 47
          },
          end: {
            line: 76,
            column: 48
          }
        },
        loc: {
          start: {
            line: 76,
            column: 60
          },
          end: {
            line: 136,
            column: 9
          }
        },
        line: 76
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 138,
            column: 4
          },
          end: {
            line: 138,
            column: 5
          }
        },
        loc: {
          start: {
            line: 138,
            column: 28
          },
          end: {
            line: 154,
            column: 5
          }
        },
        line: 138
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 139,
            column: 47
          },
          end: {
            line: 139,
            column: 48
          }
        },
        loc: {
          start: {
            line: 139,
            column: 60
          },
          end: {
            line: 153,
            column: 9
          }
        },
        line: 139
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 155,
            column: 4
          },
          end: {
            line: 155,
            column: 5
          }
        },
        loc: {
          start: {
            line: 155,
            column: 22
          },
          end: {
            line: 175,
            column: 5
          }
        },
        line: 155
      },
      "16": {
        name: "(anonymous_16)",
        decl: {
          start: {
            line: 156,
            column: 47
          },
          end: {
            line: 156,
            column: 48
          }
        },
        loc: {
          start: {
            line: 156,
            column: 60
          },
          end: {
            line: 174,
            column: 9
          }
        },
        line: 156
      },
      "17": {
        name: "(anonymous_17)",
        decl: {
          start: {
            line: 176,
            column: 4
          },
          end: {
            line: 176,
            column: 5
          }
        },
        loc: {
          start: {
            line: 176,
            column: 28
          },
          end: {
            line: 215,
            column: 5
          }
        },
        line: 176
      },
      "18": {
        name: "(anonymous_18)",
        decl: {
          start: {
            line: 177,
            column: 47
          },
          end: {
            line: 177,
            column: 48
          }
        },
        loc: {
          start: {
            line: 177,
            column: 60
          },
          end: {
            line: 214,
            column: 9
          }
        },
        line: 177
      },
      "19": {
        name: "(anonymous_19)",
        decl: {
          start: {
            line: 217,
            column: 4
          },
          end: {
            line: 217,
            column: 5
          }
        },
        loc: {
          start: {
            line: 217,
            column: 23
          },
          end: {
            line: 268,
            column: 5
          }
        },
        line: 217
      },
      "20": {
        name: "(anonymous_20)",
        decl: {
          start: {
            line: 218,
            column: 47
          },
          end: {
            line: 218,
            column: 48
          }
        },
        loc: {
          start: {
            line: 218,
            column: 60
          },
          end: {
            line: 267,
            column: 9
          }
        },
        line: 218
      },
      "21": {
        name: "(anonymous_21)",
        decl: {
          start: {
            line: 231,
            column: 38
          },
          end: {
            line: 231,
            column: 39
          }
        },
        loc: {
          start: {
            line: 231,
            column: 49
          },
          end: {
            line: 231,
            column: 74
          }
        },
        line: 231
      },
      "22": {
        name: "(anonymous_22)",
        decl: {
          start: {
            line: 269,
            column: 4
          },
          end: {
            line: 269,
            column: 5
          }
        },
        loc: {
          start: {
            line: 269,
            column: 21
          },
          end: {
            line: 311,
            column: 5
          }
        },
        line: 269
      },
      "23": {
        name: "(anonymous_23)",
        decl: {
          start: {
            line: 270,
            column: 47
          },
          end: {
            line: 270,
            column: 48
          }
        },
        loc: {
          start: {
            line: 270,
            column: 60
          },
          end: {
            line: 310,
            column: 9
          }
        },
        line: 270
      },
      "24": {
        name: "(anonymous_24)",
        decl: {
          start: {
            line: 274,
            column: 55
          },
          end: {
            line: 274,
            column: 56
          }
        },
        loc: {
          start: {
            line: 274,
            column: 61
          },
          end: {
            line: 274,
            column: 92
          }
        },
        line: 274
      },
      "25": {
        name: "(anonymous_25)",
        decl: {
          start: {
            line: 275,
            column: 53
          },
          end: {
            line: 275,
            column: 54
          }
        },
        loc: {
          start: {
            line: 275,
            column: 59
          },
          end: {
            line: 275,
            column: 88
          }
        },
        line: 275
      },
      "26": {
        name: "(anonymous_26)",
        decl: {
          start: {
            line: 276,
            column: 47
          },
          end: {
            line: 276,
            column: 48
          }
        },
        loc: {
          start: {
            line: 276,
            column: 53
          },
          end: {
            line: 276,
            column: 76
          }
        },
        line: 276
      },
      "27": {
        name: "(anonymous_27)",
        decl: {
          start: {
            line: 277,
            column: 51
          },
          end: {
            line: 277,
            column: 52
          }
        },
        loc: {
          start: {
            line: 277,
            column: 57
          },
          end: {
            line: 277,
            column: 84
          }
        },
        line: 277
      },
      "28": {
        name: "(anonymous_28)",
        decl: {
          start: {
            line: 278,
            column: 46
          },
          end: {
            line: 278,
            column: 47
          }
        },
        loc: {
          start: {
            line: 278,
            column: 52
          },
          end: {
            line: 278,
            column: 74
          }
        },
        line: 278
      },
      "29": {
        name: "(anonymous_29)",
        decl: {
          start: {
            line: 279,
            column: 50
          },
          end: {
            line: 279,
            column: 51
          }
        },
        loc: {
          start: {
            line: 279,
            column: 56
          },
          end: {
            line: 279,
            column: 82
          }
        },
        line: 279
      },
      "30": {
        name: "(anonymous_30)",
        decl: {
          start: {
            line: 313,
            column: 4
          },
          end: {
            line: 313,
            column: 5
          }
        },
        loc: {
          start: {
            line: 313,
            column: 31
          },
          end: {
            line: 322,
            column: 5
          }
        },
        line: 313
      },
      "31": {
        name: "(anonymous_31)",
        decl: {
          start: {
            line: 314,
            column: 47
          },
          end: {
            line: 314,
            column: 48
          }
        },
        loc: {
          start: {
            line: 314,
            column: 60
          },
          end: {
            line: 321,
            column: 9
          }
        },
        line: 314
      },
      "32": {
        name: "(anonymous_32)",
        decl: {
          start: {
            line: 323,
            column: 4
          },
          end: {
            line: 323,
            column: 5
          }
        },
        loc: {
          start: {
            line: 323,
            column: 29
          },
          end: {
            line: 333,
            column: 5
          }
        },
        line: 323
      },
      "33": {
        name: "(anonymous_33)",
        decl: {
          start: {
            line: 324,
            column: 47
          },
          end: {
            line: 324,
            column: 48
          }
        },
        loc: {
          start: {
            line: 324,
            column: 60
          },
          end: {
            line: 332,
            column: 9
          }
        },
        line: 324
      },
      "34": {
        name: "(anonymous_34)",
        decl: {
          start: {
            line: 334,
            column: 4
          },
          end: {
            line: 334,
            column: 5
          }
        },
        loc: {
          start: {
            line: 334,
            column: 23
          },
          end: {
            line: 346,
            column: 5
          }
        },
        line: 334
      },
      "35": {
        name: "(anonymous_35)",
        decl: {
          start: {
            line: 335,
            column: 47
          },
          end: {
            line: 335,
            column: 48
          }
        },
        loc: {
          start: {
            line: 335,
            column: 60
          },
          end: {
            line: 345,
            column: 9
          }
        },
        line: 335
      },
      "36": {
        name: "(anonymous_36)",
        decl: {
          start: {
            line: 347,
            column: 4
          },
          end: {
            line: 347,
            column: 5
          }
        },
        loc: {
          start: {
            line: 347,
            column: 27
          },
          end: {
            line: 358,
            column: 5
          }
        },
        line: 347
      },
      "37": {
        name: "(anonymous_37)",
        decl: {
          start: {
            line: 348,
            column: 47
          },
          end: {
            line: 348,
            column: 48
          }
        },
        loc: {
          start: {
            line: 348,
            column: 60
          },
          end: {
            line: 357,
            column: 9
          }
        },
        line: 348
      },
      "38": {
        name: "(anonymous_38)",
        decl: {
          start: {
            line: 351,
            column: 34
          },
          end: {
            line: 351,
            column: 35
          }
        },
        loc: {
          start: {
            line: 351,
            column: 45
          },
          end: {
            line: 351,
            column: 70
          }
        },
        line: 351
      },
      "39": {
        name: "(anonymous_39)",
        decl: {
          start: {
            line: 359,
            column: 4
          },
          end: {
            line: 359,
            column: 5
          }
        },
        loc: {
          start: {
            line: 359,
            column: 22
          },
          end: {
            line: 374,
            column: 5
          }
        },
        line: 359
      },
      "40": {
        name: "(anonymous_40)",
        decl: {
          start: {
            line: 360,
            column: 47
          },
          end: {
            line: 360,
            column: 48
          }
        },
        loc: {
          start: {
            line: 360,
            column: 60
          },
          end: {
            line: 373,
            column: 9
          }
        },
        line: 360
      },
      "41": {
        name: "(anonymous_41)",
        decl: {
          start: {
            line: 375,
            column: 4
          },
          end: {
            line: 375,
            column: 5
          }
        },
        loc: {
          start: {
            line: 375,
            column: 26
          },
          end: {
            line: 385,
            column: 5
          }
        },
        line: 375
      },
      "42": {
        name: "(anonymous_42)",
        decl: {
          start: {
            line: 376,
            column: 47
          },
          end: {
            line: 376,
            column: 48
          }
        },
        loc: {
          start: {
            line: 376,
            column: 60
          },
          end: {
            line: 384,
            column: 9
          }
        },
        line: 376
      },
      "43": {
        name: "(anonymous_43)",
        decl: {
          start: {
            line: 387,
            column: 4
          },
          end: {
            line: 387,
            column: 5
          }
        },
        loc: {
          start: {
            line: 387,
            column: 22
          },
          end: {
            line: 389,
            column: 5
          }
        },
        line: 387
      },
      "44": {
        name: "(anonymous_44)",
        decl: {
          start: {
            line: 391,
            column: 4
          },
          end: {
            line: 391,
            column: 5
          }
        },
        loc: {
          start: {
            line: 391,
            column: 30
          },
          end: {
            line: 393,
            column: 5
          }
        },
        line: 391
      },
      "45": {
        name: "(anonymous_45)",
        decl: {
          start: {
            line: 394,
            column: 4
          },
          end: {
            line: 394,
            column: 5
          }
        },
        loc: {
          start: {
            line: 394,
            column: 32
          },
          end: {
            line: 396,
            column: 5
          }
        },
        line: 394
      },
      "46": {
        name: "(anonymous_46)",
        decl: {
          start: {
            line: 397,
            column: 4
          },
          end: {
            line: 397,
            column: 5
          }
        },
        loc: {
          start: {
            line: 397,
            column: 21
          },
          end: {
            line: 399,
            column: 5
          }
        },
        line: 397
      },
      "47": {
        name: "(anonymous_47)",
        decl: {
          start: {
            line: 400,
            column: 4
          },
          end: {
            line: 400,
            column: 5
          }
        },
        loc: {
          start: {
            line: 400,
            column: 20
          },
          end: {
            line: 402,
            column: 5
          }
        },
        line: 400
      },
      "48": {
        name: "(anonymous_48)",
        decl: {
          start: {
            line: 403,
            column: 4
          },
          end: {
            line: 403,
            column: 5
          }
        },
        loc: {
          start: {
            line: 403,
            column: 15
          },
          end: {
            line: 417,
            column: 5
          }
        },
        line: 403
      },
      "49": {
        name: "(anonymous_49)",
        decl: {
          start: {
            line: 404,
            column: 47
          },
          end: {
            line: 404,
            column: 48
          }
        },
        loc: {
          start: {
            line: 404,
            column: 60
          },
          end: {
            line: 416,
            column: 9
          }
        },
        line: 404
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 2,
            column: 16
          },
          end: {
            line: 10,
            column: 1
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 2,
            column: 17
          },
          end: {
            line: 2,
            column: 21
          }
        }, {
          start: {
            line: 2,
            column: 25
          },
          end: {
            line: 2,
            column: 39
          }
        }, {
          start: {
            line: 2,
            column: 44
          },
          end: {
            line: 10,
            column: 1
          }
        }],
        line: 2
      },
      "1": {
        loc: {
          start: {
            line: 3,
            column: 35
          },
          end: {
            line: 3,
            column: 109
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 3,
            column: 56
          },
          end: {
            line: 3,
            column: 61
          }
        }, {
          start: {
            line: 3,
            column: 64
          },
          end: {
            line: 3,
            column: 109
          }
        }],
        line: 3
      },
      "2": {
        loc: {
          start: {
            line: 4,
            column: 16
          },
          end: {
            line: 4,
            column: 34
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 4,
            column: 16
          },
          end: {
            line: 4,
            column: 17
          }
        }, {
          start: {
            line: 4,
            column: 22
          },
          end: {
            line: 4,
            column: 33
          }
        }],
        line: 4
      },
      "3": {
        loc: {
          start: {
            line: 7,
            column: 32
          },
          end: {
            line: 7,
            column: 115
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 7,
            column: 46
          },
          end: {
            line: 7,
            column: 67
          }
        }, {
          start: {
            line: 7,
            column: 70
          },
          end: {
            line: 7,
            column: 115
          }
        }],
        line: 7
      },
      "4": {
        loc: {
          start: {
            line: 8,
            column: 51
          },
          end: {
            line: 8,
            column: 67
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 8,
            column: 51
          },
          end: {
            line: 8,
            column: 61
          }
        }, {
          start: {
            line: 8,
            column: 65
          },
          end: {
            line: 8,
            column: 67
          }
        }],
        line: 8
      },
      "5": {
        loc: {
          start: {
            line: 55,
            column: 12
          },
          end: {
            line: 61,
            column: 14
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 55,
            column: 64
          },
          end: {
            line: 55,
            column: 70
          }
        }, {
          start: {
            line: 55,
            column: 73
          },
          end: {
            line: 61,
            column: 14
          }
        }],
        line: 55
      },
      "6": {
        loc: {
          start: {
            line: 55,
            column: 12
          },
          end: {
            line: 55,
            column: 61
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 55,
            column: 12
          },
          end: {
            line: 55,
            column: 44
          }
        }, {
          start: {
            line: 55,
            column: 48
          },
          end: {
            line: 55,
            column: 61
          }
        }],
        line: 55
      },
      "7": {
        loc: {
          start: {
            line: 59,
            column: 34
          },
          end: {
            line: 59,
            column: 88
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 59,
            column: 59
          },
          end: {
            line: 59,
            column: 72
          }
        }, {
          start: {
            line: 59,
            column: 75
          },
          end: {
            line: 59,
            column: 88
          }
        }],
        line: 59
      },
      "8": {
        loc: {
          start: {
            line: 77,
            column: 12
          },
          end: {
            line: 79,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 77,
            column: 12
          },
          end: {
            line: 79,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 77
      },
      "9": {
        loc: {
          start: {
            line: 85,
            column: 16
          },
          end: {
            line: 87,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 85,
            column: 16
          },
          end: {
            line: 87,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 85
      },
      "10": {
        loc: {
          start: {
            line: 102,
            column: 32
          },
          end: {
            line: 103,
            column: 82
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 102,
            column: 32
          },
          end: {
            line: 102,
            column: 53
          }
        }, {
          start: {
            line: 102,
            column: 57
          },
          end: {
            line: 102,
            column: 83
          }
        }, {
          start: {
            line: 103,
            column: 29
          },
          end: {
            line: 103,
            column: 42
          }
        }, {
          start: {
            line: 103,
            column: 46
          },
          end: {
            line: 103,
            column: 81
          }
        }],
        line: 102
      },
      "11": {
        loc: {
          start: {
            line: 105,
            column: 29
          },
          end: {
            line: 105,
            column: 116
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 105,
            column: 30
          },
          end: {
            line: 105,
            column: 108
          }
        }, {
          start: {
            line: 105,
            column: 113
          },
          end: {
            line: 105,
            column: 116
          }
        }],
        line: 105
      },
      "12": {
        loc: {
          start: {
            line: 105,
            column: 30
          },
          end: {
            line: 105,
            column: 108
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 105,
            column: 81
          },
          end: {
            line: 105,
            column: 87
          }
        }, {
          start: {
            line: 105,
            column: 90
          },
          end: {
            line: 105,
            column: 108
          }
        }],
        line: 105
      },
      "13": {
        loc: {
          start: {
            line: 105,
            column: 30
          },
          end: {
            line: 105,
            column: 78
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 105,
            column: 30
          },
          end: {
            line: 105,
            column: 51
          }
        }, {
          start: {
            line: 105,
            column: 55
          },
          end: {
            line: 105,
            column: 78
          }
        }],
        line: 105
      },
      "14": {
        loc: {
          start: {
            line: 118,
            column: 30
          },
          end: {
            line: 118,
            column: 80
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 118,
            column: 64
          },
          end: {
            line: 118,
            column: 69
          }
        }, {
          start: {
            line: 118,
            column: 72
          },
          end: {
            line: 118,
            column: 80
          }
        }],
        line: 118
      },
      "15": {
        loc: {
          start: {
            line: 119,
            column: 51
          },
          end: {
            line: 119,
            column: 104
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 119,
            column: 85
          },
          end: {
            line: 119,
            column: 93
          }
        }, {
          start: {
            line: 119,
            column: 96
          },
          end: {
            line: 119,
            column: 104
          }
        }],
        line: 119
      },
      "16": {
        loc: {
          start: {
            line: 131,
            column: 38
          },
          end: {
            line: 131,
            column: 92
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 131,
            column: 63
          },
          end: {
            line: 131,
            column: 76
          }
        }, {
          start: {
            line: 131,
            column: 79
          },
          end: {
            line: 131,
            column: 92
          }
        }],
        line: 131
      },
      "17": {
        loc: {
          start: {
            line: 140,
            column: 12
          },
          end: {
            line: 142,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 140,
            column: 12
          },
          end: {
            line: 142,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 140
      },
      "18": {
        loc: {
          start: {
            line: 146,
            column: 56
          },
          end: {
            line: 146,
            column: 106
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 146,
            column: 84
          },
          end: {
            line: 146,
            column: 94
          }
        }, {
          start: {
            line: 146,
            column: 97
          },
          end: {
            line: 146,
            column: 106
          }
        }],
        line: 146
      },
      "19": {
        loc: {
          start: {
            line: 159,
            column: 34
          },
          end: {
            line: 159,
            column: 106
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 159,
            column: 85
          },
          end: {
            line: 159,
            column: 93
          }
        }, {
          start: {
            line: 159,
            column: 96
          },
          end: {
            line: 159,
            column: 106
          }
        }],
        line: 159
      },
      "20": {
        loc: {
          start: {
            line: 167,
            column: 12
          },
          end: {
            line: 172,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 167,
            column: 12
          },
          end: {
            line: 172,
            column: 13
          }
        }, {
          start: {
            line: 170,
            column: 17
          },
          end: {
            line: 172,
            column: 13
          }
        }],
        line: 167
      },
      "21": {
        loc: {
          start: {
            line: 167,
            column: 17
          },
          end: {
            line: 167,
            column: 97
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 167,
            column: 68
          },
          end: {
            line: 167,
            column: 74
          }
        }, {
          start: {
            line: 167,
            column: 77
          },
          end: {
            line: 167,
            column: 97
          }
        }],
        line: 167
      },
      "22": {
        loc: {
          start: {
            line: 167,
            column: 17
          },
          end: {
            line: 167,
            column: 65
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 167,
            column: 17
          },
          end: {
            line: 167,
            column: 38
          }
        }, {
          start: {
            line: 167,
            column: 42
          },
          end: {
            line: 167,
            column: 65
          }
        }],
        line: 167
      },
      "23": {
        loc: {
          start: {
            line: 170,
            column: 17
          },
          end: {
            line: 172,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 170,
            column: 17
          },
          end: {
            line: 172,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 170
      },
      "24": {
        loc: {
          start: {
            line: 170,
            column: 22
          },
          end: {
            line: 170,
            column: 102
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 170,
            column: 73
          },
          end: {
            line: 170,
            column: 79
          }
        }, {
          start: {
            line: 170,
            column: 82
          },
          end: {
            line: 170,
            column: 102
          }
        }],
        line: 170
      },
      "25": {
        loc: {
          start: {
            line: 170,
            column: 22
          },
          end: {
            line: 170,
            column: 70
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 170,
            column: 22
          },
          end: {
            line: 170,
            column: 43
          }
        }, {
          start: {
            line: 170,
            column: 47
          },
          end: {
            line: 170,
            column: 70
          }
        }],
        line: 170
      },
      "26": {
        loc: {
          start: {
            line: 182,
            column: 25
          },
          end: {
            line: 182,
            column: 120
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 182,
            column: 26
          },
          end: {
            line: 182,
            column: 106
          }
        }, {
          start: {
            line: 182,
            column: 111
          },
          end: {
            line: 182,
            column: 120
          }
        }],
        line: 182
      },
      "27": {
        loc: {
          start: {
            line: 182,
            column: 26
          },
          end: {
            line: 182,
            column: 106
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 182,
            column: 77
          },
          end: {
            line: 182,
            column: 83
          }
        }, {
          start: {
            line: 182,
            column: 86
          },
          end: {
            line: 182,
            column: 106
          }
        }],
        line: 182
      },
      "28": {
        loc: {
          start: {
            line: 182,
            column: 26
          },
          end: {
            line: 182,
            column: 74
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 182,
            column: 26
          },
          end: {
            line: 182,
            column: 47
          }
        }, {
          start: {
            line: 182,
            column: 51
          },
          end: {
            line: 182,
            column: 74
          }
        }],
        line: 182
      },
      "29": {
        loc: {
          start: {
            line: 185,
            column: 32
          },
          end: {
            line: 185,
            column: 89
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 185,
            column: 68
          },
          end: {
            line: 185,
            column: 77
          }
        }, {
          start: {
            line: 185,
            column: 80
          },
          end: {
            line: 185,
            column: 89
          }
        }],
        line: 185
      },
      "30": {
        loc: {
          start: {
            line: 190,
            column: 32
          },
          end: {
            line: 190,
            column: 127
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 190,
            column: 33
          },
          end: {
            line: 190,
            column: 113
          }
        }, {
          start: {
            line: 190,
            column: 118
          },
          end: {
            line: 190,
            column: 127
          }
        }],
        line: 190
      },
      "31": {
        loc: {
          start: {
            line: 190,
            column: 33
          },
          end: {
            line: 190,
            column: 113
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 190,
            column: 84
          },
          end: {
            line: 190,
            column: 90
          }
        }, {
          start: {
            line: 190,
            column: 93
          },
          end: {
            line: 190,
            column: 113
          }
        }],
        line: 190
      },
      "32": {
        loc: {
          start: {
            line: 190,
            column: 33
          },
          end: {
            line: 190,
            column: 81
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 190,
            column: 33
          },
          end: {
            line: 190,
            column: 54
          }
        }, {
          start: {
            line: 190,
            column: 58
          },
          end: {
            line: 190,
            column: 81
          }
        }],
        line: 190
      },
      "33": {
        loc: {
          start: {
            line: 192,
            column: 35
          },
          end: {
            line: 192,
            column: 147
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 192,
            column: 36
          },
          end: {
            line: 192,
            column: 118
          }
        }, {
          start: {
            line: 192,
            column: 123
          },
          end: {
            line: 192,
            column: 147
          }
        }],
        line: 192
      },
      "34": {
        loc: {
          start: {
            line: 192,
            column: 36
          },
          end: {
            line: 192,
            column: 118
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 192,
            column: 87
          },
          end: {
            line: 192,
            column: 93
          }
        }, {
          start: {
            line: 192,
            column: 96
          },
          end: {
            line: 192,
            column: 118
          }
        }],
        line: 192
      },
      "35": {
        loc: {
          start: {
            line: 192,
            column: 36
          },
          end: {
            line: 192,
            column: 84
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 192,
            column: 36
          },
          end: {
            line: 192,
            column: 57
          }
        }, {
          start: {
            line: 192,
            column: 61
          },
          end: {
            line: 192,
            column: 84
          }
        }],
        line: 192
      },
      "36": {
        loc: {
          start: {
            line: 195,
            column: 32
          },
          end: {
            line: 195,
            column: 83
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 195,
            column: 62
          },
          end: {
            line: 195,
            column: 71
          }
        }, {
          start: {
            line: 195,
            column: 74
          },
          end: {
            line: 195,
            column: 83
          }
        }],
        line: 195
      },
      "37": {
        loc: {
          start: {
            line: 206,
            column: 44
          },
          end: {
            line: 206,
            column: 77
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 206,
            column: 44
          },
          end: {
            line: 206,
            column: 72
          }
        }, {
          start: {
            line: 206,
            column: 76
          },
          end: {
            line: 206,
            column: 77
          }
        }],
        line: 206
      },
      "38": {
        loc: {
          start: {
            line: 207,
            column: 39
          },
          end: {
            line: 207,
            column: 70
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 207,
            column: 39
          },
          end: {
            line: 207,
            column: 65
          }
        }, {
          start: {
            line: 207,
            column: 69
          },
          end: {
            line: 207,
            column: 70
          }
        }],
        line: 207
      },
      "39": {
        loc: {
          start: {
            line: 228,
            column: 16
          },
          end: {
            line: 232,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 228,
            column: 16
          },
          end: {
            line: 232,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 228
      },
      "40": {
        loc: {
          start: {
            line: 242,
            column: 51
          },
          end: {
            line: 242,
            column: 105
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 242,
            column: 86
          },
          end: {
            line: 242,
            column: 94
          }
        }, {
          start: {
            line: 242,
            column: 97
          },
          end: {
            line: 242,
            column: 105
          }
        }],
        line: 242
      },
      "41": {
        loc: {
          start: {
            line: 246,
            column: 43
          },
          end: {
            line: 246,
            column: 101
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 246,
            column: 75
          },
          end: {
            line: 246,
            column: 87
          }
        }, {
          start: {
            line: 246,
            column: 90
          },
          end: {
            line: 246,
            column: 101
          }
        }],
        line: 246
      },
      "42": {
        loc: {
          start: {
            line: 303,
            column: 12
          },
          end: {
            line: 308,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 303,
            column: 12
          },
          end: {
            line: 308,
            column: 13
          }
        }, {
          start: {
            line: 306,
            column: 17
          },
          end: {
            line: 308,
            column: 13
          }
        }],
        line: 303
      },
      "43": {
        loc: {
          start: {
            line: 315,
            column: 12
          },
          end: {
            line: 317,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 315,
            column: 12
          },
          end: {
            line: 317,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 315
      },
      "44": {
        loc: {
          start: {
            line: 318,
            column: 12
          },
          end: {
            line: 320,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 318,
            column: 12
          },
          end: {
            line: 320,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 318
      },
      "45": {
        loc: {
          start: {
            line: 326,
            column: 12
          },
          end: {
            line: 328,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 326,
            column: 12
          },
          end: {
            line: 328,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 326
      },
      "46": {
        loc: {
          start: {
            line: 326,
            column: 16
          },
          end: {
            line: 326,
            column: 74
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 326,
            column: 16
          },
          end: {
            line: 326,
            column: 37
          }
        }, {
          start: {
            line: 326,
            column: 41
          },
          end: {
            line: 326,
            column: 74
          }
        }],
        line: 326
      },
      "47": {
        loc: {
          start: {
            line: 329,
            column: 12
          },
          end: {
            line: 331,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 329,
            column: 12
          },
          end: {
            line: 331,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 329
      },
      "48": {
        loc: {
          start: {
            line: 339,
            column: 12
          },
          end: {
            line: 341,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 339,
            column: 12
          },
          end: {
            line: 341,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 339
      },
      "49": {
        loc: {
          start: {
            line: 342,
            column: 12
          },
          end: {
            line: 344,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 342,
            column: 12
          },
          end: {
            line: 344,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 342
      },
      "50": {
        loc: {
          start: {
            line: 349,
            column: 12
          },
          end: {
            line: 352,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 349,
            column: 12
          },
          end: {
            line: 352,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 349
      },
      "51": {
        loc: {
          start: {
            line: 354,
            column: 12
          },
          end: {
            line: 356,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 354,
            column: 12
          },
          end: {
            line: 356,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 354
      },
      "52": {
        loc: {
          start: {
            line: 370,
            column: 12
          },
          end: {
            line: 372,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 370,
            column: 12
          },
          end: {
            line: 372,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 370
      },
      "53": {
        loc: {
          start: {
            line: 378,
            column: 12
          },
          end: {
            line: 380,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 378,
            column: 12
          },
          end: {
            line: 380,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 378
      },
      "54": {
        loc: {
          start: {
            line: 381,
            column: 12
          },
          end: {
            line: 383,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 381,
            column: 12
          },
          end: {
            line: 383,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 381
      },
      "55": {
        loc: {
          start: {
            line: 388,
            column: 15
          },
          end: {
            line: 388,
            column: 85
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 388,
            column: 45
          },
          end: {
            line: 388,
            column: 81
          }
        }, {
          start: {
            line: 388,
            column: 84
          },
          end: {
            line: 388,
            column: 85
          }
        }],
        line: 388
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0,
      "106": 0,
      "107": 0,
      "108": 0,
      "109": 0,
      "110": 0,
      "111": 0,
      "112": 0,
      "113": 0,
      "114": 0,
      "115": 0,
      "116": 0,
      "117": 0,
      "118": 0,
      "119": 0,
      "120": 0,
      "121": 0,
      "122": 0,
      "123": 0,
      "124": 0,
      "125": 0,
      "126": 0,
      "127": 0,
      "128": 0,
      "129": 0,
      "130": 0,
      "131": 0,
      "132": 0,
      "133": 0,
      "134": 0,
      "135": 0,
      "136": 0,
      "137": 0,
      "138": 0,
      "139": 0,
      "140": 0,
      "141": 0,
      "142": 0,
      "143": 0,
      "144": 0,
      "145": 0,
      "146": 0,
      "147": 0,
      "148": 0,
      "149": 0,
      "150": 0,
      "151": 0,
      "152": 0,
      "153": 0,
      "154": 0,
      "155": 0,
      "156": 0,
      "157": 0,
      "158": 0,
      "159": 0,
      "160": 0,
      "161": 0,
      "162": 0,
      "163": 0,
      "164": 0,
      "165": 0,
      "166": 0,
      "167": 0,
      "168": 0,
      "169": 0,
      "170": 0,
      "171": 0,
      "172": 0,
      "173": 0,
      "174": 0,
      "175": 0,
      "176": 0,
      "177": 0,
      "178": 0,
      "179": 0,
      "180": 0,
      "181": 0,
      "182": 0,
      "183": 0,
      "184": 0,
      "185": 0,
      "186": 0,
      "187": 0,
      "188": 0,
      "189": 0,
      "190": 0,
      "191": 0,
      "192": 0,
      "193": 0,
      "194": 0,
      "195": 0,
      "196": 0,
      "197": 0,
      "198": 0,
      "199": 0,
      "200": 0,
      "201": 0,
      "202": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0
    },
    b: {
      "0": [0, 0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0, 0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0],
      "19": [0, 0],
      "20": [0, 0],
      "21": [0, 0],
      "22": [0, 0],
      "23": [0, 0],
      "24": [0, 0],
      "25": [0, 0],
      "26": [0, 0],
      "27": [0, 0],
      "28": [0, 0],
      "29": [0, 0],
      "30": [0, 0],
      "31": [0, 0],
      "32": [0, 0],
      "33": [0, 0],
      "34": [0, 0],
      "35": [0, 0],
      "36": [0, 0],
      "37": [0, 0],
      "38": [0, 0],
      "39": [0, 0],
      "40": [0, 0],
      "41": [0, 0],
      "42": [0, 0],
      "43": [0, 0],
      "44": [0, 0],
      "45": [0, 0],
      "46": [0, 0],
      "47": [0, 0],
      "48": [0, 0],
      "49": [0, 0],
      "50": [0, 0],
      "51": [0, 0],
      "52": [0, 0],
      "53": [0, 0],
      "54": [0, 0],
      "55": [0, 0]
    },
    inputSourceMap: {
      file: "/Users/rogerioresende/Desktop/Roteirar-ia/src/services/qualityGates/QualityGateOrchestrator.ts",
      mappings: "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",
      names: [],
      sources: ["/Users/rogerioresende/Desktop/Roteirar-ia/src/services/qualityGates/QualityGateOrchestrator.ts"],
      sourcesContent: ["// Quality Gate Orchestrator - Main integration and coordination system\nimport { DeploymentGateSystem } from './DeploymentGateSystem';\nimport { HealthMonitoringSystem } from './HealthMonitoringSystem';\nimport { AlertSystem } from './AlertSystem';\nimport { EvidenceCollector } from './EvidenceCollector';\nimport { EvidenceQualityGate } from './EvidenceQualityGate';\nimport { FunctionalityQualityGate } from './FunctionalityQualityGate';\n\ninterface QualityGateSystemStatus {\n  deploymentGate: 'active' | 'inactive' | 'error';\n  healthMonitoring: 'active' | 'inactive' | 'error';\n  alertSystem: 'active' | 'inactive' | 'error';\n  evidenceCollection: 'ready' | 'collecting' | 'error';\n  overallStatus: 'operational' | 'degraded' | 'critical';\n  timestamp: string;\n}\n\ninterface SystemHealthReport {\n  overall: 'healthy' | 'warning' | 'critical';\n  components: {\n    [key: string]: {\n      status: 'healthy' | 'warning' | 'critical';\n      details: any;\n      lastCheck: string;\n    };\n  };\n  metrics: {\n    deploymentApprovalRate: number;\n    alertResponseTime: number;\n    evidenceQuality: number;\n    systemUptime: number;\n  };\n  timestamp: string;\n}\n\nexport class QualityGateOrchestrator {\n  private deploymentGateSystem: DeploymentGateSystem;\n  private healthMonitoringSystem: HealthMonitoringSystem;\n  private alertSystem: AlertSystem;\n  private evidenceCollector: EvidenceCollector;\n  private evidenceQualityGate: EvidenceQualityGate;\n  private functionalityQualityGate: FunctionalityQualityGate;\n  \n  private isInitialized: boolean = false;\n  private initializationTime: number = 0;\n  \n  constructor() {\n    this.initializeSystems();\n  }\n  \n  private initializeSystems(): void {\n    const startTime = Date.now();\n    console.log('\uD83C\uDFAF Initializing Quality Gate Orchestrator...');\n    \n    try {\n      // Initialize core systems\n      this.deploymentGateSystem = new DeploymentGateSystem();\n      this.healthMonitoringSystem = this.deploymentGateSystem.getHealthMonitoringSystem();\n      this.alertSystem = this.deploymentGateSystem.getAlertSystem();\n      this.evidenceCollector = new EvidenceCollector();\n      this.evidenceQualityGate = new EvidenceQualityGate();\n      this.functionalityQualityGate = new FunctionalityQualityGate();\n      \n      // Setup system integration\n      this.setupSystemIntegration();\n      \n      this.initializationTime = Date.now() - startTime;\n      this.isInitialized = true;\n      \n      console.log(`\u2705 Quality Gate Orchestrator initialized in ${this.initializationTime}ms`);\n      \n      // Send initialization alert\n      this.alertSystem.triggerAlert({\n        type: 'quality_gate_system_initialized',\n        severity: 'low',\n        message: 'Quality Gate Orchestrator successfully initialized',\n        details: {\n          initializationTime: this.initializationTime,\n          components: ['DeploymentGate', 'HealthMonitoring', 'AlertSystem', 'EvidenceCollection']\n        },\n        timestamp: new Date().toISOString()\n      });\n      \n    } catch (error) {\n      console.error('\u274C Failed to initialize Quality Gate Orchestrator:', error);\n      \n      this.alertSystem?.triggerAlert({\n        type: 'quality_gate_system_initialization_failed',\n        severity: 'critical',\n        message: 'Quality Gate Orchestrator failed to initialize',\n        details: { error: error instanceof Error ? error.message : String(error) },\n        timestamp: new Date().toISOString()\n      });\n      \n      throw error;\n    }\n  }\n  \n  private setupSystemIntegration(): void {\n    // Setup health monitoring alerts\n    this.healthMonitoringSystem.onAlert((alert) => {\n      console.log(`\uD83D\uDCCA Health monitoring alert received: ${alert.type}`);\n    });\n    \n    // Start health monitoring by default\n    this.healthMonitoringSystem.startMonitoring();\n    \n    console.log('\uD83D\uDD17 System integration configured');\n  }\n  \n  // Main orchestration methods\n  \n  async performFullQualityValidation(): Promise<any> {\n    if (!this.isInitialized) {\n      throw new Error('Quality Gate Orchestrator not initialized');\n    }\n    \n    console.log('\uD83C\uDFAF Starting full quality validation...');\n    const startTime = Date.now();\n    \n    try {\n      // Step 1: Check system status\n      const systemStatus = await this.getSystemStatus();\n      if (systemStatus.overallStatus === 'critical') {\n        throw new Error('System status critical - cannot perform validation');\n      }\n      \n      // Step 2: Collect evidence\n      console.log('\uD83D\uDCCA Collecting evidence package...');\n      const evidencePackage = await this.evidenceCollector.collectEvidencePackage();\n      \n      // Step 3: Run quality gates\n      console.log('\uD83D\uDEAA Running quality gates...');\n      const [evidenceResult, functionalityResult] = await Promise.all([\n        this.evidenceQualityGate.validateEvidence(evidencePackage),\n        this.functionalityQualityGate.validateFunctionality()\n      ]);\n      \n      // Step 4: Get health status\n      const healthStatus = this.healthMonitoringSystem.getCurrentHealthStatus();\n      \n      // Step 5: Generate comprehensive report\n      const validationReport = {\n        overall: {\n          passed: evidenceResult.passed && functionalityResult.passed && \n                 (!healthStatus || healthStatus.overall !== 'critical'),\n          score: Math.round((evidenceResult.score + functionalityResult.score + \n                           (healthStatus?.score || 100)) / 3),\n          duration: Date.now() - startTime\n        },\n        evidence: evidenceResult,\n        functionality: functionalityResult,\n        health: healthStatus,\n        evidencePackage,\n        timestamp: new Date().toISOString()\n      };\n      \n      console.log(`\u2705 Full quality validation completed in ${validationReport.overall.duration}ms`);\n      \n      // Send validation summary alert\n      await this.alertSystem.triggerAlert({\n        type: 'quality_validation_completed',\n        severity: validationReport.overall.passed ? 'low' : 'medium',\n        message: `Quality validation ${validationReport.overall.passed ? 'passed' : 'failed'} (Score: ${validationReport.overall.score}%)`,\n        details: validationReport,\n        timestamp: new Date().toISOString()\n      });\n      \n      return validationReport;\n      \n    } catch (error) {\n      console.error('\u274C Full quality validation failed:', error);\n      \n      await this.alertSystem.triggerAlert({\n        type: 'quality_validation_failed',\n        severity: 'high',\n        message: 'Full quality validation encountered an error',\n        details: { error: error instanceof Error ? error.message : String(error) },\n        timestamp: new Date().toISOString()\n      });\n      \n      throw error;\n    }\n  }\n  \n  async validateForDeployment(): Promise<any> {\n    if (!this.isInitialized) {\n      throw new Error('Quality Gate Orchestrator not initialized');\n    }\n    \n    console.log('\uD83D\uDE80 Validating for deployment...');\n    \n    try {\n      const deploymentResult = await this.deploymentGateSystem.validateDeployment();\n      \n      console.log(`\uD83D\uDE80 Deployment validation ${deploymentResult.approved ? 'APPROVED' : 'BLOCKED'}`);\n      \n      return deploymentResult;\n      \n    } catch (error) {\n      console.error('\u274C Deployment validation failed:', error);\n      throw error;\n    }\n  }\n  \n  async getSystemStatus(): Promise<QualityGateSystemStatus> {\n    const status: QualityGateSystemStatus = {\n      deploymentGate: 'active',\n      healthMonitoring: this.healthMonitoringSystem.isMonitoringActive() ? 'active' : 'inactive',\n      alertSystem: 'active',\n      evidenceCollection: 'ready',\n      overallStatus: 'operational',\n      timestamp: new Date().toISOString()\n    };\n    \n    // Check health monitoring status\n    const healthStatus = this.healthMonitoringSystem.getCurrentHealthStatus();\n    if (healthStatus?.overall === 'critical') {\n      status.overallStatus = 'critical';\n    } else if (healthStatus?.overall === 'warning') {\n      status.overallStatus = 'degraded';\n    }\n    \n    return status;\n  }\n  \n  async getSystemHealthReport(): Promise<SystemHealthReport> {\n    const healthStatus = this.healthMonitoringSystem.getCurrentHealthStatus();\n    const deploymentStats = this.deploymentGateSystem.getDeploymentStats();\n    const alertStats = this.alertSystem.getAlertStats();\n    \n    const report: SystemHealthReport = {\n      overall: healthStatus?.overall || 'warning',\n      components: {\n        deploymentGate: {\n          status: deploymentStats.approvalRate > 80 ? 'healthy' : 'warning',\n          details: deploymentStats,\n          lastCheck: new Date().toISOString()\n        },\n        healthMonitoring: {\n          status: healthStatus?.overall || 'warning',\n          details: healthStatus,\n          lastCheck: healthStatus?.timestamp || new Date().toISOString()\n        },\n        alertSystem: {\n          status: alertStats.successRate > 95 ? 'healthy' : 'warning',\n          details: alertStats,\n          lastCheck: new Date().toISOString()\n        },\n        evidenceCollection: {\n          status: 'healthy',\n          details: { available: true, lastCollection: 'recent' },\n          lastCheck: new Date().toISOString()\n        }\n      },\n      metrics: {\n        deploymentApprovalRate: deploymentStats.approvalRate || 0,\n        alertResponseTime: alertStats.avgResponseTime || 0,\n        evidenceQuality: 95, // Would be calculated from recent evidence quality\n        systemUptime: this.getSystemUptime()\n      },\n      timestamp: new Date().toISOString()\n    };\n    \n    return report;\n  }\n  \n  // Demonstration and testing methods\n  \n  async runDemonstration(): Promise<void> {\n    console.log('\\n\uD83C\uDFAD STARTING QUALITY GATE SYSTEM DEMONSTRATION');\n    console.log('================================================');\n    \n    try {\n      // Step 1: System Status Check\n      console.log('\\n\uD83D\uDCCA Step 1: System Status Check');\n      const systemStatus = await this.getSystemStatus();\n      console.log('System Status:', systemStatus);\n      \n      // Step 2: Health Monitoring Demo\n      console.log('\\n\uD83D\uDC97 Step 2: Health Monitoring Demonstration');\n      if (!this.healthMonitoringSystem.isMonitoringActive()) {\n        this.healthMonitoringSystem.startMonitoring();\n        console.log('Health monitoring started...');\n        await new Promise(resolve => setTimeout(resolve, 3000)); // Wait 3 seconds\n      }\n      \n      const healthReport = await this.getSystemHealthReport();\n      console.log('Health Report Generated:', healthReport.overall);\n      \n      // Step 3: Evidence Collection Demo\n      console.log('\\n\uD83D\uDCCB Step 3: Evidence Collection Demonstration');\n      const evidencePackage = await this.evidenceCollector.collectEvidencePackage();\n      console.log(`Evidence collected: ${evidencePackage.screenshots.length} screenshots, ${evidencePackage.testResults.length} test results`);\n      \n      // Step 4: Quality Gates Demo\n      console.log('\\n\uD83D\uDEAA Step 4: Quality Gates Demonstration');\n      const qualityValidation = await this.performFullQualityValidation();\n      console.log(`Quality validation: ${qualityValidation.overall.passed ? 'PASSED' : 'FAILED'} (${qualityValidation.overall.score}%)`);\n      \n      // Step 5: Deployment Gate Demo\n      console.log('\\n\uD83D\uDE80 Step 5: Deployment Gate Demonstration');\n      const deploymentValidation = await this.validateForDeployment();\n      console.log(`Deployment: ${deploymentValidation.approved ? 'APPROVED \u2705' : 'BLOCKED \u274C'} (${deploymentValidation.overallScore}%)`);\n      \n      // Step 6: Alert System Demo\n      console.log('\\n\uD83D\uDCE2 Step 6: Alert System Demonstration');\n      await this.alertSystem.triggerAlert({\n        type: 'demonstration_alert',\n        severity: 'low',\n        message: 'This is a demonstration alert to show the alert system is working',\n        details: { demo: true, timestamp: new Date().toISOString() },\n        timestamp: new Date().toISOString()\n      });\n      \n      console.log('\\n\uD83C\uDF89 DEMONSTRATION COMPLETED SUCCESSFULLY');\n      console.log('=====================================');\n      \n      // Final summary\n      const finalStatus = await this.getSystemStatus();\n      console.log('\\n\uD83D\uDCCA Final System Status:', finalStatus.overallStatus);\n      console.log('All quality gate systems are operational and ready for production use.');\n      \n    } catch (error) {\n      console.error('\\n\u274C DEMONSTRATION FAILED:', error);\n      throw error;\n    }\n  }\n  \n  async runSystemTests(): Promise<{ passed: number; failed: number; total: number }> {\n    console.log('\\n\uD83E\uDDEA RUNNING SYSTEM TESTS');\n    console.log('========================');\n    \n    const tests = [\n      { name: 'System Initialization', test: () => this.testSystemInitialization() },\n      { name: 'Evidence Collection', test: () => this.testEvidenceCollection() },\n      { name: 'Quality Gates', test: () => this.testQualityGates() },\n      { name: 'Health Monitoring', test: () => this.testHealthMonitoring() },\n      { name: 'Alert System', test: () => this.testAlertSystem() },\n      { name: 'Deployment Gates', test: () => this.testDeploymentGates() }\n    ];\n    \n    let passed = 0;\n    let failed = 0;\n    \n    for (const test of tests) {\n      try {\n        console.log(`\\n\uD83E\uDDEA Testing: ${test.name}`);\n        await test.test();\n        console.log(`\u2705 ${test.name}: PASSED`);\n        passed++;\n      } catch (error) {\n        console.error(`\u274C ${test.name}: FAILED`, error);\n        failed++;\n      }\n    }\n    \n    const total = tests.length;\n    const successRate = (passed / total) * 100;\n    \n    console.log('\\n\uD83D\uDCCA TEST RESULTS SUMMARY');\n    console.log('=======================');\n    console.log(`Total Tests: ${total}`);\n    console.log(`Passed: ${passed}`);\n    console.log(`Failed: ${failed}`);\n    console.log(`Success Rate: ${successRate.toFixed(1)}%`);\n    \n    if (successRate >= 90) {\n      console.log('\uD83C\uDF89 System tests PASSED - Ready for production');\n    } else {\n      console.log('\u26A0\uFE0F System tests FAILED - Issues need to be addressed');\n    }\n    \n    return { passed, failed, total };\n  }\n  \n  // Individual test methods\n  private async testSystemInitialization(): Promise<void> {\n    if (!this.isInitialized) {\n      throw new Error('System not properly initialized');\n    }\n    if (this.initializationTime <= 0) {\n      throw new Error('Invalid initialization time');\n    }\n  }\n  \n  private async testEvidenceCollection(): Promise<void> {\n    const evidence = await this.evidenceCollector.collectEvidencePackage();\n    if (!evidence.screenshots || evidence.screenshots.length === 0) {\n      throw new Error('No screenshots collected');\n    }\n    if (!evidence.performanceMetrics) {\n      throw new Error('No performance metrics collected');\n    }\n  }\n  \n  private async testQualityGates(): Promise<void> {\n    const evidence = await this.evidenceCollector.collectEvidencePackage();\n    const evidenceResult = await this.evidenceQualityGate.validateEvidence(evidence);\n    const functionalityResult = await this.functionalityQualityGate.validateFunctionality();\n    \n    if (typeof evidenceResult.score !== 'number') {\n      throw new Error('Evidence gate not returning valid score');\n    }\n    if (typeof functionalityResult.score !== 'number') {\n      throw new Error('Functionality gate not returning valid score');\n    }\n  }\n  \n  private async testHealthMonitoring(): Promise<void> {\n    if (!this.healthMonitoringSystem.isMonitoringActive()) {\n      this.healthMonitoringSystem.startMonitoring();\n      await new Promise(resolve => setTimeout(resolve, 1000)); // Wait 1 second\n    }\n    \n    const healthStatus = this.healthMonitoringSystem.getCurrentHealthStatus();\n    if (!healthStatus) {\n      throw new Error('Health monitoring not providing status');\n    }\n  }\n  \n  private async testAlertSystem(): Promise<void> {\n    const testAlert = {\n      type: 'test_alert',\n      severity: 'low' as const,\n      message: 'Test alert for system validation',\n      details: { test: true },\n      timestamp: new Date().toISOString()\n    };\n    \n    await this.alertSystem.triggerAlert(testAlert);\n    \n    const alertHistory = this.alertSystem.getAlertHistory(1);\n    if (alertHistory.length === 0) {\n      throw new Error('Alert not recorded in history');\n    }\n  }\n  \n  private async testDeploymentGates(): Promise<void> {\n    const result = await this.deploymentGateSystem.validateDeployment();\n    if (typeof result.overallScore !== 'number') {\n      throw new Error('Deployment gate not returning valid score');\n    }\n    if (typeof result.approved !== 'boolean') {\n      throw new Error('Deployment gate not returning valid approval status');\n    }\n  }\n  \n  // Utility methods\n  private getSystemUptime(): number {\n    return this.initializationTime > 0 ? Date.now() - this.initializationTime : 0;\n  }\n  \n  // Public interface methods\n  public getDeploymentGateSystem(): DeploymentGateSystem {\n    return this.deploymentGateSystem;\n  }\n  \n  public getHealthMonitoringSystem(): HealthMonitoringSystem {\n    return this.healthMonitoringSystem;\n  }\n  \n  public getAlertSystem(): AlertSystem {\n    return this.alertSystem;\n  }\n  \n  public isSystemReady(): boolean {\n    return this.isInitialized;\n  }\n  \n  public async shutdown(): Promise<void> {\n    console.log('\uD83D\uDD04 Shutting down Quality Gate Orchestrator...');\n    \n    this.healthMonitoringSystem.stopMonitoring();\n    this.alertSystem.clearEscalations();\n    \n    await this.alertSystem.triggerAlert({\n      type: 'quality_gate_system_shutdown',\n      severity: 'low',\n      message: 'Quality Gate Orchestrator is shutting down',\n      details: { uptime: this.getSystemUptime() },\n      timestamp: new Date().toISOString()\n    });\n    \n    console.log('\u2705 Quality Gate Orchestrator shut down successfully');\n  }\n} "],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "e4515bc21609d51c4172667b53420a026288ee0b"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_10b5p3ovn1 = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_10b5p3ovn1();
var __awaiter =
/* istanbul ignore next */
(cov_10b5p3ovn1().s[0]++,
/* istanbul ignore next */
(cov_10b5p3ovn1().b[0][0]++, this) &&
/* istanbul ignore next */
(cov_10b5p3ovn1().b[0][1]++, this.__awaiter) ||
/* istanbul ignore next */
(cov_10b5p3ovn1().b[0][2]++, function (thisArg, _arguments, P, generator) {
  /* istanbul ignore next */
  cov_10b5p3ovn1().f[0]++;
  function adopt(value) {
    /* istanbul ignore next */
    cov_10b5p3ovn1().f[1]++;
    cov_10b5p3ovn1().s[1]++;
    return value instanceof P ?
    /* istanbul ignore next */
    (cov_10b5p3ovn1().b[1][0]++, value) :
    /* istanbul ignore next */
    (cov_10b5p3ovn1().b[1][1]++, new P(function (resolve) {
      /* istanbul ignore next */
      cov_10b5p3ovn1().f[2]++;
      cov_10b5p3ovn1().s[2]++;
      resolve(value);
    }));
  }
  /* istanbul ignore next */
  cov_10b5p3ovn1().s[3]++;
  return new (
  /* istanbul ignore next */
  (cov_10b5p3ovn1().b[2][0]++, P) ||
  /* istanbul ignore next */
  (cov_10b5p3ovn1().b[2][1]++, P = Promise))(function (resolve, reject) {
    /* istanbul ignore next */
    cov_10b5p3ovn1().f[3]++;
    function fulfilled(value) {
      /* istanbul ignore next */
      cov_10b5p3ovn1().f[4]++;
      cov_10b5p3ovn1().s[4]++;
      try {
        /* istanbul ignore next */
        cov_10b5p3ovn1().s[5]++;
        step(generator.next(value));
      } catch (e) {
        /* istanbul ignore next */
        cov_10b5p3ovn1().s[6]++;
        reject(e);
      }
    }
    function rejected(value) {
      /* istanbul ignore next */
      cov_10b5p3ovn1().f[5]++;
      cov_10b5p3ovn1().s[7]++;
      try {
        /* istanbul ignore next */
        cov_10b5p3ovn1().s[8]++;
        step(generator["throw"](value));
      } catch (e) {
        /* istanbul ignore next */
        cov_10b5p3ovn1().s[9]++;
        reject(e);
      }
    }
    function step(result) {
      /* istanbul ignore next */
      cov_10b5p3ovn1().f[6]++;
      cov_10b5p3ovn1().s[10]++;
      result.done ?
      /* istanbul ignore next */
      (cov_10b5p3ovn1().b[3][0]++, resolve(result.value)) :
      /* istanbul ignore next */
      (cov_10b5p3ovn1().b[3][1]++, adopt(result.value).then(fulfilled, rejected));
    }
    /* istanbul ignore next */
    cov_10b5p3ovn1().s[11]++;
    step((generator = generator.apply(thisArg,
    /* istanbul ignore next */
    (cov_10b5p3ovn1().b[4][0]++, _arguments) ||
    /* istanbul ignore next */
    (cov_10b5p3ovn1().b[4][1]++, []))).next());
  });
}));
/* istanbul ignore next */
cov_10b5p3ovn1().s[12]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_10b5p3ovn1().s[13]++;
exports.QualityGateOrchestrator = void 0;
// Quality Gate Orchestrator - Main integration and coordination system
const DeploymentGateSystem_1 =
/* istanbul ignore next */
(cov_10b5p3ovn1().s[14]++, require("./DeploymentGateSystem"));
const EvidenceCollector_1 =
/* istanbul ignore next */
(cov_10b5p3ovn1().s[15]++, require("./EvidenceCollector"));
const EvidenceQualityGate_1 =
/* istanbul ignore next */
(cov_10b5p3ovn1().s[16]++, require("./EvidenceQualityGate"));
const FunctionalityQualityGate_1 =
/* istanbul ignore next */
(cov_10b5p3ovn1().s[17]++, require("./FunctionalityQualityGate"));
class QualityGateOrchestrator {
  constructor() {
    /* istanbul ignore next */
    cov_10b5p3ovn1().f[7]++;
    cov_10b5p3ovn1().s[18]++;
    this.isInitialized = false;
    /* istanbul ignore next */
    cov_10b5p3ovn1().s[19]++;
    this.initializationTime = 0;
    /* istanbul ignore next */
    cov_10b5p3ovn1().s[20]++;
    this.initializeSystems();
  }
  initializeSystems() {
    /* istanbul ignore next */
    cov_10b5p3ovn1().f[8]++;
    var _a;
    const startTime =
    /* istanbul ignore next */
    (cov_10b5p3ovn1().s[21]++, Date.now());
    /* istanbul ignore next */
    cov_10b5p3ovn1().s[22]++;
    console.log('🎯 Initializing Quality Gate Orchestrator...');
    /* istanbul ignore next */
    cov_10b5p3ovn1().s[23]++;
    try {
      /* istanbul ignore next */
      cov_10b5p3ovn1().s[24]++;
      // Initialize core systems
      this.deploymentGateSystem = new DeploymentGateSystem_1.DeploymentGateSystem();
      /* istanbul ignore next */
      cov_10b5p3ovn1().s[25]++;
      this.healthMonitoringSystem = this.deploymentGateSystem.getHealthMonitoringSystem();
      /* istanbul ignore next */
      cov_10b5p3ovn1().s[26]++;
      this.alertSystem = this.deploymentGateSystem.getAlertSystem();
      /* istanbul ignore next */
      cov_10b5p3ovn1().s[27]++;
      this.evidenceCollector = new EvidenceCollector_1.EvidenceCollector();
      /* istanbul ignore next */
      cov_10b5p3ovn1().s[28]++;
      this.evidenceQualityGate = new EvidenceQualityGate_1.EvidenceQualityGate();
      /* istanbul ignore next */
      cov_10b5p3ovn1().s[29]++;
      this.functionalityQualityGate = new FunctionalityQualityGate_1.FunctionalityQualityGate();
      // Setup system integration
      /* istanbul ignore next */
      cov_10b5p3ovn1().s[30]++;
      this.setupSystemIntegration();
      /* istanbul ignore next */
      cov_10b5p3ovn1().s[31]++;
      this.initializationTime = Date.now() - startTime;
      /* istanbul ignore next */
      cov_10b5p3ovn1().s[32]++;
      this.isInitialized = true;
      /* istanbul ignore next */
      cov_10b5p3ovn1().s[33]++;
      console.log(`✅ Quality Gate Orchestrator initialized in ${this.initializationTime}ms`);
      // Send initialization alert
      /* istanbul ignore next */
      cov_10b5p3ovn1().s[34]++;
      this.alertSystem.triggerAlert({
        type: 'quality_gate_system_initialized',
        severity: 'low',
        message: 'Quality Gate Orchestrator successfully initialized',
        details: {
          initializationTime: this.initializationTime,
          components: ['DeploymentGate', 'HealthMonitoring', 'AlertSystem', 'EvidenceCollection']
        },
        timestamp: new Date().toISOString()
      });
    } catch (error) {
      /* istanbul ignore next */
      cov_10b5p3ovn1().s[35]++;
      console.error('❌ Failed to initialize Quality Gate Orchestrator:', error);
      /* istanbul ignore next */
      cov_10b5p3ovn1().s[36]++;
      /* istanbul ignore next */
      (cov_10b5p3ovn1().b[6][0]++, (_a = this.alertSystem) === null) ||
      /* istanbul ignore next */
      (cov_10b5p3ovn1().b[6][1]++, _a === void 0) ?
      /* istanbul ignore next */
      (cov_10b5p3ovn1().b[5][0]++, void 0) :
      /* istanbul ignore next */
      (cov_10b5p3ovn1().b[5][1]++, _a.triggerAlert({
        type: 'quality_gate_system_initialization_failed',
        severity: 'critical',
        message: 'Quality Gate Orchestrator failed to initialize',
        details: {
          error: error instanceof Error ?
          /* istanbul ignore next */
          (cov_10b5p3ovn1().b[7][0]++, error.message) :
          /* istanbul ignore next */
          (cov_10b5p3ovn1().b[7][1]++, String(error))
        },
        timestamp: new Date().toISOString()
      }));
      /* istanbul ignore next */
      cov_10b5p3ovn1().s[37]++;
      throw error;
    }
  }
  setupSystemIntegration() {
    /* istanbul ignore next */
    cov_10b5p3ovn1().f[9]++;
    cov_10b5p3ovn1().s[38]++;
    // Setup health monitoring alerts
    this.healthMonitoringSystem.onAlert(alert => {
      /* istanbul ignore next */
      cov_10b5p3ovn1().f[10]++;
      cov_10b5p3ovn1().s[39]++;
      console.log(`📊 Health monitoring alert received: ${alert.type}`);
    });
    // Start health monitoring by default
    /* istanbul ignore next */
    cov_10b5p3ovn1().s[40]++;
    this.healthMonitoringSystem.startMonitoring();
    /* istanbul ignore next */
    cov_10b5p3ovn1().s[41]++;
    console.log('🔗 System integration configured');
  }
  // Main orchestration methods
  performFullQualityValidation() {
    /* istanbul ignore next */
    cov_10b5p3ovn1().f[11]++;
    cov_10b5p3ovn1().s[42]++;
    return __awaiter(this, void 0, void 0, function* () {
      /* istanbul ignore next */
      cov_10b5p3ovn1().f[12]++;
      cov_10b5p3ovn1().s[43]++;
      if (!this.isInitialized) {
        /* istanbul ignore next */
        cov_10b5p3ovn1().b[8][0]++;
        cov_10b5p3ovn1().s[44]++;
        throw new Error('Quality Gate Orchestrator not initialized');
      } else
      /* istanbul ignore next */
      {
        cov_10b5p3ovn1().b[8][1]++;
      }
      cov_10b5p3ovn1().s[45]++;
      console.log('🎯 Starting full quality validation...');
      const startTime =
      /* istanbul ignore next */
      (cov_10b5p3ovn1().s[46]++, Date.now());
      /* istanbul ignore next */
      cov_10b5p3ovn1().s[47]++;
      try {
        // Step 1: Check system status
        const systemStatus =
        /* istanbul ignore next */
        (cov_10b5p3ovn1().s[48]++, yield this.getSystemStatus());
        /* istanbul ignore next */
        cov_10b5p3ovn1().s[49]++;
        if (systemStatus.overallStatus === 'critical') {
          /* istanbul ignore next */
          cov_10b5p3ovn1().b[9][0]++;
          cov_10b5p3ovn1().s[50]++;
          throw new Error('System status critical - cannot perform validation');
        } else
        /* istanbul ignore next */
        {
          cov_10b5p3ovn1().b[9][1]++;
        }
        // Step 2: Collect evidence
        cov_10b5p3ovn1().s[51]++;
        console.log('📊 Collecting evidence package...');
        const evidencePackage =
        /* istanbul ignore next */
        (cov_10b5p3ovn1().s[52]++, yield this.evidenceCollector.collectEvidencePackage());
        // Step 3: Run quality gates
        /* istanbul ignore next */
        cov_10b5p3ovn1().s[53]++;
        console.log('🚪 Running quality gates...');
        const [evidenceResult, functionalityResult] =
        /* istanbul ignore next */
        (cov_10b5p3ovn1().s[54]++, yield Promise.all([this.evidenceQualityGate.validateEvidence(evidencePackage), this.functionalityQualityGate.validateFunctionality()]));
        // Step 4: Get health status
        const healthStatus =
        /* istanbul ignore next */
        (cov_10b5p3ovn1().s[55]++, this.healthMonitoringSystem.getCurrentHealthStatus());
        // Step 5: Generate comprehensive report
        const validationReport =
        /* istanbul ignore next */
        (cov_10b5p3ovn1().s[56]++, {
          overall: {
            passed:
            /* istanbul ignore next */
            (cov_10b5p3ovn1().b[10][0]++, evidenceResult.passed) &&
            /* istanbul ignore next */
            (cov_10b5p3ovn1().b[10][1]++, functionalityResult.passed) && (
            /* istanbul ignore next */
            (cov_10b5p3ovn1().b[10][2]++, !healthStatus) ||
            /* istanbul ignore next */
            (cov_10b5p3ovn1().b[10][3]++, healthStatus.overall !== 'critical')),
            score: Math.round((evidenceResult.score + functionalityResult.score + (
            /* istanbul ignore next */
            (cov_10b5p3ovn1().b[11][0]++,
            /* istanbul ignore next */
            (cov_10b5p3ovn1().b[13][0]++, healthStatus === null) ||
            /* istanbul ignore next */
            (cov_10b5p3ovn1().b[13][1]++, healthStatus === void 0) ?
            /* istanbul ignore next */
            (cov_10b5p3ovn1().b[12][0]++, void 0) :
            /* istanbul ignore next */
            (cov_10b5p3ovn1().b[12][1]++, healthStatus.score)) ||
            /* istanbul ignore next */
            (cov_10b5p3ovn1().b[11][1]++, 100))) / 3),
            duration: Date.now() - startTime
          },
          evidence: evidenceResult,
          functionality: functionalityResult,
          health: healthStatus,
          evidencePackage,
          timestamp: new Date().toISOString()
        });
        /* istanbul ignore next */
        cov_10b5p3ovn1().s[57]++;
        console.log(`✅ Full quality validation completed in ${validationReport.overall.duration}ms`);
        // Send validation summary alert
        /* istanbul ignore next */
        cov_10b5p3ovn1().s[58]++;
        yield this.alertSystem.triggerAlert({
          type: 'quality_validation_completed',
          severity: validationReport.overall.passed ?
          /* istanbul ignore next */
          (cov_10b5p3ovn1().b[14][0]++, 'low') :
          /* istanbul ignore next */
          (cov_10b5p3ovn1().b[14][1]++, 'medium'),
          message: `Quality validation ${validationReport.overall.passed ?
          /* istanbul ignore next */
          (cov_10b5p3ovn1().b[15][0]++, 'passed') :
          /* istanbul ignore next */
          (cov_10b5p3ovn1().b[15][1]++, 'failed')} (Score: ${validationReport.overall.score}%)`,
          details: validationReport,
          timestamp: new Date().toISOString()
        });
        /* istanbul ignore next */
        cov_10b5p3ovn1().s[59]++;
        return validationReport;
      } catch (error) {
        /* istanbul ignore next */
        cov_10b5p3ovn1().s[60]++;
        console.error('❌ Full quality validation failed:', error);
        /* istanbul ignore next */
        cov_10b5p3ovn1().s[61]++;
        yield this.alertSystem.triggerAlert({
          type: 'quality_validation_failed',
          severity: 'high',
          message: 'Full quality validation encountered an error',
          details: {
            error: error instanceof Error ?
            /* istanbul ignore next */
            (cov_10b5p3ovn1().b[16][0]++, error.message) :
            /* istanbul ignore next */
            (cov_10b5p3ovn1().b[16][1]++, String(error))
          },
          timestamp: new Date().toISOString()
        });
        /* istanbul ignore next */
        cov_10b5p3ovn1().s[62]++;
        throw error;
      }
    });
  }
  validateForDeployment() {
    /* istanbul ignore next */
    cov_10b5p3ovn1().f[13]++;
    cov_10b5p3ovn1().s[63]++;
    return __awaiter(this, void 0, void 0, function* () {
      /* istanbul ignore next */
      cov_10b5p3ovn1().f[14]++;
      cov_10b5p3ovn1().s[64]++;
      if (!this.isInitialized) {
        /* istanbul ignore next */
        cov_10b5p3ovn1().b[17][0]++;
        cov_10b5p3ovn1().s[65]++;
        throw new Error('Quality Gate Orchestrator not initialized');
      } else
      /* istanbul ignore next */
      {
        cov_10b5p3ovn1().b[17][1]++;
      }
      cov_10b5p3ovn1().s[66]++;
      console.log('🚀 Validating for deployment...');
      /* istanbul ignore next */
      cov_10b5p3ovn1().s[67]++;
      try {
        const deploymentResult =
        /* istanbul ignore next */
        (cov_10b5p3ovn1().s[68]++, yield this.deploymentGateSystem.validateDeployment());
        /* istanbul ignore next */
        cov_10b5p3ovn1().s[69]++;
        console.log(`🚀 Deployment validation ${deploymentResult.approved ?
        /* istanbul ignore next */
        (cov_10b5p3ovn1().b[18][0]++, 'APPROVED') :
        /* istanbul ignore next */
        (cov_10b5p3ovn1().b[18][1]++, 'BLOCKED')}`);
        /* istanbul ignore next */
        cov_10b5p3ovn1().s[70]++;
        return deploymentResult;
      } catch (error) {
        /* istanbul ignore next */
        cov_10b5p3ovn1().s[71]++;
        console.error('❌ Deployment validation failed:', error);
        /* istanbul ignore next */
        cov_10b5p3ovn1().s[72]++;
        throw error;
      }
    });
  }
  getSystemStatus() {
    /* istanbul ignore next */
    cov_10b5p3ovn1().f[15]++;
    cov_10b5p3ovn1().s[73]++;
    return __awaiter(this, void 0, void 0, function* () {
      /* istanbul ignore next */
      cov_10b5p3ovn1().f[16]++;
      const status =
      /* istanbul ignore next */
      (cov_10b5p3ovn1().s[74]++, {
        deploymentGate: 'active',
        healthMonitoring: this.healthMonitoringSystem.isMonitoringActive() ?
        /* istanbul ignore next */
        (cov_10b5p3ovn1().b[19][0]++, 'active') :
        /* istanbul ignore next */
        (cov_10b5p3ovn1().b[19][1]++, 'inactive'),
        alertSystem: 'active',
        evidenceCollection: 'ready',
        overallStatus: 'operational',
        timestamp: new Date().toISOString()
      });
      // Check health monitoring status
      const healthStatus =
      /* istanbul ignore next */
      (cov_10b5p3ovn1().s[75]++, this.healthMonitoringSystem.getCurrentHealthStatus());
      /* istanbul ignore next */
      cov_10b5p3ovn1().s[76]++;
      if ((
      /* istanbul ignore next */
      (cov_10b5p3ovn1().b[22][0]++, healthStatus === null) ||
      /* istanbul ignore next */
      (cov_10b5p3ovn1().b[22][1]++, healthStatus === void 0) ?
      /* istanbul ignore next */
      (cov_10b5p3ovn1().b[21][0]++, void 0) :
      /* istanbul ignore next */
      (cov_10b5p3ovn1().b[21][1]++, healthStatus.overall)) === 'critical') {
        /* istanbul ignore next */
        cov_10b5p3ovn1().b[20][0]++;
        cov_10b5p3ovn1().s[77]++;
        status.overallStatus = 'critical';
      } else {
        /* istanbul ignore next */
        cov_10b5p3ovn1().b[20][1]++;
        cov_10b5p3ovn1().s[78]++;
        if ((
        /* istanbul ignore next */
        (cov_10b5p3ovn1().b[25][0]++, healthStatus === null) ||
        /* istanbul ignore next */
        (cov_10b5p3ovn1().b[25][1]++, healthStatus === void 0) ?
        /* istanbul ignore next */
        (cov_10b5p3ovn1().b[24][0]++, void 0) :
        /* istanbul ignore next */
        (cov_10b5p3ovn1().b[24][1]++, healthStatus.overall)) === 'warning') {
          /* istanbul ignore next */
          cov_10b5p3ovn1().b[23][0]++;
          cov_10b5p3ovn1().s[79]++;
          status.overallStatus = 'degraded';
        } else
        /* istanbul ignore next */
        {
          cov_10b5p3ovn1().b[23][1]++;
        }
      }
      /* istanbul ignore next */
      cov_10b5p3ovn1().s[80]++;
      return status;
    });
  }
  getSystemHealthReport() {
    /* istanbul ignore next */
    cov_10b5p3ovn1().f[17]++;
    cov_10b5p3ovn1().s[81]++;
    return __awaiter(this, void 0, void 0, function* () {
      /* istanbul ignore next */
      cov_10b5p3ovn1().f[18]++;
      const healthStatus =
      /* istanbul ignore next */
      (cov_10b5p3ovn1().s[82]++, this.healthMonitoringSystem.getCurrentHealthStatus());
      const deploymentStats =
      /* istanbul ignore next */
      (cov_10b5p3ovn1().s[83]++, this.deploymentGateSystem.getDeploymentStats());
      const alertStats =
      /* istanbul ignore next */
      (cov_10b5p3ovn1().s[84]++, this.alertSystem.getAlertStats());
      const report =
      /* istanbul ignore next */
      (cov_10b5p3ovn1().s[85]++, {
        overall:
        /* istanbul ignore next */
        (cov_10b5p3ovn1().b[26][0]++,
        /* istanbul ignore next */
        (cov_10b5p3ovn1().b[28][0]++, healthStatus === null) ||
        /* istanbul ignore next */
        (cov_10b5p3ovn1().b[28][1]++, healthStatus === void 0) ?
        /* istanbul ignore next */
        (cov_10b5p3ovn1().b[27][0]++, void 0) :
        /* istanbul ignore next */
        (cov_10b5p3ovn1().b[27][1]++, healthStatus.overall)) ||
        /* istanbul ignore next */
        (cov_10b5p3ovn1().b[26][1]++, 'warning'),
        components: {
          deploymentGate: {
            status: deploymentStats.approvalRate > 80 ?
            /* istanbul ignore next */
            (cov_10b5p3ovn1().b[29][0]++, 'healthy') :
            /* istanbul ignore next */
            (cov_10b5p3ovn1().b[29][1]++, 'warning'),
            details: deploymentStats,
            lastCheck: new Date().toISOString()
          },
          healthMonitoring: {
            status:
            /* istanbul ignore next */
            (cov_10b5p3ovn1().b[30][0]++,
            /* istanbul ignore next */
            (cov_10b5p3ovn1().b[32][0]++, healthStatus === null) ||
            /* istanbul ignore next */
            (cov_10b5p3ovn1().b[32][1]++, healthStatus === void 0) ?
            /* istanbul ignore next */
            (cov_10b5p3ovn1().b[31][0]++, void 0) :
            /* istanbul ignore next */
            (cov_10b5p3ovn1().b[31][1]++, healthStatus.overall)) ||
            /* istanbul ignore next */
            (cov_10b5p3ovn1().b[30][1]++, 'warning'),
            details: healthStatus,
            lastCheck:
            /* istanbul ignore next */
            (cov_10b5p3ovn1().b[33][0]++,
            /* istanbul ignore next */
            (cov_10b5p3ovn1().b[35][0]++, healthStatus === null) ||
            /* istanbul ignore next */
            (cov_10b5p3ovn1().b[35][1]++, healthStatus === void 0) ?
            /* istanbul ignore next */
            (cov_10b5p3ovn1().b[34][0]++, void 0) :
            /* istanbul ignore next */
            (cov_10b5p3ovn1().b[34][1]++, healthStatus.timestamp)) ||
            /* istanbul ignore next */
            (cov_10b5p3ovn1().b[33][1]++, new Date().toISOString())
          },
          alertSystem: {
            status: alertStats.successRate > 95 ?
            /* istanbul ignore next */
            (cov_10b5p3ovn1().b[36][0]++, 'healthy') :
            /* istanbul ignore next */
            (cov_10b5p3ovn1().b[36][1]++, 'warning'),
            details: alertStats,
            lastCheck: new Date().toISOString()
          },
          evidenceCollection: {
            status: 'healthy',
            details: {
              available: true,
              lastCollection: 'recent'
            },
            lastCheck: new Date().toISOString()
          }
        },
        metrics: {
          deploymentApprovalRate:
          /* istanbul ignore next */
          (cov_10b5p3ovn1().b[37][0]++, deploymentStats.approvalRate) ||
          /* istanbul ignore next */
          (cov_10b5p3ovn1().b[37][1]++, 0),
          alertResponseTime:
          /* istanbul ignore next */
          (cov_10b5p3ovn1().b[38][0]++, alertStats.avgResponseTime) ||
          /* istanbul ignore next */
          (cov_10b5p3ovn1().b[38][1]++, 0),
          evidenceQuality: 95,
          // Would be calculated from recent evidence quality
          systemUptime: this.getSystemUptime()
        },
        timestamp: new Date().toISOString()
      });
      /* istanbul ignore next */
      cov_10b5p3ovn1().s[86]++;
      return report;
    });
  }
  // Demonstration and testing methods
  runDemonstration() {
    /* istanbul ignore next */
    cov_10b5p3ovn1().f[19]++;
    cov_10b5p3ovn1().s[87]++;
    return __awaiter(this, void 0, void 0, function* () {
      /* istanbul ignore next */
      cov_10b5p3ovn1().f[20]++;
      cov_10b5p3ovn1().s[88]++;
      console.log('\n🎭 STARTING QUALITY GATE SYSTEM DEMONSTRATION');
      /* istanbul ignore next */
      cov_10b5p3ovn1().s[89]++;
      console.log('================================================');
      /* istanbul ignore next */
      cov_10b5p3ovn1().s[90]++;
      try {
        /* istanbul ignore next */
        cov_10b5p3ovn1().s[91]++;
        // Step 1: System Status Check
        console.log('\n📊 Step 1: System Status Check');
        const systemStatus =
        /* istanbul ignore next */
        (cov_10b5p3ovn1().s[92]++, yield this.getSystemStatus());
        /* istanbul ignore next */
        cov_10b5p3ovn1().s[93]++;
        console.log('System Status:', systemStatus);
        // Step 2: Health Monitoring Demo
        /* istanbul ignore next */
        cov_10b5p3ovn1().s[94]++;
        console.log('\n💗 Step 2: Health Monitoring Demonstration');
        /* istanbul ignore next */
        cov_10b5p3ovn1().s[95]++;
        if (!this.healthMonitoringSystem.isMonitoringActive()) {
          /* istanbul ignore next */
          cov_10b5p3ovn1().b[39][0]++;
          cov_10b5p3ovn1().s[96]++;
          this.healthMonitoringSystem.startMonitoring();
          /* istanbul ignore next */
          cov_10b5p3ovn1().s[97]++;
          console.log('Health monitoring started...');
          /* istanbul ignore next */
          cov_10b5p3ovn1().s[98]++;
          yield new Promise(resolve => {
            /* istanbul ignore next */
            cov_10b5p3ovn1().f[21]++;
            cov_10b5p3ovn1().s[99]++;
            return setTimeout(resolve, 3000);
          }); // Wait 3 seconds
        } else
        /* istanbul ignore next */
        {
          cov_10b5p3ovn1().b[39][1]++;
        }
        const healthReport =
        /* istanbul ignore next */
        (cov_10b5p3ovn1().s[100]++, yield this.getSystemHealthReport());
        /* istanbul ignore next */
        cov_10b5p3ovn1().s[101]++;
        console.log('Health Report Generated:', healthReport.overall);
        // Step 3: Evidence Collection Demo
        /* istanbul ignore next */
        cov_10b5p3ovn1().s[102]++;
        console.log('\n📋 Step 3: Evidence Collection Demonstration');
        const evidencePackage =
        /* istanbul ignore next */
        (cov_10b5p3ovn1().s[103]++, yield this.evidenceCollector.collectEvidencePackage());
        /* istanbul ignore next */
        cov_10b5p3ovn1().s[104]++;
        console.log(`Evidence collected: ${evidencePackage.screenshots.length} screenshots, ${evidencePackage.testResults.length} test results`);
        // Step 4: Quality Gates Demo
        /* istanbul ignore next */
        cov_10b5p3ovn1().s[105]++;
        console.log('\n🚪 Step 4: Quality Gates Demonstration');
        const qualityValidation =
        /* istanbul ignore next */
        (cov_10b5p3ovn1().s[106]++, yield this.performFullQualityValidation());
        /* istanbul ignore next */
        cov_10b5p3ovn1().s[107]++;
        console.log(`Quality validation: ${qualityValidation.overall.passed ?
        /* istanbul ignore next */
        (cov_10b5p3ovn1().b[40][0]++, 'PASSED') :
        /* istanbul ignore next */
        (cov_10b5p3ovn1().b[40][1]++, 'FAILED')} (${qualityValidation.overall.score}%)`);
        // Step 5: Deployment Gate Demo
        /* istanbul ignore next */
        cov_10b5p3ovn1().s[108]++;
        console.log('\n🚀 Step 5: Deployment Gate Demonstration');
        const deploymentValidation =
        /* istanbul ignore next */
        (cov_10b5p3ovn1().s[109]++, yield this.validateForDeployment());
        /* istanbul ignore next */
        cov_10b5p3ovn1().s[110]++;
        console.log(`Deployment: ${deploymentValidation.approved ?
        /* istanbul ignore next */
        (cov_10b5p3ovn1().b[41][0]++, 'APPROVED ✅') :
        /* istanbul ignore next */
        (cov_10b5p3ovn1().b[41][1]++, 'BLOCKED ❌')} (${deploymentValidation.overallScore}%)`);
        // Step 6: Alert System Demo
        /* istanbul ignore next */
        cov_10b5p3ovn1().s[111]++;
        console.log('\n📢 Step 6: Alert System Demonstration');
        /* istanbul ignore next */
        cov_10b5p3ovn1().s[112]++;
        yield this.alertSystem.triggerAlert({
          type: 'demonstration_alert',
          severity: 'low',
          message: 'This is a demonstration alert to show the alert system is working',
          details: {
            demo: true,
            timestamp: new Date().toISOString()
          },
          timestamp: new Date().toISOString()
        });
        /* istanbul ignore next */
        cov_10b5p3ovn1().s[113]++;
        console.log('\n🎉 DEMONSTRATION COMPLETED SUCCESSFULLY');
        /* istanbul ignore next */
        cov_10b5p3ovn1().s[114]++;
        console.log('=====================================');
        // Final summary
        const finalStatus =
        /* istanbul ignore next */
        (cov_10b5p3ovn1().s[115]++, yield this.getSystemStatus());
        /* istanbul ignore next */
        cov_10b5p3ovn1().s[116]++;
        console.log('\n📊 Final System Status:', finalStatus.overallStatus);
        /* istanbul ignore next */
        cov_10b5p3ovn1().s[117]++;
        console.log('All quality gate systems are operational and ready for production use.');
      } catch (error) {
        /* istanbul ignore next */
        cov_10b5p3ovn1().s[118]++;
        console.error('\n❌ DEMONSTRATION FAILED:', error);
        /* istanbul ignore next */
        cov_10b5p3ovn1().s[119]++;
        throw error;
      }
    });
  }
  runSystemTests() {
    /* istanbul ignore next */
    cov_10b5p3ovn1().f[22]++;
    cov_10b5p3ovn1().s[120]++;
    return __awaiter(this, void 0, void 0, function* () {
      /* istanbul ignore next */
      cov_10b5p3ovn1().f[23]++;
      cov_10b5p3ovn1().s[121]++;
      console.log('\n🧪 RUNNING SYSTEM TESTS');
      /* istanbul ignore next */
      cov_10b5p3ovn1().s[122]++;
      console.log('========================');
      const tests =
      /* istanbul ignore next */
      (cov_10b5p3ovn1().s[123]++, [{
        name: 'System Initialization',
        test: () => {
          /* istanbul ignore next */
          cov_10b5p3ovn1().f[24]++;
          cov_10b5p3ovn1().s[124]++;
          return this.testSystemInitialization();
        }
      }, {
        name: 'Evidence Collection',
        test: () => {
          /* istanbul ignore next */
          cov_10b5p3ovn1().f[25]++;
          cov_10b5p3ovn1().s[125]++;
          return this.testEvidenceCollection();
        }
      }, {
        name: 'Quality Gates',
        test: () => {
          /* istanbul ignore next */
          cov_10b5p3ovn1().f[26]++;
          cov_10b5p3ovn1().s[126]++;
          return this.testQualityGates();
        }
      }, {
        name: 'Health Monitoring',
        test: () => {
          /* istanbul ignore next */
          cov_10b5p3ovn1().f[27]++;
          cov_10b5p3ovn1().s[127]++;
          return this.testHealthMonitoring();
        }
      }, {
        name: 'Alert System',
        test: () => {
          /* istanbul ignore next */
          cov_10b5p3ovn1().f[28]++;
          cov_10b5p3ovn1().s[128]++;
          return this.testAlertSystem();
        }
      }, {
        name: 'Deployment Gates',
        test: () => {
          /* istanbul ignore next */
          cov_10b5p3ovn1().f[29]++;
          cov_10b5p3ovn1().s[129]++;
          return this.testDeploymentGates();
        }
      }]);
      let passed =
      /* istanbul ignore next */
      (cov_10b5p3ovn1().s[130]++, 0);
      let failed =
      /* istanbul ignore next */
      (cov_10b5p3ovn1().s[131]++, 0);
      /* istanbul ignore next */
      cov_10b5p3ovn1().s[132]++;
      for (const test of tests) {
        /* istanbul ignore next */
        cov_10b5p3ovn1().s[133]++;
        try {
          /* istanbul ignore next */
          cov_10b5p3ovn1().s[134]++;
          console.log(`\n🧪 Testing: ${test.name}`);
          /* istanbul ignore next */
          cov_10b5p3ovn1().s[135]++;
          yield test.test();
          /* istanbul ignore next */
          cov_10b5p3ovn1().s[136]++;
          console.log(`✅ ${test.name}: PASSED`);
          /* istanbul ignore next */
          cov_10b5p3ovn1().s[137]++;
          passed++;
        } catch (error) {
          /* istanbul ignore next */
          cov_10b5p3ovn1().s[138]++;
          console.error(`❌ ${test.name}: FAILED`, error);
          /* istanbul ignore next */
          cov_10b5p3ovn1().s[139]++;
          failed++;
        }
      }
      const total =
      /* istanbul ignore next */
      (cov_10b5p3ovn1().s[140]++, tests.length);
      const successRate =
      /* istanbul ignore next */
      (cov_10b5p3ovn1().s[141]++, passed / total * 100);
      /* istanbul ignore next */
      cov_10b5p3ovn1().s[142]++;
      console.log('\n📊 TEST RESULTS SUMMARY');
      /* istanbul ignore next */
      cov_10b5p3ovn1().s[143]++;
      console.log('=======================');
      /* istanbul ignore next */
      cov_10b5p3ovn1().s[144]++;
      console.log(`Total Tests: ${total}`);
      /* istanbul ignore next */
      cov_10b5p3ovn1().s[145]++;
      console.log(`Passed: ${passed}`);
      /* istanbul ignore next */
      cov_10b5p3ovn1().s[146]++;
      console.log(`Failed: ${failed}`);
      /* istanbul ignore next */
      cov_10b5p3ovn1().s[147]++;
      console.log(`Success Rate: ${successRate.toFixed(1)}%`);
      /* istanbul ignore next */
      cov_10b5p3ovn1().s[148]++;
      if (successRate >= 90) {
        /* istanbul ignore next */
        cov_10b5p3ovn1().b[42][0]++;
        cov_10b5p3ovn1().s[149]++;
        console.log('🎉 System tests PASSED - Ready for production');
      } else {
        /* istanbul ignore next */
        cov_10b5p3ovn1().b[42][1]++;
        cov_10b5p3ovn1().s[150]++;
        console.log('⚠️ System tests FAILED - Issues need to be addressed');
      }
      /* istanbul ignore next */
      cov_10b5p3ovn1().s[151]++;
      return {
        passed,
        failed,
        total
      };
    });
  }
  // Individual test methods
  testSystemInitialization() {
    /* istanbul ignore next */
    cov_10b5p3ovn1().f[30]++;
    cov_10b5p3ovn1().s[152]++;
    return __awaiter(this, void 0, void 0, function* () {
      /* istanbul ignore next */
      cov_10b5p3ovn1().f[31]++;
      cov_10b5p3ovn1().s[153]++;
      if (!this.isInitialized) {
        /* istanbul ignore next */
        cov_10b5p3ovn1().b[43][0]++;
        cov_10b5p3ovn1().s[154]++;
        throw new Error('System not properly initialized');
      } else
      /* istanbul ignore next */
      {
        cov_10b5p3ovn1().b[43][1]++;
      }
      cov_10b5p3ovn1().s[155]++;
      if (this.initializationTime <= 0) {
        /* istanbul ignore next */
        cov_10b5p3ovn1().b[44][0]++;
        cov_10b5p3ovn1().s[156]++;
        throw new Error('Invalid initialization time');
      } else
      /* istanbul ignore next */
      {
        cov_10b5p3ovn1().b[44][1]++;
      }
    });
  }
  testEvidenceCollection() {
    /* istanbul ignore next */
    cov_10b5p3ovn1().f[32]++;
    cov_10b5p3ovn1().s[157]++;
    return __awaiter(this, void 0, void 0, function* () {
      /* istanbul ignore next */
      cov_10b5p3ovn1().f[33]++;
      const evidence =
      /* istanbul ignore next */
      (cov_10b5p3ovn1().s[158]++, yield this.evidenceCollector.collectEvidencePackage());
      /* istanbul ignore next */
      cov_10b5p3ovn1().s[159]++;
      if (
      /* istanbul ignore next */
      (cov_10b5p3ovn1().b[46][0]++, !evidence.screenshots) ||
      /* istanbul ignore next */
      (cov_10b5p3ovn1().b[46][1]++, evidence.screenshots.length === 0)) {
        /* istanbul ignore next */
        cov_10b5p3ovn1().b[45][0]++;
        cov_10b5p3ovn1().s[160]++;
        throw new Error('No screenshots collected');
      } else
      /* istanbul ignore next */
      {
        cov_10b5p3ovn1().b[45][1]++;
      }
      cov_10b5p3ovn1().s[161]++;
      if (!evidence.performanceMetrics) {
        /* istanbul ignore next */
        cov_10b5p3ovn1().b[47][0]++;
        cov_10b5p3ovn1().s[162]++;
        throw new Error('No performance metrics collected');
      } else
      /* istanbul ignore next */
      {
        cov_10b5p3ovn1().b[47][1]++;
      }
    });
  }
  testQualityGates() {
    /* istanbul ignore next */
    cov_10b5p3ovn1().f[34]++;
    cov_10b5p3ovn1().s[163]++;
    return __awaiter(this, void 0, void 0, function* () {
      /* istanbul ignore next */
      cov_10b5p3ovn1().f[35]++;
      const evidence =
      /* istanbul ignore next */
      (cov_10b5p3ovn1().s[164]++, yield this.evidenceCollector.collectEvidencePackage());
      const evidenceResult =
      /* istanbul ignore next */
      (cov_10b5p3ovn1().s[165]++, yield this.evidenceQualityGate.validateEvidence(evidence));
      const functionalityResult =
      /* istanbul ignore next */
      (cov_10b5p3ovn1().s[166]++, yield this.functionalityQualityGate.validateFunctionality());
      /* istanbul ignore next */
      cov_10b5p3ovn1().s[167]++;
      if (typeof evidenceResult.score !== 'number') {
        /* istanbul ignore next */
        cov_10b5p3ovn1().b[48][0]++;
        cov_10b5p3ovn1().s[168]++;
        throw new Error('Evidence gate not returning valid score');
      } else
      /* istanbul ignore next */
      {
        cov_10b5p3ovn1().b[48][1]++;
      }
      cov_10b5p3ovn1().s[169]++;
      if (typeof functionalityResult.score !== 'number') {
        /* istanbul ignore next */
        cov_10b5p3ovn1().b[49][0]++;
        cov_10b5p3ovn1().s[170]++;
        throw new Error('Functionality gate not returning valid score');
      } else
      /* istanbul ignore next */
      {
        cov_10b5p3ovn1().b[49][1]++;
      }
    });
  }
  testHealthMonitoring() {
    /* istanbul ignore next */
    cov_10b5p3ovn1().f[36]++;
    cov_10b5p3ovn1().s[171]++;
    return __awaiter(this, void 0, void 0, function* () {
      /* istanbul ignore next */
      cov_10b5p3ovn1().f[37]++;
      cov_10b5p3ovn1().s[172]++;
      if (!this.healthMonitoringSystem.isMonitoringActive()) {
        /* istanbul ignore next */
        cov_10b5p3ovn1().b[50][0]++;
        cov_10b5p3ovn1().s[173]++;
        this.healthMonitoringSystem.startMonitoring();
        /* istanbul ignore next */
        cov_10b5p3ovn1().s[174]++;
        yield new Promise(resolve => {
          /* istanbul ignore next */
          cov_10b5p3ovn1().f[38]++;
          cov_10b5p3ovn1().s[175]++;
          return setTimeout(resolve, 1000);
        }); // Wait 1 second
      } else
      /* istanbul ignore next */
      {
        cov_10b5p3ovn1().b[50][1]++;
      }
      const healthStatus =
      /* istanbul ignore next */
      (cov_10b5p3ovn1().s[176]++, this.healthMonitoringSystem.getCurrentHealthStatus());
      /* istanbul ignore next */
      cov_10b5p3ovn1().s[177]++;
      if (!healthStatus) {
        /* istanbul ignore next */
        cov_10b5p3ovn1().b[51][0]++;
        cov_10b5p3ovn1().s[178]++;
        throw new Error('Health monitoring not providing status');
      } else
      /* istanbul ignore next */
      {
        cov_10b5p3ovn1().b[51][1]++;
      }
    });
  }
  testAlertSystem() {
    /* istanbul ignore next */
    cov_10b5p3ovn1().f[39]++;
    cov_10b5p3ovn1().s[179]++;
    return __awaiter(this, void 0, void 0, function* () {
      /* istanbul ignore next */
      cov_10b5p3ovn1().f[40]++;
      const testAlert =
      /* istanbul ignore next */
      (cov_10b5p3ovn1().s[180]++, {
        type: 'test_alert',
        severity: 'low',
        message: 'Test alert for system validation',
        details: {
          test: true
        },
        timestamp: new Date().toISOString()
      });
      /* istanbul ignore next */
      cov_10b5p3ovn1().s[181]++;
      yield this.alertSystem.triggerAlert(testAlert);
      const alertHistory =
      /* istanbul ignore next */
      (cov_10b5p3ovn1().s[182]++, this.alertSystem.getAlertHistory(1));
      /* istanbul ignore next */
      cov_10b5p3ovn1().s[183]++;
      if (alertHistory.length === 0) {
        /* istanbul ignore next */
        cov_10b5p3ovn1().b[52][0]++;
        cov_10b5p3ovn1().s[184]++;
        throw new Error('Alert not recorded in history');
      } else
      /* istanbul ignore next */
      {
        cov_10b5p3ovn1().b[52][1]++;
      }
    });
  }
  testDeploymentGates() {
    /* istanbul ignore next */
    cov_10b5p3ovn1().f[41]++;
    cov_10b5p3ovn1().s[185]++;
    return __awaiter(this, void 0, void 0, function* () {
      /* istanbul ignore next */
      cov_10b5p3ovn1().f[42]++;
      const result =
      /* istanbul ignore next */
      (cov_10b5p3ovn1().s[186]++, yield this.deploymentGateSystem.validateDeployment());
      /* istanbul ignore next */
      cov_10b5p3ovn1().s[187]++;
      if (typeof result.overallScore !== 'number') {
        /* istanbul ignore next */
        cov_10b5p3ovn1().b[53][0]++;
        cov_10b5p3ovn1().s[188]++;
        throw new Error('Deployment gate not returning valid score');
      } else
      /* istanbul ignore next */
      {
        cov_10b5p3ovn1().b[53][1]++;
      }
      cov_10b5p3ovn1().s[189]++;
      if (typeof result.approved !== 'boolean') {
        /* istanbul ignore next */
        cov_10b5p3ovn1().b[54][0]++;
        cov_10b5p3ovn1().s[190]++;
        throw new Error('Deployment gate not returning valid approval status');
      } else
      /* istanbul ignore next */
      {
        cov_10b5p3ovn1().b[54][1]++;
      }
    });
  }
  // Utility methods
  getSystemUptime() {
    /* istanbul ignore next */
    cov_10b5p3ovn1().f[43]++;
    cov_10b5p3ovn1().s[191]++;
    return this.initializationTime > 0 ?
    /* istanbul ignore next */
    (cov_10b5p3ovn1().b[55][0]++, Date.now() - this.initializationTime) :
    /* istanbul ignore next */
    (cov_10b5p3ovn1().b[55][1]++, 0);
  }
  // Public interface methods
  getDeploymentGateSystem() {
    /* istanbul ignore next */
    cov_10b5p3ovn1().f[44]++;
    cov_10b5p3ovn1().s[192]++;
    return this.deploymentGateSystem;
  }
  getHealthMonitoringSystem() {
    /* istanbul ignore next */
    cov_10b5p3ovn1().f[45]++;
    cov_10b5p3ovn1().s[193]++;
    return this.healthMonitoringSystem;
  }
  getAlertSystem() {
    /* istanbul ignore next */
    cov_10b5p3ovn1().f[46]++;
    cov_10b5p3ovn1().s[194]++;
    return this.alertSystem;
  }
  isSystemReady() {
    /* istanbul ignore next */
    cov_10b5p3ovn1().f[47]++;
    cov_10b5p3ovn1().s[195]++;
    return this.isInitialized;
  }
  shutdown() {
    /* istanbul ignore next */
    cov_10b5p3ovn1().f[48]++;
    cov_10b5p3ovn1().s[196]++;
    return __awaiter(this, void 0, void 0, function* () {
      /* istanbul ignore next */
      cov_10b5p3ovn1().f[49]++;
      cov_10b5p3ovn1().s[197]++;
      console.log('🔄 Shutting down Quality Gate Orchestrator...');
      /* istanbul ignore next */
      cov_10b5p3ovn1().s[198]++;
      this.healthMonitoringSystem.stopMonitoring();
      /* istanbul ignore next */
      cov_10b5p3ovn1().s[199]++;
      this.alertSystem.clearEscalations();
      /* istanbul ignore next */
      cov_10b5p3ovn1().s[200]++;
      yield this.alertSystem.triggerAlert({
        type: 'quality_gate_system_shutdown',
        severity: 'low',
        message: 'Quality Gate Orchestrator is shutting down',
        details: {
          uptime: this.getSystemUptime()
        },
        timestamp: new Date().toISOString()
      });
      /* istanbul ignore next */
      cov_10b5p3ovn1().s[201]++;
      console.log('✅ Quality Gate Orchestrator shut down successfully');
    });
  }
}
/* istanbul ignore next */
cov_10b5p3ovn1().s[202]++;
exports.QualityGateOrchestrator = QualityGateOrchestrator;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,