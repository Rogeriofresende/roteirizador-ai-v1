a131258b0e73950f4360124de4e5c608
"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const test_1 = require("@playwright/test");
const helpers_1 = require("./helpers");
const test_data_1 = require("./test-data");
test_1.test.describe('Geração de Roteiros', () => {
    let helpers;
    test_1.test.beforeEach((_a) => __awaiter(void 0, [_a], void 0, function* ({ page }) {
        helpers = new helpers_1.TestHelpers(page);
        // Faz login antes de cada teste (assumindo que é necessário)
        yield helpers.goToLogin();
        yield page.fill('[data-testid="email-input"], input[name="email"], input[type="email"]', 'demo@roteirizar.com');
        yield page.fill('[data-testid="password-input"], input[name="password"], input[type="password"]', 'demo123');
        yield page.click('[data-testid="login-button"], button[type="submit"], button:has-text("Entrar")');
        yield page.waitForTimeout(2000);
    }));
    test_1.test.afterEach((_a) => __awaiter(void 0, [_a], void 0, function* ({ page }) {
        if (helpers) {
            yield helpers.cleanup();
        }
    }));
    test_1.test.describe('Geração por Plataforma', () => {
        (0, test_1.test)('TC004 - Roteiro YouTube completo', (_a) => __awaiter(void 0, [_a], void 0, function* ({ page }) {
            // Dado que estou logado no sistema
            // Quando acesso o gerador de roteiros
            yield helpers.goToGenerator();
            // E seleciono plataforma "YouTube"
            const platformSelect = page.locator('[data-testid="platform-select"], select[name="platform"], select');
            if ((yield platformSelect.count()) > 0) {
                yield platformSelect.selectOption('youtube');
            }
            else {
                // Se não é select, pode ser botões ou cards
                const youtubeOption = page.locator('button:has-text("YouTube"), [data-platform="youtube"], .platform-youtube');
                if ((yield youtubeOption.count()) > 0) {
                    yield youtubeOption.first().click();
                }
            }
            // E preencho tópico específico
            yield page.fill('[data-testid="topic-input"], input[name="topic"], textarea[name="topic"], input[placeholder*="tópico"], textarea[placeholder*="tópico"]', test_data_1.scriptData.youtube.topic);
            // E clico em "Gerar Roteiro"
            yield page.click('[data-testid="generate-button"], button:has-text("Gerar"), button[type="submit"]');
            // Então recebo um roteiro personalizado
            yield page.waitForSelector('[data-testid="generated-script"], .generated-content, .script-result', { timeout: 30000 });
            // E o conteúdo é adequado para YouTube
            const scriptContent = yield page.locator('[data-testid="generated-script"], .generated-content, .script-result').textContent();
            (0, test_1.expect)(scriptContent).toBeTruthy();
            (0, test_1.expect)(scriptContent.length).toBeGreaterThan(50); // Conteúdo substancial
            // Verifica se contém palavras relacionadas ao tópico
            const lowerContent = scriptContent.toLowerCase();
            const topicWords = test_data_1.scriptData.youtube.topic.toLowerCase().split(' ');
            const hasRelevantContent = topicWords.some(word => lowerContent.includes(word));
            (0, test_1.expect)(hasRelevantContent).toBeTruthy();
        }));
        (0, test_1.test)('TC005 - Todas as plataformas funcionam', (_a) => __awaiter(void 0, [_a], void 0, function* ({ page }) {
            // Para cada plataforma suportada
            const testPlatforms = ['youtube', 'instagram', 'tiktok', 'linkedin', 'twitter'];
            for (const platform of testPlatforms) {
                yield test_1.test.step(`Testando plataforma: ${platform}`, () => __awaiter(void 0, void 0, void 0, function* () {
                    yield helpers.goToGenerator();
                    // Seleciona a plataforma
                    const platformSelect = page.locator('[data-testid="platform-select"], select[name="platform"], select');
                    if ((yield platformSelect.count()) > 0) {
                        yield platformSelect.selectOption(platform);
                    }
                    else {
                        // Tenta encontrar por texto ou atributo
                        const platformOption = page.locator(`button:has-text("${platform}"), [data-platform="${platform}"], .platform-${platform}`);
                        if ((yield platformOption.count()) > 0) {
                            yield platformOption.first().click();
                        }
                        else {
                            // Busca por texto que contenha o nome da plataforma
                            const platformText = platform.charAt(0).toUpperCase() + platform.slice(1);
                            const textOption = page.locator(`button:has-text("${platformText}"), [aria-label*="${platformText}"]`);
                            if ((yield textOption.count()) > 0) {
                                yield textOption.first().click();
                            }
                        }
                    }
                    // Preenche tópico
                    const topicData = test_data_1.scriptData[platform] || test_data_1.scriptData.youtube;
                    yield page.fill('[data-testid="topic-input"], input[name="topic"], textarea[name="topic"], input[placeholder*="tópico"], textarea[placeholder*="tópico"]', topicData.topic);
                    // Gera roteiro
                    yield page.click('[data-testid="generate-button"], button:has-text("Gerar"), button[type="submit"]');
                    // Verifica se gerou conteúdo
                    try {
                        yield page.waitForSelector('[data-testid="generated-script"], .generated-content, .script-result', { timeout: 20000 });
                        const content = yield page.locator('[data-testid="generated-script"], .generated-content, .script-result').textContent();
                        (0, test_1.expect)(content).toBeTruthy();
                        (0, test_1.expect)(content.length).toBeGreaterThan(20);
                    }
                    catch (error) {
                        console.log(`Plataforma ${platform} pode não estar totalmente implementada ainda`);
                        // Verifica se pelo menos não deu erro crítico
                        const errorElements = yield page.locator('.error, [role="alert"], .text-red-500').count();
                        (0, test_1.expect)(errorElements).toBeLessThan(3); // Permite alguns erros menores
                    }
                }));
            }
        }));
    });
    test_1.test.describe('Tratamento de Erros', () => {
        (0, test_1.test)('TC006 - Campos obrigatórios não preenchidos', (_a) => __awaiter(void 0, [_a], void 0, function* ({ page }) {
            yield helpers.goToGenerator();
            // Tenta gerar sem preencher dados
            yield page.click('[data-testid="generate-button"], button:has-text("Gerar"), button[type="submit"]');
            // Deve mostrar erro ou validação
            yield page.waitForTimeout(2000);
            const hasValidationError = (yield page.locator('input:invalid, textarea:invalid').count()) > 0;
            const hasCustomError = (yield page.locator('.error, [role="alert"], .text-red-500').count()) > 0;
            const remainsOnPage = page.url().includes('generator') || page.url().includes('gerador');
            (0, test_1.expect)(hasValidationError || hasCustomError || remainsOnPage).toBeTruthy();
        }));
        (0, test_1.test)('TC006.1 - Tópico muito curto', (_a) => __awaiter(void 0, [_a], void 0, function* ({ page }) {
            yield helpers.goToGenerator();
            // Seleciona plataforma
            const platformSelect = page.locator('[data-testid="platform-select"], select[name="platform"], select');
            if ((yield platformSelect.count()) > 0) {
                yield platformSelect.selectOption('youtube');
            }
            // Preenche tópico muito curto
            yield page.fill('[data-testid="topic-input"], input[name="topic"], textarea[name="topic"], input[placeholder*="tópico"], textarea[placeholder*="tópico"]', 'a');
            yield page.click('[data-testid="generate-button"], button:has-text("Gerar"), button[type="submit"]');
            // Deve mostrar erro ou aviso
            yield page.waitForTimeout(3000);
            const hasError = (yield page.locator('.error, [role="alert"], .text-red-500, .warning, .text-yellow-500').count()) > 0;
            const inputInvalid = (yield page.locator('input:invalid, textarea:invalid').count()) > 0;
            // Ou deve gerar conteúdo mesmo assim (comportamento válido)  
            const hasContent = (yield page.locator('[data-testid="generated-script"], .generated-content, .script-result').count()) > 0;
            (0, test_1.expect)(hasError || inputInvalid || hasContent).toBeTruthy();
        }));
        (0, test_1.test)('TC006.2 - Simulação de erro de API', (_a) => __awaiter(void 0, [_a], void 0, function* ({ page }) {
            // Intercepta requests para simular erro de API
            yield page.route('**/api/**', (route) => {
                route.abort('failed');
            });
            yield helpers.goToGenerator();
            // Preenche dados válidos
            yield page.fill('[data-testid="topic-input"], input[name="topic"], textarea[name="topic"], input[placeholder*="tópico"], textarea[placeholder*="tópico"]', 'Tópico de teste');
            yield page.click('[data-testid="generate-button"], button:has-text("Gerar"), button[type="submit"]');
            // Deve mostrar erro de API
            yield page.waitForTimeout(5000);
            const hasError = (yield page.locator('.error, [role="alert"], .text-red-500').count()) > 0;
            const hasRetryButton = (yield page.locator('button:has-text("Tentar"), button:has-text("Novamente")').count()) > 0;
            (0, test_1.expect)(hasError || hasRetryButton).toBeTruthy();
        }));
    });
    test_1.test.describe('Interface e Usabilidade', () => {
        (0, test_1.test)('TC004.1 - Interface responsiva no gerador', (_a) => __awaiter(void 0, [_a], void 0, function* ({ page }) {
            yield helpers.goToGenerator();
            // Testa em diferentes tamanhos
            yield helpers.setMobileViewport();
            yield page.waitForTimeout(1000);
            // Verifica se elementos são visíveis em mobile
            const generateButton = page.locator('[data-testid="generate-button"], button:has-text("Gerar"), button[type="submit"]');
            yield (0, test_1.expect)(generateButton).toBeVisible();
            yield helpers.setDesktopViewport();
            yield page.waitForTimeout(1000);
            // Verifica se layout se adapta para desktop
            yield (0, test_1.expect)(generateButton).toBeVisible();
        }));
        (0, test_1.test)('TC004.2 - Loading state durante geração', (_a) => __awaiter(void 0, [_a], void 0, function* ({ page }) {
            yield helpers.goToGenerator();
            // Preenche dados
            yield page.fill('[data-testid="topic-input"], input[name="topic"], textarea[name="topic"], input[placeholder*="tópico"], textarea[placeholder*="tópico"]', 'Tópico de teste para loading');
            // Clica em gerar
            yield page.click('[data-testid="generate-button"], button:has-text("Gerar"), button[type="submit"]');
            // Verifica se mostra loading
            const hasLoading = (yield page.locator('.loading, .spinner, [data-testid="loading"], .animate-spin').count()) > 0;
            const buttonDisabled = (yield page.locator('[data-testid="generate-button"]:disabled, button:disabled').count()) > 0;
            (0, test_1.expect)(hasLoading || buttonDisabled).toBeTruthy();
        }));
        (0, test_1.test)('TC004.3 - Navegação após geração', (_a) => __awaiter(void 0, [_a], void 0, function* ({ page }) {
            yield helpers.goToGenerator();
            // Gera um roteiro
            yield page.fill('[data-testid="topic-input"], input[name="topic"], textarea[name="topic"], input[placeholder*="tópico"], textarea[placeholder*="tópico"]', 'Navegação teste');
            yield page.click('[data-testid="generate-button"], button:has-text("Gerar"), button[type="submit"]');
            // Aguarda resultado
            try {
                yield page.waitForSelector('[data-testid="generated-script"], .generated-content, .script-result', { timeout: 20000 });
                // Verifica se pode navegar para outras páginas
                const dashboardLink = page.locator('[data-testid="dashboard-link"], a:has-text("Dashboard"), nav a[href*="dashboard"]');
                if ((yield dashboardLink.count()) > 0) {
                    yield dashboardLink.first().click();
                    yield page.waitForTimeout(2000);
                    (0, test_1.expect)(page.url()).toContain('dashboard');
                }
            }
            catch (_b) {
                console.log('Geração pode não ter funcionado - teste de navegação pulado');
            }
        }));
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,