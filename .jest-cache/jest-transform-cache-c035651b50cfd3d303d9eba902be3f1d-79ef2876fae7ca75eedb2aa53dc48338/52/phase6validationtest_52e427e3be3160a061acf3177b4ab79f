a79f5290be398629a46386af35254a57
/**
 * Phase 6 - Advanced UX Features Validation Tests
 * Simplified version without DOM testing dependencies
 */
describe('Phase 6: Advanced UX Features - Validation', () => {
    describe('Predictive UX Hook Structure', () => {
        it('should define UserAction interface correctly', () => {
            // Test interface structure exists
            const mockAction = {
                type: 'click',
                target: 'test-button',
                timestamp: Date.now(),
                context: { test: true }
            };
            expect(mockAction.type).toBe('click');
            expect(mockAction.target).toBe('test-button');
            expect(typeof mockAction.timestamp).toBe('number');
            expect(mockAction.context).toEqual({ test: true });
        });
        it('should handle prediction patterns structure', () => {
            const mockPattern = {
                sequence: ['action1', 'action2'],
                probability: 0.8,
                nextActions: ['action3'],
                frequency: 5
            };
            expect(Array.isArray(mockPattern.sequence)).toBe(true);
            expect(typeof mockPattern.probability).toBe('number');
            expect(Array.isArray(mockPattern.nextActions)).toBe(true);
            expect(typeof mockPattern.frequency).toBe('number');
        });
    });
    describe('Smart Loading Features', () => {
        it('should calculate progress correctly', () => {
            const calculateProgress = (current, total) => {
                return Math.round((current / total) * 100);
            };
            expect(calculateProgress(25, 100)).toBe(25);
            expect(calculateProgress(50, 100)).toBe(50);
            expect(calculateProgress(100, 100)).toBe(100);
        });
        it('should handle loading stages', () => {
            const stages = [
                { threshold: 0, message: 'Iniciando...', icon: '🚀' },
                { threshold: 20, message: 'Carregando recursos...', icon: '📦' },
                { threshold: 50, message: 'Processando dados...', icon: '⚙️' },
                { threshold: 80, message: 'Finalizando...', icon: '✨' },
            ];
            const getCurrentStage = (progress) => {
                return stages.slice().reverse().find(s => progress >= s.threshold) || stages[0];
            };
            expect(getCurrentStage(10).message).toBe('Iniciando...');
            expect(getCurrentStage(30).message).toBe('Carregando recursos...');
            expect(getCurrentStage(60).message).toBe('Processando dados...');
            expect(getCurrentStage(90).message).toBe('Finalizando...');
        });
    });
    describe('Advanced Micro-interactions Logic', () => {
        it('should handle interaction state transitions', () => {
            const initialState = {
                isHovered: false,
                isPressed: false,
                isLoading: false,
                showPredictiveHint: false,
            };
            const handleMouseEnter = (state) => (Object.assign(Object.assign({}, state), { isHovered: true }));
            const handleClick = (state) => (Object.assign(Object.assign({}, state), { isPressed: true, isLoading: true }));
            let state = initialState;
            expect(state.isHovered).toBe(false);
            state = handleMouseEnter(state);
            expect(state.isHovered).toBe(true);
            state = handleClick(state);
            expect(state.isPressed).toBe(true);
            expect(state.isLoading).toBe(true);
        });
    });
    describe('Predictive Algorithm Logic', () => {
        it('should analyze action sequences correctly', () => {
            const analyzeSequence = (actions) => {
                if (actions.length < 2)
                    return [];
                const patterns = new Map();
                for (let i = 0; i < actions.length - 1; i++) {
                    const current = actions[i];
                    const next = actions[i + 1];
                    const pattern = `${current}->${next}`;
                    patterns.set(pattern, (patterns.get(pattern) || 0) + 1);
                }
                // Return most frequent patterns
                return Array.from(patterns.entries())
                    .sort((a, b) => b[1] - a[1])
                    .slice(0, 3)
                    .map(([pattern]) => pattern);
            };
            const mockActions = ['platform-youtube', 'generate', 'platform-instagram', 'generate'];
            const patterns = analyzeSequence(mockActions);
            expect(patterns).toContain('platform-youtube->generate');
            expect(patterns).toContain('platform-instagram->generate');
        });
    });
    describe('Performance Optimization', () => {
        it('should handle batched updates efficiently', () => {
            const batchUpdates = (updates) => {
                const startTime = performance.now();
                // Simulate batched execution
                updates.forEach(update => update());
                const endTime = performance.now();
                return endTime - startTime;
            };
            const mockUpdates = Array(10).fill(() => {
                // Simulate small update operation
                return Math.random() * 100;
            });
            const duration = batchUpdates(mockUpdates);
            // Should complete quickly for small operations
            expect(duration).toBeLessThan(50);
        });
        it('should manage memory efficiently with limited history', () => {
            const manageHistory = (history, newItem, maxSize = 50) => {
                const newHistory = [...history, newItem];
                if (newHistory.length > maxSize) {
                    return newHistory.slice(-maxSize);
                }
                return newHistory;
            };
            let history = [];
            // Add 60 items
            for (let i = 0; i < 60; i++) {
                history = manageHistory(history, i);
            }
            // Should maintain max size
            expect(history.length).toBe(50);
            expect(history[0]).toBe(10); // First item should be index 10 (60-50)
            expect(history[49]).toBe(59); // Last item should be index 59
        });
    });
    describe('Error Handling and Resilience', () => {
        it('should handle localStorage errors gracefully', () => {
            const safeLocalStorageOperation = (key, value) => {
                try {
                    if (typeof Storage === 'undefined') {
                        console.warn('localStorage not available');
                        return false;
                    }
                    localStorage.setItem(key, JSON.stringify(value));
                    return true;
                }
                catch (error) {
                    if (error.name === 'QuotaExceededError') {
                        console.warn('Storage quota exceeded');
                        // Try with smaller dataset
                        try {
                            localStorage.setItem(key, JSON.stringify({ reduced: true }));
                            return true;
                        }
                        catch (_a) {
                            return false;
                        }
                    }
                    return false;
                }
            };
            // Should not throw errors
            expect(() => safeLocalStorageOperation('test', { data: 'test' })).not.toThrow();
        });
        it('should handle browser compatibility issues', () => {
            const createResizeObserver = () => {
                try {
                    if (typeof ResizeObserver !== 'undefined') {
                        return new ResizeObserver(() => { });
                    }
                    return null;
                }
                catch (error) {
                    console.warn('ResizeObserver not supported');
                    return null;
                }
            };
            // Should not throw errors regardless of browser support
            expect(() => createResizeObserver()).not.toThrow();
        });
    });
    describe('Integration and Coordination', () => {
        it('should coordinate multiple features correctly', () => {
            const initializePhase6 = () => ({
                predictiveEnabled: true,
                smartLoadingActive: true,
                microInteractionsEnabled: true,
                performanceOptimized: true,
            });
            const state = initializePhase6();
            expect(state.predictiveEnabled).toBe(true);
            expect(state.smartLoadingActive).toBe(true);
            expect(state.microInteractionsEnabled).toBe(true);
            expect(state.performanceOptimized).toBe(true);
        });
    });
});
// Phase 6 Component Validation
describe('Phase 6: Component Architecture Validation', () => {
    it('should validate PlatformSelectorEnhanced structure', () => {
        const mockProps = {
            selectedPlatform: 'YouTube',
            onPlatformChange: (platform) => { },
            disabled: false,
        };
        expect(typeof mockProps.selectedPlatform).toBe('string');
        expect(typeof mockProps.onPlatformChange).toBe('function');
        expect(typeof mockProps.disabled).toBe('boolean');
    });
    it('should validate SmartLoading interface', () => {
        const mockLoadingProps = {
            isLoading: true,
            progress: 50,
            stage: 'Loading...',
            type: 'progress',
            size: 'md',
        };
        expect(typeof mockLoadingProps.isLoading).toBe('boolean');
        expect(typeof mockLoadingProps.progress).toBe('number');
        expect(typeof mockLoadingProps.stage).toBe('string');
        expect(['spinner', 'progress', 'skeleton', 'adaptive']).toContain(mockLoadingProps.type);
        expect(['sm', 'md', 'lg']).toContain(mockLoadingProps.size);
    });
});
console.log('🚀 Phase 6 Advanced UX Features - Validation Tests Loaded');
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL3JvZ2VyaW9yZXNlbmRlL0Rlc2t0b3AvUm90ZWlyYXItaWEvc3JjL3Rlc3RzL3BoYXNlNi12YWxpZGF0aW9uLnRlc3QudHMiLCJtYXBwaW5ncyI6IkFBQUE7OztHQUdHO0FBRUgsUUFBUSxDQUFDLDRDQUE0QyxFQUFFLEdBQUcsRUFBRTtJQUUxRCxRQUFRLENBQUMsOEJBQThCLEVBQUUsR0FBRyxFQUFFO1FBQzVDLEVBQUUsQ0FBQyw4Q0FBOEMsRUFBRSxHQUFHLEVBQUU7WUFDdEQsa0NBQWtDO1lBQ2xDLE1BQU0sVUFBVSxHQUFHO2dCQUNqQixJQUFJLEVBQUUsT0FBZ0I7Z0JBQ3RCLE1BQU0sRUFBRSxhQUFhO2dCQUNyQixTQUFTLEVBQUUsSUFBSSxDQUFDLEdBQUcsRUFBRTtnQkFDckIsT0FBTyxFQUFFLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRTthQUN4QixDQUFDO1lBRUYsTUFBTSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUM7WUFDdEMsTUFBTSxDQUFDLFVBQVUsQ0FBQyxNQUFNLENBQUMsQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLENBQUM7WUFDOUMsTUFBTSxDQUFDLE9BQU8sVUFBVSxDQUFDLFNBQVMsQ0FBQyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztZQUNuRCxNQUFNLENBQUMsVUFBVSxDQUFDLE9BQU8sQ0FBQyxDQUFDLE9BQU8sQ0FBQyxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsQ0FBQyxDQUFDO1FBQ3JELENBQUMsQ0FBQyxDQUFDO1FBRUgsRUFBRSxDQUFDLDZDQUE2QyxFQUFFLEdBQUcsRUFBRTtZQUNyRCxNQUFNLFdBQVcsR0FBRztnQkFDbEIsUUFBUSxFQUFFLENBQUMsU0FBUyxFQUFFLFNBQVMsQ0FBQztnQkFDaEMsV0FBVyxFQUFFLEdBQUc7Z0JBQ2hCLFdBQVcsRUFBRSxDQUFDLFNBQVMsQ0FBQztnQkFDeEIsU0FBUyxFQUFFLENBQUM7YUFDYixDQUFDO1lBRUYsTUFBTSxD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QyxJQUFJLEVBQUUsSUFBSSxFQUFFLElBQUksQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLGdCQUFnQixDQUFDLElBQUksQ0FBQyxDQUFDO0lBQzlELENBQUMsQ0FBQyxDQUFDO0FBQ0wsQ0FBQyxDQUFDLENBQUM7QUFFSCxPQUFPLENBQUMsR0FBRyxDQUFDLDJEQUEyRCxDQUFDLENBQUMiLCJuYW1lcyI6W10sInNvdXJjZXMiOlsiL1VzZXJzL3JvZ2VyaW9yZXNlbmRlL0Rlc2t0b3AvUm90ZWlyYXItaWEvc3JjL3Rlc3RzL3BoYXNlNi12YWxpZGF0aW9uLnRlc3QudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBQaGFzZSA2IC0gQWR2YW5jZWQgVVggRmVhdHVyZXMgVmFsaWRhdGlvbiBUZXN0c1xuICogU2ltcGxpZmllZCB2ZXJzaW9uIHdpdGhvdXQgRE9NIHRlc3RpbmcgZGVwZW5kZW5jaWVzXG4gKi9cblxuZGVzY3JpYmUoJ1BoYXNlIDY6IEFkdmFuY2VkIFVYIEZlYXR1cmVzIC0gVmFsaWRhdGlvbicsICgpID0+IHtcbiAgXG4gIGRlc2NyaWJlKCdQcmVkaWN0aXZlIFVYIEhvb2sgU3RydWN0dXJlJywgKCkgPT4ge1xuICAgIGl0KCdzaG91bGQgZGVmaW5lIFVzZXJBY3Rpb24gaW50ZXJmYWNlIGNvcnJlY3RseScsICgpID0+IHtcbiAgICAgIC8vIFRlc3QgaW50ZXJmYWNlIHN0cnVjdHVyZSBleGlzdHNcbiAgICAgIGNvbnN0IG1vY2tBY3Rpb24gPSB7XG4gICAgICAgIHR5cGU6ICdjbGljaycgYXMgY29uc3QsXG4gICAgICAgIHRhcmdldDogJ3Rlc3QtYnV0dG9uJyxcbiAgICAgICAgdGltZXN0YW1wOiBEYXRlLm5vdygpLFxuICAgICAgICBjb250ZXh0OiB7IHRlc3Q6IHRydWUgfVxuICAgICAgfTtcbiAgICAgIFxuICAgICAgZXhwZWN0KG1vY2tBY3Rpb24udHlwZSkudG9CZSgnY2xpY2snKTtcbiAgICAgIGV4cGVjdChtb2NrQWN0aW9uLnRhcmdldCkudG9CZSgndGVzdC1idXR0b24nKTtcbiAgICAgIGV4cGVjdCh0eXBlb2YgbW9ja0FjdGlvbi50aW1lc3RhbXApLnRvQmUoJ251bWJlcicpO1xuICAgICAgZXhwZWN0KG1vY2tBY3Rpb24uY29udGV4dCkudG9FcXVhbCh7IHRlc3Q6IHRydWUgfSk7XG4gICAgfSk7XG5cbiAgICBpdCgnc2hvdWxkIGhhbmRsZSBwcmVkaWN0aW9uIHBhdHRlcm5zIHN0cnVjdHVyZScsICgpID0+IHtcbiAgICAgIGNvbnN0IG1vY2tQYXR0ZXJuID0ge1xuICAgICAgICBzZXF1ZW5jZTogWydhY3Rpb24xJywgJ2FjdGlvbjInXSxcbiAgICAgICAgcHJvYmFiaWxpdHk6IDAuOCxcbiAgICAgICAgbmV4dEFjdGlvbnM6IFsnYWN0aW9uMyddLFxuICAgICAgICBmcmVxdWVuY3k6IDVcbiAgICAgIH07XG4gICAgICBcbiAgICAgIGV4cGVjdChBcnJheS5pc0FycmF5KG1vY2tQYXR0ZXJuLnNlcXVlbmNlKSkudG9CZSh0cnVlKTtcbiAgICAgIGV4cGVjdCh0eXBlb2YgbW9ja1BhdHRlcm4ucHJvYmFiaWxpdHkpLnRvQmUoJ251bWJlcicpO1xuICAgICAgZXhwZWN0KEFycmF5LmlzQXJyYXkobW9ja1BhdHRlcm4ubmV4dEFjdGlvbnMpKS50b0JlKHRydWUpO1xuICAgICAgZXhwZWN0KHR5cGVvZiBtb2NrUGF0dGVybi5mcmVxdWVuY3kpLnRvQmUoJ251bWJlcicpO1xuICAgIH0pO1xuICB9KTtcblxuICBkZXNjcmliZSgnU21hcnQgTG9hZGluZyBGZWF0dXJlcycsICgpID0+IHtcbiAgICBpdCgnc2hvdWxkIGNhbGN1bGF0ZSBwcm9ncmVzcyBjb3JyZWN0bHknLCAoKSA9PiB7XG4gICAgICBjb25zdCBjYWxjdWxhdGVQcm9ncmVzcyA9IChjdXJyZW50OiBudW1iZXIsIHRvdGFsOiBudW1iZXIpID0+IHtcbiAgICAgICAgcmV0dXJuIE1hdGgucm91bmQoKGN1cnJlbnQgLyB0b3RhbCkgKiAxMDApO1xuICAgICAgfTtcbiAgICAgIFxuICAgICAgZXhwZWN0KGNhbGN1bGF0ZVByb2dyZXNzKDI1LCAxMDApKS50b0JlKDI1KTtcbiAgICAgIGV4cGVjdChjYWxjdWxhdGVQcm9ncmVzcyg1MCwgMTAwKSkudG9CZSg1MCk7XG4gICAgICBleHBlY3QoY2FsY3VsYXRlUHJvZ3Jlc3MoMTAwLCAxMDApKS50b0JlKDEwMCk7XG4gICAgfSk7XG5cbiAgICBpdCgnc2hvdWxkIGhhbmRsZSBsb2FkaW5nIHN0YWdlcycsICgpID0+IHtcbiAgICAgIGNvbnN0IHN0YWdlcyA9IFtcbiAgICAgICAgeyB0aHJlc2hvbGQ6IDAsIG1lc3NhZ2U6ICdJbmljaWFuZG8uLi4nLCBpY29uOiAn8J+agCcgfSxcbiAgICAgICAgeyB0aHJlc2hvbGQ6IDIwLCBtZXNzYWdlOiAnQ2FycmVnYW5kbyByZWN1cnNvcy4uLicsIGljb246ICfwn5OmJyB9LFxuICAgICAgICB7IHRocmVzaG9sZDogNTAsIG1lc3NhZ2U6ICdQcm9jZXNzYW5kbyBkYWRvcy4uLicsIGljb246ICfimpnvuI8nIH0sXG4gICAgICAgIHsgdGhyZXNob2xkOiA4MCwgbWVzc2FnZTogJ0ZpbmFsaXphbmRvLi4uJywgaWNvbjogJ+KcqCcgfSxcbiAgICAgIF07XG4gICAgICBcbiAgICAgIGNvbnN0IGdldEN1cnJlbnRTdGFnZSA9IChwcm9ncmVzczogbnVtYmVyKSA9PiB7XG4gICAgICAgIHJldHVybiBzdGFnZXMuc2xpY2UoKS5yZXZlcnNlKCkuZmluZChzID0+IHByb2dyZXNzID49IHMudGhyZXNob2xkKSB8fCBzdGFnZXNbMF07XG4gICAgICB9O1xuICAgICAgXG4gICAgICBleHBlY3QoZ2V0Q3VycmVudFN0YWdlKDEwKS5tZXNzYWdlKS50b0JlKCdJbmljaWFuZG8uLi4nKTtcbiAgICAgIGV4cGVjdChnZXRDdXJyZW50U3RhZ2UoMzApLm1lc3NhZ2UpLnRvQmUoJ0NhcnJlZ2FuZG8gcmVjdXJzb3MuLi4nKTtcbiAgICAgIGV4cGVjdChnZXRDdXJyZW50U3RhZ2UoNjApLm1lc3NhZ2UpLnRvQmUoJ1Byb2Nlc3NhbmRvIGRhZG9zLi4uJyk7XG4gICAgICBleHBlY3QoZ2V0Q3VycmVudFN0YWdlKDkwKS5tZXNzYWdlKS50b0JlKCdGaW5hbGl6YW5kby4uLicpO1xuICAgIH0pO1xuICB9KTtcblxuICBkZXNjcmliZSgnQWR2YW5jZWQgTWljcm8taW50ZXJhY3Rpb25zIExvZ2ljJywgKCkgPT4ge1xuICAgIGl0KCdzaG91bGQgaGFuZGxlIGludGVyYWN0aW9uIHN0YXRlIHRyYW5zaXRpb25zJywgKCkgPT4ge1xuICAgICAgaW50ZXJmYWNlIEludGVyYWN0aW9uU3RhdGUge1xuICAgICAgICBpc0hvdmVyZWQ6IGJvb2xlYW47XG4gICAgICAgIGlzUHJlc3NlZDogYm9vbGVhbjtcbiAgICAgICAgaXNMb2FkaW5nOiBib29sZWFuO1xuICAgICAgICBzaG93UHJlZGljdGl2ZUhpbnQ6IGJvb2xlYW47XG4gICAgICB9XG4gICAgICBcbiAgICAgIGNvbnN0IGluaXRpYWxTdGF0ZTogSW50ZXJhY3Rpb25TdGF0ZSA9IHtcbiAgICAgICAgaXNIb3ZlcmVkOiBmYWxzZSxcbiAgICAgICAgaXNQcmVzc2VkOiBmYWxzZSxcbiAgICAgICAgaXNMb2FkaW5nOiBmYWxzZSxcbiAgICAgICAgc2hvd1ByZWRpY3RpdmVIaW50OiBmYWxzZSxcbiAgICAgIH07XG4gICAgICBcbiAgICAgIGNvbnN0IGhhbmRsZU1vdXNlRW50ZXIgPSAoc3RhdGU6IEludGVyYWN0aW9uU3RhdGUpOiBJbnRlcmFjdGlvblN0YXRlID0+ICh7XG4gICAgICAgIC4uLnN0YXRlLFxuICAgICAgICBpc0hvdmVyZWQ6IHRydWUsXG4gICAgICB9KTtcbiAgICAgIFxuICAgICAgY29uc3QgaGFuZGxlQ2xpY2sgPSAoc3RhdGU6IEludGVyYWN0aW9uU3RhdGUpOiBJbnRlcmFjdGlvblN0YXRlID0+ICh7XG4gICAgICAgIC4uLnN0YXRlLFxuICAgICAgICBpc1ByZXNzZWQ6IHRydWUsXG4gICAgICAgIGlzTG9hZGluZzogdHJ1ZSxcbiAgICAgIH0pO1xuICAgICAgXG4gICAgICBsZXQgc3RhdGUgPSBpbml0aWFsU3RhdGU7XG4gICAgICBleHBlY3Qoc3RhdGUuaXNIb3ZlcmVkKS50b0JlKGZhbHNlKTtcbiAgICAgIFxuICAgICAgc3RhdGUgPSBoYW5kbGVNb3VzZUVudGVyKHN0YXRlKTtcbiAgICAgIGV4cGVjdChzdGF0ZS5pc0hvdmVyZWQpLnRvQmUodHJ1ZSk7XG4gICAgICBcbiAgICAgIHN0YXRlID0gaGFuZGxlQ2xpY2soc3RhdGUpO1xuICAgICAgZXhwZWN0KHN0YXRlLmlzUHJlc3NlZCkudG9CZSh0cnVlKTtcbiAgICAgIGV4cGVjdChzdGF0ZS5pc0xvYWRpbmcpLnRvQmUodHJ1ZSk7XG4gICAgfSk7XG4gIH0pO1xuXG4gIGRlc2NyaWJlKCdQcmVkaWN0aXZlIEFsZ29yaXRobSBMb2dpYycsICgpID0+IHtcbiAgICBpdCgnc2hvdWxkIGFuYWx5emUgYWN0aW9uIHNlcXVlbmNlcyBjb3JyZWN0bHknLCAoKSA9PiB7XG4gICAgICBjb25zdCBhbmFseXplU2VxdWVuY2UgPSAoYWN0aW9uczogc3RyaW5nW10pOiBzdHJpbmdbXSA9PiB7XG4gICAgICAgIGlmIChhY3Rpb25zLmxlbmd0aCA8IDIpIHJldHVybiBbXTtcbiAgICAgICAgXG4gICAgICAgIGNvbnN0IHBhdHRlcm5zID0gbmV3IE1hcDxzdHJpbmcsIG51bWJlcj4oKTtcbiAgICAgICAgXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgYWN0aW9ucy5sZW5ndGggLSAxOyBpKyspIHtcbiAgICAgICAgICBjb25zdCBjdXJyZW50ID0gYWN0aW9uc1tpXTtcbiAgICAgICAgICBjb25zdCBuZXh0ID0gYWN0aW9uc1tpICsgMV07XG4gICAgICAgICAgY29uc3QgcGF0dGVybiA9IGAke2N1cnJlbnR9LT4ke25leHR9YDtcbiAgICAgICAgICBcbiAgICAgICAgICBwYXR0ZXJucy5zZXQocGF0dGVybiwgKHBhdHRlcm5zLmdldChwYXR0ZXJuKSB8fCAwKSArIDEpO1xuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICAvLyBSZXR1cm4gbW9zdCBmcmVxdWVudCBwYXR0ZXJuc1xuICAgICAgICByZXR1cm4gQXJyYXkuZnJvbShwYXR0ZXJucy5lbnRyaWVzKCkpXG4gICAgICAgICAgLnNvcnQoKGEsIGIpID0+IGJbMV0gLSBhWzFdKVxuICAgICAgICAgIC5zbGljZSgwLCAzKVxuICAgICAgICAgIC5tYXAoKFtwYXR0ZXJuXSkgPT4gcGF0dGVybik7XG4gICAgICB9O1xuICAgICAgXG4gICAgICBjb25zdCBtb2NrQWN0aW9ucyA9IFsncGxhdGZvcm0teW91dHViZScsICdnZW5lcmF0ZScsICdwbGF0Zm9ybS1pbnN0YWdyYW0nLCAnZ2VuZXJhdGUnXTtcbiAgICAgIGNvbnN0IHBhdHRlcm5zID0gYW5hbHl6ZVNlcXVlbmNlKG1vY2tBY3Rpb25zKTtcbiAgICAgIFxuICAgICAgZXhwZWN0KHBhdHRlcm5zKS50b0NvbnRhaW4oJ3BsYXRmb3JtLXlvdXR1YmUtPmdlbmVyYXRlJyk7XG4gICAgICBleHBlY3QocGF0dGVybnMpLnRvQ29udGFpbigncGxhdGZvcm0taW5zdGFncmFtLT5nZW5lcmF0ZScpO1xuICAgIH0pO1xuICB9KTtcblxuICBkZXNjcmliZSgnUGVyZm9ybWFuY2UgT3B0aW1pemF0aW9uJywgKCkgPT4ge1xuICAgIGl0KCdzaG91bGQgaGFuZGxlIGJhdGNoZWQgdXBkYXRlcyBlZmZpY2llbnRseScsICgpID0+IHtcbiAgICAgIGNvbnN0IGJhdGNoVXBkYXRlcyA9ICh1cGRhdGVzOiBBcnJheTwoKSA9PiB2b2lkPikgPT4ge1xuICAgICAgICBjb25zdCBzdGFydFRpbWUgPSBwZXJmb3JtYW5jZS5ub3coKTtcbiAgICAgICAgXG4gICAgICAgIC8vIFNpbXVsYXRlIGJhdGNoZWQgZXhlY3V0aW9uXG4gICAgICAgIHVwZGF0ZXMuZm9yRWFjaCh1cGRhdGUgPT4gdXBkYXRlKCkpO1xuICAgICAgICBcbiAgICAgICAgY29uc3QgZW5kVGltZSA9IHBlcmZvcm1hbmNlLm5vdygpO1xuICAgICAgICByZXR1cm4gZW5kVGltZSAtIHN0YXJ0VGltZTtcbiAgICAgIH07XG4gICAgICBcbiAgICAgIGNvbnN0IG1vY2tVcGRhdGVzID0gQXJyYXkoMTApLmZpbGwoKCkgPT4ge1xuICAgICAgICAvLyBTaW11bGF0ZSBzbWFsbCB1cGRhdGUgb3BlcmF0aW9uXG4gICAgICAgIHJldHVybiBNYXRoLnJhbmRvbSgpICogMTAwO1xuICAgICAgfSk7XG4gICAgICBcbiAgICAgIGNvbnN0IGR1cmF0aW9uID0gYmF0Y2hVcGRhdGVzKG1vY2tVcGRhdGVzKTtcbiAgICAgIFxuICAgICAgLy8gU2hvdWxkIGNvbXBsZXRlIHF1aWNrbHkgZm9yIHNtYWxsIG9wZXJhdGlvbnNcbiAgICAgIGV4cGVjdChkdXJhdGlvbikudG9CZUxlc3NUaGFuKDUwKTtcbiAgICB9KTtcblxuICAgIGl0KCdzaG91bGQgbWFuYWdlIG1lbW9yeSBlZmZpY2llbnRseSB3aXRoIGxpbWl0ZWQgaGlzdG9yeScsICgpID0+IHtcbiAgICAgIGNvbnN0IG1hbmFnZUhpc3RvcnkgPSAoaGlzdG9yeTogYW55W10sIG5ld0l0ZW06IGFueSwgbWF4U2l6ZTogbnVtYmVyID0gNTApID0+IHtcbiAgICAgICAgY29uc3QgbmV3SGlzdG9yeSA9IFsuLi5oaXN0b3J5LCBuZXdJdGVtXTtcbiAgICAgICAgXG4gICAgICAgIGlmIChuZXdIaXN0b3J5Lmxlbmd0aCA+IG1heFNpemUpIHtcbiAgICAgICAgICByZXR1cm4gbmV3SGlzdG9yeS5zbGljZSgtbWF4U2l6ZSk7XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIHJldHVybiBuZXdIaXN0b3J5O1xuICAgICAgfTtcbiAgICAgIFxuICAgICAgbGV0IGhpc3Rvcnk6IG51bWJlcltdID0gW107XG4gICAgICBcbiAgICAgIC8vIEFkZCA2MCBpdGVtc1xuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCA2MDsgaSsrKSB7XG4gICAgICAgIGhpc3RvcnkgPSBtYW5hZ2VIaXN0b3J5KGhpc3RvcnksIGkpO1xuICAgICAgfVxuICAgICAgXG4gICAgICAvLyBTaG91bGQgbWFpbnRhaW4gbWF4IHNpemVcbiAgICAgIGV4cGVjdChoaXN0b3J5Lmxlbmd0aCkudG9CZSg1MCk7XG4gICAgICBleHBlY3QoaGlzdG9yeVswXSkudG9CZSgxMCk7IC8vIEZpcnN0IGl0ZW0gc2hvdWxkIGJlIGluZGV4IDEwICg2MC01MClcbiAgICAgIGV4cGVjdChoaXN0b3J5WzQ5XSkudG9CZSg1OSk7IC8vIExhc3QgaXRlbSBzaG91bGQgYmUgaW5kZXggNTlcbiAgICB9KTtcbiAgfSk7XG5cbiAgZGVzY3JpYmUoJ0Vycm9yIEhhbmRsaW5nIGFuZCBSZXNpbGllbmNlJywgKCkgPT4ge1xuICAgIGl0KCdzaG91bGQgaGFuZGxlIGxvY2FsU3RvcmFnZSBlcnJvcnMgZ3JhY2VmdWxseScsICgpID0+IHtcbiAgICAgIGNvbnN0IHNhZmVMb2NhbFN0b3JhZ2VPcGVyYXRpb24gPSAoa2V5OiBzdHJpbmcsIHZhbHVlOiBhbnkpID0+IHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICBpZiAodHlwZW9mIFN0b3JhZ2UgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICBjb25zb2xlLndhcm4oJ2xvY2FsU3RvcmFnZSBub3QgYXZhaWxhYmxlJyk7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgfVxuICAgICAgICAgIFxuICAgICAgICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKGtleSwgSlNPTi5zdHJpbmdpZnkodmFsdWUpKTtcbiAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICBpZiAoKGVycm9yIGFzIGFueSkubmFtZSA9PT0gJ1F1b3RhRXhjZWVkZWRFcnJvcicpIHtcbiAgICAgICAgICAgIGNvbnNvbGUud2FybignU3RvcmFnZSBxdW90YSBleGNlZWRlZCcpO1xuICAgICAgICAgICAgLy8gVHJ5IHdpdGggc21hbGxlciBkYXRhc2V0XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbShrZXksIEpTT04uc3RyaW5naWZ5KHsgcmVkdWNlZDogdHJ1ZSB9KSk7XG4gICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgfSBjYXRjaCB7XG4gICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICB9O1xuICAgICAgXG4gICAgICAvLyBTaG91bGQgbm90IHRocm93IGVycm9yc1xuICAgICAgZXhwZWN0KCgpID0+IHNhZmVMb2NhbFN0b3JhZ2VPcGVyYXRpb24oJ3Rlc3QnLCB7IGRhdGE6ICd0ZXN0JyB9KSkubm90LnRvVGhyb3coKTtcbiAgICB9KTtcblxuICAgIGl0KCdzaG91bGQgaGFuZGxlIGJyb3dzZXIgY29tcGF0aWJpbGl0eSBpc3N1ZXMnLCAoKSA9PiB7XG4gICAgICBjb25zdCBjcmVhdGVSZXNpemVPYnNlcnZlciA9ICgpID0+IHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICBpZiAodHlwZW9mIFJlc2l6ZU9ic2VydmVyICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgcmV0dXJuIG5ldyBSZXNpemVPYnNlcnZlcigoKSA9PiB7fSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgIGNvbnNvbGUud2FybignUmVzaXplT2JzZXJ2ZXIgbm90IHN1cHBvcnRlZCcpO1xuICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG4gICAgICB9O1xuICAgICAgXG4gICAgICAvLyBTaG91bGQgbm90IHRocm93IGVycm9ycyByZWdhcmRsZXNzIG9mIGJyb3dzZXIgc3VwcG9ydFxuICAgICAgZXhwZWN0KCgpID0+IGNyZWF0ZVJlc2l6ZU9ic2VydmVyKCkpLm5vdC50b1Rocm93KCk7XG4gICAgfSk7XG4gIH0pO1xuXG4gIGRlc2NyaWJlKCdJbnRlZ3JhdGlvbiBhbmQgQ29vcmRpbmF0aW9uJywgKCkgPT4ge1xuICAgIGl0KCdzaG91bGQgY29vcmRpbmF0ZSBtdWx0aXBsZSBmZWF0dXJlcyBjb3JyZWN0bHknLCAoKSA9PiB7XG4gICAgICBpbnRlcmZhY2UgU3lzdGVtU3RhdGUge1xuICAgICAgICBwcmVkaWN0aXZlRW5hYmxlZDogYm9vbGVhbjtcbiAgICAgICAgc21hcnRMb2FkaW5nQWN0aXZlOiBib29sZWFuO1xuICAgICAgICBtaWNyb0ludGVyYWN0aW9uc0VuYWJsZWQ6IGJvb2xlYW47XG4gICAgICAgIHBlcmZvcm1hbmNlT3B0aW1pemVkOiBib29sZWFuO1xuICAgICAgfVxuICAgICAgXG4gICAgICBjb25zdCBpbml0aWFsaXplUGhhc2U2ID0gKCk6IFN5c3RlbVN0YXRlID0+ICh7XG4gICAgICAgIHByZWRpY3RpdmVFbmFibGVkOiB0cnVlLFxuICAgICAgICBzbWFydExvYWRpbmdBY3RpdmU6IHRydWUsXG4gICAgICAgIG1pY3JvSW50ZXJhY3Rpb25zRW5hYmxlZDogdHJ1ZSxcbiAgICAgICAgcGVyZm9ybWFuY2VPcHRpbWl6ZWQ6IHRydWUsXG4gICAgICB9KTtcbiAgICAgIFxuICAgICAgY29uc3Qgc3RhdGUgPSBpbml0aWFsaXplUGhhc2U2KCk7XG4gICAgICBcbiAgICAgIGV4cGVjdChzdGF0ZS5wcmVkaWN0aXZlRW5hYmxlZCkudG9CZSh0cnVlKTtcbiAgICAgIGV4cGVjdChzdGF0ZS5zbWFydExvYWRpbmdBY3RpdmUpLnRvQmUodHJ1ZSk7XG4gICAgICBleHBlY3Qoc3RhdGUubWljcm9JbnRlcmFjdGlvbnNFbmFibGVkKS50b0JlKHRydWUpO1xuICAgICAgZXhwZWN0KHN0YXRlLnBlcmZvcm1hbmNlT3B0aW1pemVkKS50b0JlKHRydWUpO1xuICAgIH0pO1xuICB9KTtcbn0pO1xuXG4vLyBQaGFzZSA2IENvbXBvbmVudCBWYWxpZGF0aW9uXG5kZXNjcmliZSgnUGhhc2UgNjogQ29tcG9uZW50IEFyY2hpdGVjdHVyZSBWYWxpZGF0aW9uJywgKCkgPT4ge1xuICBpdCgnc2hvdWxkIHZhbGlkYXRlIFBsYXRmb3JtU2VsZWN0b3JFbmhhbmNlZCBzdHJ1Y3R1cmUnLCAoKSA9PiB7XG4gICAgY29uc3QgbW9ja1Byb3BzID0ge1xuICAgICAgc2VsZWN0ZWRQbGF0Zm9ybTogJ1lvdVR1YmUnIGFzIGNvbnN0LFxuICAgICAgb25QbGF0Zm9ybUNoYW5nZTogKHBsYXRmb3JtOiBzdHJpbmcpID0+IHt9LFxuICAgICAgZGlzYWJsZWQ6IGZhbHNlLFxuICAgIH07XG4gICAgXG4gICAgZXhwZWN0KHR5cGVvZiBtb2NrUHJvcHMuc2VsZWN0ZWRQbGF0Zm9ybSkudG9CZSgnc3RyaW5nJyk7XG4gICAgZXhwZWN0KHR5cGVvZiBtb2NrUHJvcHMub25QbGF0Zm9ybUNoYW5nZSkudG9CZSgnZnVuY3Rpb24nKTtcbiAgICBleHBlY3QodHlwZW9mIG1vY2tQcm9wcy5kaXNhYmxlZCkudG9CZSgnYm9vbGVhbicpO1xuICB9KTtcblxuICBpdCgnc2hvdWxkIHZhbGlkYXRlIFNtYXJ0TG9hZGluZyBpbnRlcmZhY2UnLCAoKSA9PiB7XG4gICAgY29uc3QgbW9ja0xvYWRpbmdQcm9wcyA9IHtcbiAgICAgIGlzTG9hZGluZzogdHJ1ZSxcbiAgICAgIHByb2dyZXNzOiA1MCxcbiAgICAgIHN0YWdlOiAnTG9hZGluZy4uLicsXG4gICAgICB0eXBlOiAncHJvZ3Jlc3MnIGFzIGNvbnN0LFxuICAgICAgc2l6ZTogJ21kJyBhcyBjb25zdCxcbiAgICB9O1xuICAgIFxuICAgIGV4cGVjdCh0eXBlb2YgbW9ja0xvYWRpbmdQcm9wcy5pc0xvYWRpbmcpLnRvQmUoJ2Jvb2xlYW4nKTtcbiAgICBleHBlY3QodHlwZW9mIG1vY2tMb2FkaW5nUHJvcHMucHJvZ3Jlc3MpLnRvQmUoJ251bWJlcicpO1xuICAgIGV4cGVjdCh0eXBlb2YgbW9ja0xvYWRpbmdQcm9wcy5zdGFnZSkudG9CZSgnc3RyaW5nJyk7XG4gICAgZXhwZWN0KFsnc3Bpbm5lcicsICdwcm9ncmVzcycsICdza2VsZXRvbicsICdhZGFwdGl2ZSddKS50b0NvbnRhaW4obW9ja0xvYWRpbmdQcm9wcy50eXBlKTtcbiAgICBleHBlY3QoWydzbScsICdtZCcsICdsZyddKS50b0NvbnRhaW4obW9ja0xvYWRpbmdQcm9wcy5zaXplKTtcbiAgfSk7XG59KTtcblxuY29uc29sZS5sb2coJ/CfmoAgUGhhc2UgNiBBZHZhbmNlZCBVWCBGZWF0dXJlcyAtIFZhbGlkYXRpb24gVGVzdHMgTG9hZGVkJyk7XG4iXSwidmVyc2lvbiI6M30=