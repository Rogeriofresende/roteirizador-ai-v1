{"version":3,"names":["cov_13hzucjit6","path","hash","global","Function","gcv","coverageData","statementMap","start","line","column","end","fnMap","branchMap","s","f","b","inputSourceMap","file","mappings","names","sources","sourcesContent","version","_coverageSchema","coverage","actualCoverage"],"sources":["/Users/rogerioresende/Desktop/Roteirar-ia/src/services/interfaces/IAPIService.ts"],"sourcesContent":["/**\n * API Service Interface\n * Contract para servi√ßos de API (Gemini, ChatGPT, etc.)\n */\n\nimport { IBaseService } from './IBaseService';\n\nexport interface APIRequest {\n  method: 'GET' | 'POST' | 'PUT' | 'DELETE' | 'PATCH';\n  url: string;\n  headers?: Record<string, string>;\n  body?: any;\n  timeout?: number;\n  retries?: number;\n}\n\nexport interface APIResponse<T = any> {\n  data: T;\n  status: number;\n  statusText: string;\n  headers: Record<string, string>;\n  success: boolean;\n}\n\nexport interface APIError {\n  code: string;\n  message: string;\n  status?: number;\n  details?: any;\n  timestamp: Date;\n}\n\nexport interface AIRequest {\n  prompt: string;\n  model?: string;\n  temperature?: number;\n  maxTokens?: number;\n  systemPrompt?: string;\n  context?: any;\n}\n\nexport interface AIResponse {\n  content: string;\n  model: string;\n  usage: {\n    promptTokens: number;\n    completionTokens: number;\n    totalTokens: number;\n  };\n  finishReason: string;\n  metadata?: any;\n}\n\nexport interface IAPIService extends IBaseService {\n  // Generic HTTP operations\n  request<T>(request: APIRequest): Promise<APIResponse<T>>;\n  get<T>(url: string, headers?: Record<string, string>): Promise<APIResponse<T>>;\n  post<T>(url: string, data?: any, headers?: Record<string, string>): Promise<APIResponse<T>>;\n  put<T>(url: string, data?: any, headers?: Record<string, string>): Promise<APIResponse<T>>;\n  delete<T>(url: string, headers?: Record<string, string>): Promise<APIResponse<T>>;\n  \n  // Configuration\n  setBaseURL(url: string): void;\n  setDefaultHeaders(headers: Record<string, string>): void;\n  setAuthToken(token: string): void;\n  \n  // Error handling\n  onError(handler: (error: APIError) => void): void;\n  \n  // Rate limiting and circuit breaker\n  getRateLimitStatus(): Promise<{\n    remaining: number;\n    resetTime: Date;\n    limit: number;\n  }>;\n}\n\nexport interface IAIService extends IAPIService {\n  // AI-specific operations\n  generateText(request: AIRequest): Promise<AIResponse>;\n  generateCode(request: AIRequest & { language?: string }): Promise<AIResponse>;\n  analyze(content: string, analysisType: string): Promise<AIResponse>;\n  \n  // Model management\n  getAvailableModels(): Promise<string[]>;\n  setDefaultModel(model: string): void;\n  \n  // Token management\n  estimateTokens(text: string): number;\n  getTokenUsage(): Promise<{\n    total: number;\n    remaining: number;\n    resetDate: Date;\n  }>;\n}\n\nexport interface APIConfig {\n  baseURL: string;\n  apiKey?: string;\n  timeout: number;\n  retries: number;\n  rateLimit?: {\n    requests: number;\n    window: number; // in milliseconds\n  };\n  circuitBreaker?: {\n    threshold: number;\n    timeout: number;\n  };\n} "],"mappings":";;AAAA;;;;AAAA;AAAA,SAAAA,eAAA;EAAA,IAAAC,IAAA;EAAA,IAAAC,IAAA;EAAA,IAAAC,MAAA,OAAAC,QAAA;EAAA,IAAAC,GAAA;EAAA,IAAAC,YAAA;IAAAL,IAAA;IAAAM,YAAA;MAAA;QAAAC,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;IAAA;IAAAE,KAAA;IAAAC,SAAA;IAAAC,CAAA;MAAA;IAAA;IAAAC,CAAA;IAAAC,CAAA;IAAAC,cAAA;MAAAC,IAAA;MAAAC,QAAA;MAAAC,KAAA;MAAAC,OAAA;MAAAC,cAAA;MAAAC,OAAA;IAAA;IAAAC,eAAA;IAAAtB,IAAA;EAAA;EAAA,IAAAuB,QAAA,GAAAtB,MAAA,CAAAE,GAAA,MAAAF,MAAA,CAAAE,GAAA;EAAA,KAAAoB,QAAA,CAAAxB,IAAA,KAAAwB,QAAA,CAAAxB,IAAA,EAAAC,IAAA,KAAAA,IAAA;IAAAuB,QAAA,CAAAxB,IAAA,IAAAK,YAAA;EAAA;EAAA,IAAAoB,cAAA,GAAAD,QAAA,CAAAxB,IAAA;EAAA","ignoreList":[]}