import type { Meta, StoryObj } from '@storybook/react';
import React from 'react';

// Component para exibir arquitetura no Storybook
const ArchitectureViewer = ({ 
  title, 
  mermaidCode, 
  description 
}: { 
  title: string; 
  mermaidCode: string; 
  description: string; 
}) => {
  return (
    <div style={{ padding: '20px', fontFamily: 'system-ui' }}>
      <h2 style={{ color: '#1976d2', marginBottom: '16px' }}>{title}</h2>
      <p style={{ marginBottom: '24px', color: '#666', lineHeight: '1.6' }}>
        {description}
      </p>
      
      {/* Mermaid diagram - renderizado automaticamente pelo Storybook */}
      <div style={{ 
        border: '1px solid #e0e0e0', 
        borderRadius: '8px', 
        padding: '20px',
        backgroundColor: '#fafafa',
        overflow: 'auto'
      }}>
        <pre style={{ 
          fontSize: '12px', 
          fontFamily: 'monospace',
          margin: 0,
          whiteSpace: 'pre-wrap',
          color: '#333'
        }}>
          {mermaidCode}
        </pre>
      </div>
      
      <div style={{ 
        marginTop: '16px', 
        padding: '12px', 
        backgroundColor: '#e3f2fd',
        borderRadius: '4px',
        fontSize: '14px'
      }}>
        üí° <strong>Como usar:</strong> Copie o c√≥digo Mermaid acima e cole em qualquer editor que suporte Mermaid (VS Code, GitHub, etc.)
      </div>
    </div>
  );
};

const meta: Meta<typeof ArchitectureViewer> = {
  title: 'üìê Architecture/System Flows',
  component: ArchitectureViewer,
  parameters: {
    layout: 'fullscreen',
    docs: {
      description: {
        component: 'Documenta√ß√£o completa da arquitetura e fluxos do sistema. Atualizada automaticamente pela IA.'
      }
    }
  }
};

export default meta;
type Story = StoryObj<typeof ArchitectureViewer>;

// üéØ Story 1: Vis√£o Geral do Sistema
export const SystemOverview: Story = {
  args: {
    title: 'üèóÔ∏è Vis√£o Geral da Arquitetura',
    description: 'Arquitetura Clean Architecture com DI Container, 20+ servi√ßos enterprise e componentes React organizados por features.',
    mermaidCode: `graph TB
    subgraph "üé® Presentation Layer"
        A[React Components]
        B[Pages & Routes]
        C[Custom Hooks]
        D[Context Providers]
    end
    
    subgraph "üîß Application Layer"
        E[DI Container]
        F[Service Registry]
        G[Use Cases]
        H[DTOs & Interfaces]
    end
    
    subgraph "üíº Domain Layer"
        I[User Entity]
        J[Script Entity]
        K[Business Rules]
        L[Domain Services]
    end
    
    subgraph "üåê Infrastructure"
        M[Firebase Client]
        N[Gemini AI Client]
        O[Analytics Services]
        P[Cache & Storage]
    end
    
    A --> E
    B --> F
    C --> G
    D --> H
    
    E --> I
    F --> J
    G --> K
    H --> L
    
    I --> M
    J --> N
    K --> O
    L --> P`
  }
};

// üí° Story 2: User Journey
export const UserJourney: Story = {
  args: {
    title: 'üë§ Jornada Completa do Usu√°rio',
    description: 'Fluxo completo desde o primeiro acesso at√© a gera√ß√£o de conte√∫do, incluindo autentica√ß√£o, dashboard e funcionalidades principais.',
    mermaidCode: `graph TD
    A[üè† Primeiro Acesso] --> B{üîê Autenticado?}
    B -->|N√£o| C[üìù Login/Cadastro]
    B -->|Sim| D[üìä Dashboard]
    
    C --> E[üî• Firebase Auth]
    E --> F[‚úÖ Sucesso]
    F --> D
    
    D --> G[üí° Gerar Ideias]
    D --> H[üìÖ Planejar]
    D --> I[üìà Analytics]
    
    G --> J[üìù Formul√°rio]
    J --> K[ü§ñ IA Processing]
    K --> L[üìÑ Resultados]
    L --> M[üíæ Salvar]
    
    H --> N[üìÖ Calend√°rio]
    N --> O[‚ûï Quick Add]
    O --> P[üìã Agendamento]
    
    I --> Q[üìä M√©tricas]
    Q --> R[üìà Insights]
    R --> S[üéØ Recomenda√ß√µes]`
  }
};

// üîÑ Story 3: Data Flow
export const DataFlow: Story = {
  args: {
    title: 'üîÑ Fluxo de Dados e Estados',
    description: 'Como os dados fluem atrav√©s do sistema, desde a entrada do usu√°rio at√© a persist√™ncia e sincroniza√ß√£o.',
    mermaidCode: `sequenceDiagram
    participant U as üë§ Usu√°rio
    participant C as üé® Component
    participant S as üîß Service
    participant D as üíº Domain
    participant I as üåê Infrastructure
    participant E as üåç External API
    
    U->>C: A√ß√£o do usu√°rio
    C->>S: Chama service via DI
    S->>D: Executa regra de neg√≥cio
    D->>I: Acessa infrastructure
    I->>E: Chama API externa
    E->>I: Retorna dados
    I->>D: Processa resposta
    D->>S: Aplica regras
    S->>C: Atualiza estado
    C->>U: Exibe resultado`
  }
};

// ‚ö° Story 4: Performance & Monitoring
export const PerformanceFlow: Story = {
  args: {
    title: '‚ö° Performance & Monitoring',
    description: 'Sistema de monitoramento em tempo real, detec√ß√£o de problemas e auto-recovery implementado.',
    mermaidCode: `graph LR
    A[üöÄ App Start] --> B[üìä Metrics]
    B --> C{üîç Health?}
    
    C -->|‚úÖ OK| D[Continue]
    C -->|‚ö†Ô∏è Warning| E[Log Alert]
    C -->|üö® Critical| F[Auto Recovery]
    
    D --> G[üìà Analytics]
    E --> H[üìù Report]
    F --> I[üîÑ Restart Service]
    
    G --> J[üë®‚Äçüíª Insights]
    H --> K[üõ†Ô∏è Debug Info]
    I --> L[‚úÖ Recovery Success]`
  }
};

// üß™ Story 5: Testing Strategy
export const TestingStrategy: Story = {
  args: {
    title: 'üß™ Estrat√©gia de Testes',
    description: 'Pipeline completo de testes: unit√°rios, integra√ß√£o, E2E e cobertura. Sistema atual com 128/153 testes passando.',
    mermaidCode: `graph TD
    A[üíª Code Change] --> B[üß™ Unit Tests]
    B --> C[üîó Integration Tests]
    C --> D[üåê E2E Tests]
    D --> E[üìä Coverage Report]
    
    E --> F{‚úÖ >85% Coverage?}
    F -->|Yes| G[üöÄ Deploy Staging]
    F -->|No| H[‚ùå Block Deploy]
    
    G --> I[üîç Smoke Tests]
    I --> J[üìà Performance Tests]
    J --> K[‚úÖ Production Deploy]
    
    H --> L[üìù Fix Required]
    L --> A
    
    style F fill:#fff3e0
    style G fill:#e8f5e8
    style H fill:#ffebee`
  }
};

// üîß Story 6: Service Architecture
export const ServiceArchitecture: Story = {
  args: {
    title: 'üîß Arquitetura de Servi√ßos (DI System)',
    description: 'Sistema de Dependency Injection com 20+ servi√ßos enterprise, registro autom√°tico e controle de lifecycle.',
    mermaidCode: `graph TB
    subgraph "üì¶ DI Container"
        A[Service Registry]
        B[Lifecycle Manager]
        C[Dependency Resolver]
    end
    
    subgraph "üîß Core Services"
        D[Analytics Service]
        E[Auth Service]
        F[AI Generation Service]
        G[Voice Synthesis Service]
    end
    
    subgraph "üìä Monitoring Services"
        H[Performance Service]
        I[Error Tracking Service]
        J[Health Check Service]
    end
    
    subgraph "üåê External Services"
        K[Firebase Service]
        L[Gemini Service]
        M[Clarity Service]
        N[Tally Service]
    end
    
    A --> D
    A --> E
    A --> F
    A --> G
    
    B --> H
    B --> I
    B --> J
    
    C --> K
    C --> L
    C --> M
    C --> N`
  }
}; 