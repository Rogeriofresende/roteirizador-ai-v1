#!/usr/bin/env node

/**
 * Auto-Fix Orchestrator V6.2 - Orquestra√ß√£o Completa de Corre√ß√µes
 * Coordena todo o processo de detec√ß√£o ‚Üí an√°lise ‚Üí corre√ß√£o ‚Üí valida√ß√£o
 */

import fs from 'fs';
import path from 'path';
import { execSync } from 'child_process';
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

class AutoFixOrchestrator {
  constructor() {
    this.logsDir = path.join(__dirname, '..', 'logs');
    this.promptsDir = path.join(__dirname, '..', 'PROMPTS_AUTO_GENERATED');
    this.maxIterations = 5; // M√°ximo de tentativas
    this.currentIteration = 0;
  }

  /**
   * Executa ciclo completo de corre√ß√£o autom√°tica
   */
  async runAutoFix() {
    console.log('üöÄ Auto-Fix Orchestrator V6.2 iniciado');
    console.log('üîÑ Executando ciclo completo de corre√ß√£o autom√°tica...');

    try {
      while (this.currentIteration < this.maxIterations) {
        this.currentIteration++;
        console.log(`\nüîÑ === ITERA√á√ÉO ${this.currentIteration}/${this.maxIterations} ===`);

        // Passo 1: Detectar erros
        console.log('üìä 1. Detectando erros...');
        await this.detectErrors();

        // Passo 2: Analisar erros
        console.log('üß† 2. Analisando erros...');
        const analysis = await this.analyzeErrors();

        // Se n√£o h√° erros, parar
        if (!analysis || analysis.totalErrors === 0) {
          console.log('‚úÖ Nenhum erro detectado! Sistema limpo.');
          break;
        }

        console.log(`üìã Encontrados ${analysis.totalErrors} erros para corre√ß√£o`);

        // Passo 3: Gerar prompts
        console.log('üìù 3. Gerando prompts de corre√ß√£o...');
        const prompts = await this.generatePrompts();

        if (prompts.length === 0) {
          console.log('‚ö†Ô∏è  Nenhum prompt gerado. Parando processo.');
          break;
        }

        // Passo 4: Executar corre√ß√µes (simular por agora)
        console.log('üîß 4. Executando corre√ß√µes...');
        await this.executeCorrections(prompts);

        // Passo 5: Validar corre√ß√µes
        console.log('‚úÖ 5. Validando corre√ß√µes...');
        const validationResult = await this.validateCorrections();

        if (validationResult.success) {
          console.log('‚úÖ Corre√ß√µes validadas com sucesso!');
          
          // Executar uma √∫ltima verifica√ß√£o
          await this.detectErrors();
          const finalAnalysis = await this.analyzeErrors();
          
          if (!finalAnalysis || finalAnalysis.totalErrors === 0) {
            console.log('üéâ Sistema completamente limpo! Processo conclu√≠do.');
            break;
          }
        }

        // Se chegou aqui, ainda h√° erros
        console.log('‚ö†Ô∏è  Ainda h√° erros ap√≥s corre√ß√£o. Repetindo processo...');
        
        if (this.currentIteration >= this.maxIterations) {
          console.log('‚ö†Ô∏è  M√°ximo de itera√ß√µes atingido. Processo interrompido.');
          console.log('üí° Alguns erros podem precisar de interven√ß√£o manual.');
        }
      }

      // Relat√≥rio final
      await this.generateFinalReport();

    } catch (error) {
      console.error('‚ùå Erro durante processo de auto-fix:', error.message);
      throw error;
    }
  }

  /**
   * Detecta erros executando monitor
   */
  async detectErrors() {
    try {
      // Executar monitor rapidamente para capturar estado atual
      execSync('timeout 10s node scripts/error-monitor.js || true', { 
        stdio: 'pipe' 
      });
    } catch (error) {
      // Ignorar timeout - √© esperado
    }
  }

  /**
   * Analisa erros executando analyzer
   */
  async analyzeErrors() {
    try {
      execSync('node scripts/error-analyzer.js', { stdio: 'pipe' });
      
      const analysisFile = path.join(this.logsDir, 'error-analysis.json');
      if (fs.existsSync(analysisFile)) {
        return JSON.parse(fs.readFileSync(analysisFile, 'utf8'));
      }
    } catch (error) {
      console.warn('‚ö†Ô∏è  Falha na an√°lise:', error.message);
    }
    
    return null;
  }

  /**
   * Gera prompts executando generator
   */
  async generatePrompts() {
    try {
      execSync('node scripts/prompt-generator.js', { stdio: 'pipe' });
      
      // Listar prompts gerados
      if (fs.existsSync(this.promptsDir)) {
        const files = fs.readdirSync(this.promptsDir)
          .filter(f => f.endsWith('.md'))
          .map(f => path.join(this.promptsDir, f));
        
        return files;
      }
    } catch (error) {
      console.warn('‚ö†Ô∏è  Falha na gera√ß√£o de prompts:', error.message);
    }
    
    return [];
  }

  /**
   * Executa corre√ß√µes (simular por agora)
   */
  async executeCorrections(prompts) {
    console.log(`üìã ${prompts.length} prompts prontos para execu√ß√£o`);
    
    prompts.forEach((promptFile, index) => {
      const promptName = path.basename(promptFile);
      console.log(`  ${index + 1}. ${promptName}`);
    });

    // Por agora, simular execu√ß√£o
    console.log('üí° SIMULA√á√ÉO: Em produ√ß√£o, aqui os prompts seriam enviados para IAs do Cursor');
    console.log('üîÑ Para executar manualmente: copie o conte√∫do dos prompts e execute com IA');
    
    // Simular delay de execu√ß√£o
    await new Promise(resolve => setTimeout(resolve, 2000));
  }

  /**
   * Valida se corre√ß√µes funcionaram
   */
  async validateCorrections() {
    try {
      console.log('üîç Executando valida√ß√£o...');
      
      // Tentar build
      execSync('npm run build', { stdio: 'pipe', timeout: 60000 });
      console.log('‚úÖ Build passou');
      
      // Outras valida√ß√µes poderiam ser adicionadas aqui
      return { success: true, message: 'Build passou com sucesso' };
      
    } catch (error) {
      console.log('‚ùå Valida√ß√£o falhou');
      return { 
        success: false, 
        message: 'Build failed: ' + error.message.substring(0, 100) 
      };
    }
  }

  /**
   * Gera relat√≥rio final do processo
   */
  async generateFinalReport() {
    const reportFile = path.join(this.logsDir, 'auto-fix-report.json');
    
    const report = {
      timestamp: new Date().toISOString(),
      iterations: this.currentIteration,
      maxIterations: this.maxIterations,
      status: this.currentIteration < this.maxIterations ? 'completed' : 'max_iterations_reached',
      finalAnalysis: null
    };

    // Incluir an√°lise final se dispon√≠vel
    try {
      const finalAnalysis = await this.analyzeErrors();
      report.finalAnalysis = finalAnalysis;
    } catch (error) {
      // Ignorar erro na an√°lise final
    }

    try {
      fs.writeFileSync(reportFile, JSON.stringify(report, null, 2));
      console.log(`üìä Relat√≥rio final salvo: ${reportFile}`);
    } catch (error) {
      console.warn('‚ö†Ô∏è  Erro ao salvar relat√≥rio:', error.message);
    }

    // Exibir resumo
    this.displayFinalSummary(report);
  }

  /**
   * Exibe resumo final
   */
  displayFinalSummary(report) {
    console.log('\n' + '='.repeat(60));
    console.log('üìä RELAT√ìRIO FINAL DO AUTO-FIX');
    console.log('='.repeat(60));
    console.log(`‚è±Ô∏è  Itera√ß√µes executadas: ${report.iterations}/${report.maxIterations}`);
    console.log(`üìÖ Finalizado em: ${new Date(report.timestamp).toLocaleString()}`);
    console.log(`üéØ Status: ${report.status}`);
    
    if (report.finalAnalysis) {
      console.log(`üìä Erros finais: ${report.finalAnalysis.totalErrors}`);
      if (report.finalAnalysis.totalErrors === 0) {
        console.log('üéâ SUCESSO: Sistema completamente limpo!');
      } else {
        console.log('‚ö†Ô∏è  PARCIAL: Alguns erros ainda existem');
        console.log('üí° Recomenda√ß√£o: Revisar prompts gerados manualmente');
      }
    }
    
    console.log('='.repeat(60));
  }
}

// Execu√ß√£o se chamado diretamente
const orchestrator = new AutoFixOrchestrator();

// Captura sinais para relat√≥rio de interrup√ß√£o
process.on('SIGINT', () => {
  console.log('\n‚èπÔ∏è  Processo interrompido pelo usu√°rio');
  orchestrator.generateFinalReport().then(() => {
    process.exit(0);
  });
});

orchestrator.runAutoFix().catch(error => {
  console.error('‚ùå Erro cr√≠tico:', error.message);
  process.exit(1);
});

export default AutoFixOrchestrator; 